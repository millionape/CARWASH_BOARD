
i2c_test_c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006380  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006884  08006884  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006884  08006884  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006884  08006884  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800688c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200000a0  0800692c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800692c  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f98  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab7  00000000  00000000  00031061  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970a  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eeff  00000000  00000000  0004f3da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fa44  00000000  00000000  0005e2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edd1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae8  00000000  00000000  000edd98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006474 	.word	0x08006474

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08006474 	.word	0x08006474

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b55      	ldr	r3, [pc, #340]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a54      	ldr	r2, [pc, #336]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b52      	ldr	r3, [pc, #328]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b4f      	ldr	r3, [pc, #316]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a4e      	ldr	r2, [pc, #312]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b4c      	ldr	r3, [pc, #304]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b49      	ldr	r3, [pc, #292]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a48      	ldr	r2, [pc, #288]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b46      	ldr	r3, [pc, #280]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b43      	ldr	r3, [pc, #268]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a42      	ldr	r2, [pc, #264]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b40      	ldr	r3, [pc, #256]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	483d      	ldr	r0, [pc, #244]	; (80002cc <MX_GPIO_Init+0x170>)
 80001d8:	f002 ffdf 	bl	800319a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 80001dc:	2200      	movs	r2, #0
 80001de:	f245 3103 	movw	r1, #21251	; 0x5303
 80001e2:	483b      	ldr	r0, [pc, #236]	; (80002d0 <MX_GPIO_Init+0x174>)
 80001e4:	f002 ffd9 	bl	800319a <HAL_GPIO_WritePin>
                          |OUT_PIN4_Pin|OUT_PIN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_PIN3_GPIO_Port, OUT_PIN3_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	4839      	ldr	r0, [pc, #228]	; (80002d4 <MX_GPIO_Init+0x178>)
 80001f0:	f002 ffd3 	bl	800319a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000202:	2301      	movs	r3, #1
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	482f      	ldr	r0, [pc, #188]	; (80002cc <MX_GPIO_Init+0x170>)
 800020e:	f002 fe53 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = USER_SW2_Pin|FRONT_SW1_PIN_Pin|FRONT_SW2_PIN_Pin|FRONT_SW3_PIN_Pin
 8000212:	23fc      	movs	r3, #252	; 0xfc
 8000214:	613b      	str	r3, [r7, #16]
                          |FRONT_SW4_PIN_Pin|FRONT_SW5_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000216:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <MX_GPIO_Init+0x17c>)
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	482b      	ldr	r0, [pc, #172]	; (80002d4 <MX_GPIO_Init+0x178>)
 8000226:	f002 fe47 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 800022a:	f245 3303 	movw	r3, #21251	; 0x5303
 800022e:	613b      	str	r3, [r7, #16]
                          |OUT_PIN4_Pin|OUT_PIN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000234:	2302      	movs	r3, #2
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	4823      	ldr	r0, [pc, #140]	; (80002d0 <MX_GPIO_Init+0x174>)
 8000244:	f002 fe38 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_PIN3_Pin;
 8000248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2302      	movs	r3, #2
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_PIN3_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_GPIO_Init+0x178>)
 8000262:	f002 fe29 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_SW3_Pin;
 8000266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_SW3_GPIO_Port, &GPIO_InitStruct);
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	4619      	mov	r1, r3
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <MX_GPIO_Init+0x178>)
 800027c:	f002 fe1c 	bl	8002eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2105      	movs	r1, #5
 8000284:	2008      	movs	r0, #8
 8000286:	f002 fdc4 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800028a:	2008      	movs	r0, #8
 800028c:	f002 fddd 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	2105      	movs	r1, #5
 8000294:	2009      	movs	r0, #9
 8000296:	f002 fdbc 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800029a:	2009      	movs	r0, #9
 800029c:	f002 fdd5 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2105      	movs	r1, #5
 80002a4:	200a      	movs	r0, #10
 80002a6:	f002 fdb4 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002aa:	200a      	movs	r0, #10
 80002ac:	f002 fdcd 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2105      	movs	r1, #5
 80002b4:	2017      	movs	r0, #23
 80002b6:	f002 fdac 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ba:	2017      	movs	r0, #23
 80002bc:	f002 fdc5 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40010800 	.word	0x40010800
 80002d8:	10110000 	.word	0x10110000

080002dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002e0:	f002 fbe4 	bl	8002aac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002e4:	f000 f888 	bl	80003f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002e8:	f7ff ff38 	bl	800015c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80002ec:	f002 fadc 	bl	80028a8 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80002f0:	f002 f8c6 	bl	8002480 <MX_TIM1_Init>
	MX_TIM2_Init();
 80002f4:	f002 f916 	bl	8002524 <MX_TIM2_Init>
	MX_TIM3_Init();
 80002f8:	f002 f960 	bl	80025bc <MX_TIM3_Init>
	MX_TIM4_Init();
 80002fc:	f002 f9da 	bl	80026b4 <MX_TIM4_Init>
	MX_SPI2_Init();
 8000300:	f001 ff42 	bl	8002188 <MX_SPI2_Init>
	MX_RTC_Init();
 8000304:	f001 fed2 	bl	80020ac <MX_RTC_Init>
	MX_USART3_UART_Init();
 8000308:	f002 faf8 	bl	80028fc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(400);
 800030c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000310:	f002 fc2e 	bl	8002b70 <HAL_Delay>
	read_settings_from_eeprom();
 8000314:	f000 f8ce 	bl	80004b4 <read_settings_from_eeprom>
	HAL_Delay(400);
 8000318:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800031c:	f002 fc28 	bl	8002b70 <HAL_Delay>
	max7219_Init ( 7 );
 8000320:	2007      	movs	r0, #7
 8000322:	f001 fd4d 	bl	8001dc0 <max7219_Init>
	max7219_Decode_On ();
 8000326:	f001 fdd1 	bl	8001ecc <max7219_Decode_On>
	HAL_TIM_Base_Stop_IT(&htim2);
 800032a:	4827      	ldr	r0, [pc, #156]	; (80003c8 <main+0xec>)
 800032c:	f004 fbcc 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000330:	2100      	movs	r1, #0
 8000332:	4826      	ldr	r0, [pc, #152]	; (80003cc <main+0xf0>)
 8000334:	f004 fc4e 	bl	8004bd4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000338:	2104      	movs	r1, #4
 800033a:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0xf0>)
 800033c:	f004 fc4a 	bl	8004bd4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000340:	4821      	ldr	r0, [pc, #132]	; (80003c8 <main+0xec>)
 8000342:	f004 fb6f 	bl	8004a24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8000346:	4822      	ldr	r0, [pc, #136]	; (80003d0 <main+0xf4>)
 8000348:	f004 fbbe 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim1);
 800034c:	4821      	ldr	r0, [pc, #132]	; (80003d4 <main+0xf8>)
 800034e:	f004 fbbb 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <main+0xf8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f06f 0201 	mvn.w	r2, #1
 800035a:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xf8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
	DEV_ID =  HAL_GetDEVID();
 8000364:	f002 fc32 	bl	8002bcc <HAL_GetDEVID>
 8000368:	4602      	mov	r2, r0
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <main+0xfc>)
 800036c:	601a      	str	r2, [r3, #0]
	REV_ID = HAL_GetREVID();
 800036e:	f002 fc21 	bl	8002bb4 <HAL_GetREVID>
 8000372:	4602      	mov	r2, r0
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <main+0x100>)
 8000376:	601a      	str	r2, [r3, #0]

	sprintf(dev_id_buffer, "$DVID%d-%d&\r\n",(int)DEV_ID,(int)REV_ID);
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <main+0xfc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <main+0x100>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4917      	ldr	r1, [pc, #92]	; (80003e0 <main+0x104>)
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <main+0x108>)
 8000386:	f005 fc63 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dev_id_buffer, strlen(dev_id_buffer), HAL_MAX_DELAY);
 800038a:	4816      	ldr	r0, [pc, #88]	; (80003e4 <main+0x108>)
 800038c:	f7ff fede 	bl	800014c <strlen>
 8000390:	4603      	mov	r3, r0
 8000392:	b29a      	uxth	r2, r3
 8000394:	f04f 33ff 	mov.w	r3, #4294967295
 8000398:	4912      	ldr	r1, [pc, #72]	; (80003e4 <main+0x108>)
 800039a:	4813      	ldr	r0, [pc, #76]	; (80003e8 <main+0x10c>)
 800039c:	f005 fabb 	bl	8005916 <HAL_UART_Transmit>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80003a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a4:	f002 fbe4 	bl	8002b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)){
 80003a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ac:	480f      	ldr	r0, [pc, #60]	; (80003ec <main+0x110>)
 80003ae:	f002 fedd 	bl	800316c <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0f3      	beq.n	80003a0 <main+0xc4>
			credit = 0;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <main+0x114>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
			system_function_start = false;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <main+0x118>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80003c4:	e7ec      	b.n	80003a0 <main+0xc4>
 80003c6:	bf00      	nop
 80003c8:	20000294 	.word	0x20000294
 80003cc:	20000204 	.word	0x20000204
 80003d0:	200001bc 	.word	0x200001bc
 80003d4:	2000024c 	.word	0x2000024c
 80003d8:	200000bc 	.word	0x200000bc
 80003dc:	200000c0 	.word	0x200000c0
 80003e0:	0800648c 	.word	0x0800648c
 80003e4:	20000110 	.word	0x20000110
 80003e8:	2000031c 	.word	0x2000031c
 80003ec:	40010800 	.word	0x40010800
 80003f0:	200000e4 	.word	0x200000e4
 80003f4:	200000f0 	.word	0x200000f0

080003f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f005 fc1a 	bl	8005c40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000428:	2309      	movs	r3, #9
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	2301      	movs	r3, #1
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	2302      	movs	r3, #2
 8000440:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000446:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000448:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800044c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fede 	bl	8003214 <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800045e:	f001 fca9 	bl	8001db4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f003 f948 	bl	8003714 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800048a:	f001 fc93 	bl	8001db4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800048e:	2301      	movs	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000496:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fad6 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xb2>
	{
		Error_Handler();
 80004a6:	f001 fc85 	bl	8001db4 <Error_Handler>
	}
}
 80004aa:	bf00      	nop
 80004ac:	3750      	adds	r7, #80	; 0x50
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <read_settings_from_eeprom>:

/* USER CODE BEGIN 4 */
void read_settings_from_eeprom(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
	F1_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80004ba:	2101      	movs	r1, #1
 80004bc:	487a      	ldr	r0, [pc, #488]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004be:	f003 ffdf 	bl	8004480 <HAL_RTCEx_BKUPRead>
 80004c2:	4603      	mov	r3, r0
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b79      	ldr	r3, [pc, #484]	; (80006ac <read_settings_from_eeprom+0x1f8>)
 80004c8:	701a      	strb	r2, [r3, #0]
	F2_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80004ca:	2102      	movs	r1, #2
 80004cc:	4876      	ldr	r0, [pc, #472]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004ce:	f003 ffd7 	bl	8004480 <HAL_RTCEx_BKUPRead>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b76      	ldr	r3, [pc, #472]	; (80006b0 <read_settings_from_eeprom+0x1fc>)
 80004d8:	701a      	strb	r2, [r3, #0]
	F3_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80004da:	2103      	movs	r1, #3
 80004dc:	4872      	ldr	r0, [pc, #456]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004de:	f003 ffcf 	bl	8004480 <HAL_RTCEx_BKUPRead>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b73      	ldr	r3, [pc, #460]	; (80006b4 <read_settings_from_eeprom+0x200>)
 80004e8:	701a      	strb	r2, [r3, #0]
	F4_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80004ea:	2104      	movs	r1, #4
 80004ec:	486e      	ldr	r0, [pc, #440]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004ee:	f003 ffc7 	bl	8004480 <HAL_RTCEx_BKUPRead>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b70      	ldr	r3, [pc, #448]	; (80006b8 <read_settings_from_eeprom+0x204>)
 80004f8:	701a      	strb	r2, [r3, #0]
	F5_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 80004fa:	2105      	movs	r1, #5
 80004fc:	486a      	ldr	r0, [pc, #424]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004fe:	f003 ffbf 	bl	8004480 <HAL_RTCEx_BKUPRead>
 8000502:	4603      	mov	r3, r0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b6d      	ldr	r3, [pc, #436]	; (80006bc <read_settings_from_eeprom+0x208>)
 8000508:	701a      	strb	r2, [r3, #0]
	credit = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 800050a:	2106      	movs	r1, #6
 800050c:	4866      	ldr	r0, [pc, #408]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 800050e:	f003 ffb7 	bl	8004480 <HAL_RTCEx_BKUPRead>
 8000512:	4602      	mov	r2, r0
 8000514:	4b6a      	ldr	r3, [pc, #424]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 8000516:	601a      	str	r2, [r3, #0]
	if(credit > 2){
 8000518:	4b69      	ldr	r3, [pc, #420]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d903      	bls.n	8000528 <read_settings_from_eeprom+0x74>
		system_function_start = true;
 8000520:	4b68      	ldr	r3, [pc, #416]	; (80006c4 <read_settings_from_eeprom+0x210>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e002      	b.n	800052e <read_settings_from_eeprom+0x7a>
	}else{
		credit = 0;
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"eeprom read DURATION 1 is %d \r\n",F1_DURATION);
 800052e:	4b5f      	ldr	r3, [pc, #380]	; (80006ac <read_settings_from_eeprom+0x1f8>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4963      	ldr	r1, [pc, #396]	; (80006c8 <read_settings_from_eeprom+0x214>)
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fb88 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe02 	bl	800014c <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	485e      	ldr	r0, [pc, #376]	; (80006cc <read_settings_from_eeprom+0x218>)
 8000554:	f005 f9df 	bl	8005916 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 2 is %d \r\n",F2_DURATION);
 8000558:	4b55      	ldr	r3, [pc, #340]	; (80006b0 <read_settings_from_eeprom+0x1fc>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	495b      	ldr	r1, [pc, #364]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fb73 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fded 	bl	800014c <strlen>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	1d39      	adds	r1, r7, #4
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	4853      	ldr	r0, [pc, #332]	; (80006cc <read_settings_from_eeprom+0x218>)
 800057e:	f005 f9ca 	bl	8005916 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 3 is %d \r\n",F3_DURATION);
 8000582:	4b4c      	ldr	r3, [pc, #304]	; (80006b4 <read_settings_from_eeprom+0x200>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4951      	ldr	r1, [pc, #324]	; (80006d4 <read_settings_from_eeprom+0x220>)
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fb5e 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fdd8 	bl	800014c <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4849      	ldr	r0, [pc, #292]	; (80006cc <read_settings_from_eeprom+0x218>)
 80005a8:	f005 f9b5 	bl	8005916 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 4 is %d \r\n",F4_DURATION);
 80005ac:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <read_settings_from_eeprom+0x204>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4948      	ldr	r1, [pc, #288]	; (80006d8 <read_settings_from_eeprom+0x224>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fb49 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fdc3 	bl	800014c <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	483e      	ldr	r0, [pc, #248]	; (80006cc <read_settings_from_eeprom+0x218>)
 80005d2:	f005 f9a0 	bl	8005916 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 5 is %d \r\n",F5_DURATION);
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <read_settings_from_eeprom+0x208>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	493e      	ldr	r1, [pc, #248]	; (80006dc <read_settings_from_eeprom+0x228>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fb34 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdae 	bl	800014c <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4834      	ldr	r0, [pc, #208]	; (80006cc <read_settings_from_eeprom+0x218>)
 80005fc:	f005 f98b 	bl	8005916 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read CREDIT is %d \r\n",(int)credit);
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4935      	ldr	r1, [pc, #212]	; (80006e0 <read_settings_from_eeprom+0x22c>)
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fb20 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fd9a 	bl	800014c <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <read_settings_from_eeprom+0x218>)
 8000624:	f005 f977 	bl	8005916 <HAL_UART_Transmit>

	if(F1_DURATION == 0 || F2_DURATION == 0 || F3_DURATION == 0 || F4_DURATION == 0 || F5_DURATION == 0){
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <read_settings_from_eeprom+0x1f8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d013      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <read_settings_from_eeprom+0x1fc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00e      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <read_settings_from_eeprom+0x200>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <read_settings_from_eeprom+0x204>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <read_settings_from_eeprom+0x208>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d122      	bne.n	80006a0 <read_settings_from_eeprom+0x1ec>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, default_credit_duration);
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <read_settings_from_eeprom+0x230>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 8000664:	f003 fef2 	bl	800444c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, default_credit_duration);
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <read_settings_from_eeprom+0x230>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	2102      	movs	r1, #2
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 8000672:	f003 feeb 	bl	800444c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, default_credit_duration);
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	2103      	movs	r1, #3
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 8000680:	f003 fee4 	bl	800444c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, default_credit_duration);
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2104      	movs	r1, #4
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 800068e:	f003 fedd 	bl	800444c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, default_credit_duration);
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	2105      	movs	r1, #5
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 800069c:	f003 fed6 	bl	800444c <HAL_RTCEx_BKUPWrite>
	}
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000150 	.word	0x20000150
 80006ac:	20000013 	.word	0x20000013
 80006b0:	20000014 	.word	0x20000014
 80006b4:	20000015 	.word	0x20000015
 80006b8:	20000016 	.word	0x20000016
 80006bc:	20000017 	.word	0x20000017
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	200000f0 	.word	0x200000f0
 80006c8:	0800649c 	.word	0x0800649c
 80006cc:	2000031c 	.word	0x2000031c
 80006d0:	080064bc 	.word	0x080064bc
 80006d4:	080064dc 	.word	0x080064dc
 80006d8:	080064fc 	.word	0x080064fc
 80006dc:	0800651c 	.word	0x0800651c
 80006e0:	0800653c 	.word	0x0800653c
 80006e4:	20000000 	.word	0x20000000

080006e8 <reset_all_output>:
void reset_all_output(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // pin b0 --> out 1
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <reset_all_output+0x4c>)
 80006f2:	f002 fd52 	bl	800319a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // pin b1 --> out 2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2102      	movs	r1, #2
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <reset_all_output+0x4c>)
 80006fc:	f002 fd4d 	bl	800319a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // pin a8 --> out 3
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <reset_all_output+0x50>)
 8000708:	f002 fd47 	bl	800319a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // pin b8 --> out 4
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <reset_all_output+0x4c>)
 8000714:	f002 fd41 	bl	800319a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // pin b9 --> out 5
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <reset_all_output+0x4c>)
 8000720:	f002 fd3b 	bl	800319a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // pin b12 --> out 6
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <reset_all_output+0x4c>)
 800072c:	f002 fd35 	bl	800319a <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010c00 	.word	0x40010c00
 8000738:	40010800 	.word	0x40010800

0800073c <set_output_to>:
void set_output_to(uint8_t pin){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	switch(pin){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	3b03      	subs	r3, #3
 800074a:	2b04      	cmp	r3, #4
 800074c:	d82d      	bhi.n	80007aa <set_output_to+0x6e>
 800074e:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <set_output_to+0x18>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000769 	.word	0x08000769
 8000758:	08000775 	.word	0x08000775
 800075c:	08000781 	.word	0x08000781
 8000760:	0800078f 	.word	0x0800078f
 8000764:	0800079d 	.word	0x0800079d
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // pin b0 --> out 1
 8000768:	2201      	movs	r2, #1
 800076a:	2101      	movs	r1, #1
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <set_output_to+0x80>)
 800076e:	f002 fd14 	bl	800319a <HAL_GPIO_WritePin>
		break;
 8000772:	e01f      	b.n	80007b4 <set_output_to+0x78>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // pin b1 --> out 2
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <set_output_to+0x80>)
 800077a:	f002 fd0e 	bl	800319a <HAL_GPIO_WritePin>
		break;
 800077e:	e019      	b.n	80007b4 <set_output_to+0x78>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // pin a8 --> out 3
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <set_output_to+0x84>)
 8000788:	f002 fd07 	bl	800319a <HAL_GPIO_WritePin>
		break;
 800078c:	e012      	b.n	80007b4 <set_output_to+0x78>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // pin b8 --> out 4
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <set_output_to+0x80>)
 8000796:	f002 fd00 	bl	800319a <HAL_GPIO_WritePin>
		break;
 800079a:	e00b      	b.n	80007b4 <set_output_to+0x78>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // pin b9 --> out 5
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <set_output_to+0x80>)
 80007a4:	f002 fcf9 	bl	800319a <HAL_GPIO_WritePin>
		break;
 80007a8:	e004      	b.n	80007b4 <set_output_to+0x78>
	default:
		reset_all_output();
 80007aa:	f7ff ff9d 	bl	80006e8 <reset_all_output>
		max7219_Turn_On();
 80007ae:	f001 fb7d 	bl	8001eac <max7219_Turn_On>
		break;
 80007b2:	bf00      	nop
	}

}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40010800 	.word	0x40010800

080007c4 <segment_display_int>:

void segment_display_int(int number){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	max7219_Decode_On();
 80007cc:	f001 fb7e 	bl	8001ecc <max7219_Decode_On>
	max7219_Clean ();
 80007d0:	f001 fb1e 	bl	8001e10 <max7219_Clean>
	if(number < 10){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	dc04      	bgt.n	80007e4 <segment_display_int+0x20>
		max7219_PrintItos (DIGIT_1, number );
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fbdd 	bl	8001f9c <max7219_PrintItos>
	}else if(number >= 10 && number < 100){
		max7219_PrintItos (DIGIT_2, number );
	}else{
		max7219_PrintItos (DIGIT_3, number );
	}
}
 80007e2:	e00e      	b.n	8000802 <segment_display_int+0x3e>
	}else if(number >= 10 && number < 100){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b09      	cmp	r3, #9
 80007e8:	dd07      	ble.n	80007fa <segment_display_int+0x36>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b63      	cmp	r3, #99	; 0x63
 80007ee:	dc04      	bgt.n	80007fa <segment_display_int+0x36>
		max7219_PrintItos (DIGIT_2, number );
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	2002      	movs	r0, #2
 80007f4:	f001 fbd2 	bl	8001f9c <max7219_PrintItos>
}
 80007f8:	e003      	b.n	8000802 <segment_display_int+0x3e>
		max7219_PrintItos (DIGIT_3, number );
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2003      	movs	r0, #3
 80007fe:	f001 fbcd 	bl	8001f9c <max7219_PrintItos>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <segment_display_function_settings>:
void segment_display_function_settings(int func_number,int value){
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
	max7219_Decode_On();
 8000814:	f001 fb5a 	bl	8001ecc <max7219_Decode_On>
	max7219_Clean ();
 8000818:	f001 fafa 	bl	8001e10 <max7219_Clean>
	if(value < 10){
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2b09      	cmp	r3, #9
 8000820:	dc04      	bgt.n	800082c <segment_display_function_settings+0x22>
		max7219_PrintItos (DIGIT_1, value );
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2001      	movs	r0, #1
 8000826:	f001 fbb9 	bl	8001f9c <max7219_PrintItos>
 800082a:	e009      	b.n	8000840 <segment_display_function_settings+0x36>
	}else if(value >= 10 && value < 100){
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b09      	cmp	r3, #9
 8000830:	dd06      	ble.n	8000840 <segment_display_function_settings+0x36>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2b63      	cmp	r3, #99	; 0x63
 8000836:	dc03      	bgt.n	8000840 <segment_display_function_settings+0x36>
		max7219_PrintItos (DIGIT_2, value );
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	2002      	movs	r0, #2
 800083c:	f001 fbae 	bl	8001f9c <max7219_PrintItos>
	}
	max7219_PrintDigit(DIGIT_3,func_number,true);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	2003      	movs	r0, #3
 800084a:	f001 fb4f 	bl	8001eec <max7219_PrintDigit>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <segment_display_standby>:
void segment_display_standby(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	max7219_Clean ();
 800085c:	f001 fad8 	bl	8001e10 <max7219_Clean>
	max7219_Decode_On();
 8000860:	f001 fb34 	bl	8001ecc <max7219_Decode_On>
	max7219_Clean ();
 8000864:	f001 fad4 	bl	8001e10 <max7219_Clean>
	if(displayEnable == true){
 8000868:	4b60      	ldr	r3, [pc, #384]	; (80009ec <segment_display_standby+0x194>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 80a8 	beq.w	80009c4 <segment_display_standby+0x16c>
		switch(standby_counter){
 8000874:	4b5e      	ldr	r3, [pc, #376]	; (80009f0 <segment_display_standby+0x198>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b06      	cmp	r3, #6
 800087a:	f200 8081 	bhi.w	8000980 <segment_display_standby+0x128>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <segment_display_standby+0x2c>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	080008a1 	.word	0x080008a1
 8000888:	080008c1 	.word	0x080008c1
 800088c:	080008e1 	.word	0x080008e1
 8000890:	08000901 	.word	0x08000901
 8000894:	08000921 	.word	0x08000921
 8000898:	08000941 	.word	0x08000941
 800089c:	08000961 	.word	0x08000961
		case 0:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80008a0:	2200      	movs	r2, #0
 80008a2:	210a      	movs	r1, #10
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 fb21 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	2002      	movs	r0, #2
 80008b0:	f001 fb1c 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 80008b4:	2200      	movs	r2, #0
 80008b6:	210f      	movs	r1, #15
 80008b8:	2003      	movs	r0, #3
 80008ba:	f001 fb17 	bl	8001eec <max7219_PrintDigit>
			break;
 80008be:	e06f      	b.n	80009a0 <segment_display_standby+0x148>
		case 1:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 80008c0:	2200      	movs	r2, #0
 80008c2:	210f      	movs	r1, #15
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 fb11 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210a      	movs	r1, #10
 80008ce:	2002      	movs	r0, #2
 80008d0:	f001 fb0c 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 80008d4:	2200      	movs	r2, #0
 80008d6:	210f      	movs	r1, #15
 80008d8:	2003      	movs	r0, #3
 80008da:	f001 fb07 	bl	8001eec <max7219_PrintDigit>
			break;
 80008de:	e05f      	b.n	80009a0 <segment_display_standby+0x148>
		case 2:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 80008e0:	2200      	movs	r2, #0
 80008e2:	210f      	movs	r1, #15
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 fb01 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	2002      	movs	r0, #2
 80008f0:	f001 fafc 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 80008f4:	2200      	movs	r2, #0
 80008f6:	210a      	movs	r1, #10
 80008f8:	2003      	movs	r0, #3
 80008fa:	f001 faf7 	bl	8001eec <max7219_PrintDigit>
			break;
 80008fe:	e04f      	b.n	80009a0 <segment_display_standby+0x148>
		case 3:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000900:	2200      	movs	r2, #0
 8000902:	210f      	movs	r1, #15
 8000904:	2001      	movs	r0, #1
 8000906:	f001 faf1 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800090a:	2200      	movs	r2, #0
 800090c:	210a      	movs	r1, #10
 800090e:	2002      	movs	r0, #2
 8000910:	f001 faec 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000914:	2200      	movs	r2, #0
 8000916:	210f      	movs	r1, #15
 8000918:	2003      	movs	r0, #3
 800091a:	f001 fae7 	bl	8001eec <max7219_PrintDigit>
			break;
 800091e:	e03f      	b.n	80009a0 <segment_display_standby+0x148>
		case 4:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000920:	2200      	movs	r2, #0
 8000922:	210a      	movs	r1, #10
 8000924:	2001      	movs	r0, #1
 8000926:	f001 fae1 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	2002      	movs	r0, #2
 8000930:	f001 fadc 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000934:	2200      	movs	r2, #0
 8000936:	210f      	movs	r1, #15
 8000938:	2003      	movs	r0, #3
 800093a:	f001 fad7 	bl	8001eec <max7219_PrintDigit>
			break;
 800093e:	e02f      	b.n	80009a0 <segment_display_standby+0x148>
		case 5:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000940:	2200      	movs	r2, #0
 8000942:	210a      	movs	r1, #10
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fad1 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800094a:	2200      	movs	r2, #0
 800094c:	210a      	movs	r1, #10
 800094e:	2002      	movs	r0, #2
 8000950:	f001 facc 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000954:	2200      	movs	r2, #0
 8000956:	210a      	movs	r1, #10
 8000958:	2003      	movs	r0, #3
 800095a:	f001 fac7 	bl	8001eec <max7219_PrintDigit>
			break;
 800095e:	e01f      	b.n	80009a0 <segment_display_standby+0x148>
		case 6:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000960:	2200      	movs	r2, #0
 8000962:	210a      	movs	r1, #10
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fac1 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800096a:	2200      	movs	r2, #0
 800096c:	210a      	movs	r1, #10
 800096e:	2002      	movs	r0, #2
 8000970:	f001 fabc 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000974:	2200      	movs	r2, #0
 8000976:	210a      	movs	r1, #10
 8000978:	2003      	movs	r0, #3
 800097a:	f001 fab7 	bl	8001eec <max7219_PrintDigit>
			break;
 800097e:	e00f      	b.n	80009a0 <segment_display_standby+0x148>
		default:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000980:	2200      	movs	r2, #0
 8000982:	210a      	movs	r1, #10
 8000984:	2001      	movs	r0, #1
 8000986:	f001 fab1 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800098a:	2200      	movs	r2, #0
 800098c:	210a      	movs	r1, #10
 800098e:	2002      	movs	r0, #2
 8000990:	f001 faac 	bl	8001eec <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000994:	2200      	movs	r2, #0
 8000996:	210a      	movs	r1, #10
 8000998:	2003      	movs	r0, #3
 800099a:	f001 faa7 	bl	8001eec <max7219_PrintDigit>
			break;
 800099e:	bf00      	nop
		}
		if(standby_counter >= 6){
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <segment_display_standby+0x198>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d903      	bls.n	80009b0 <segment_display_standby+0x158>
			standby_counter = 0;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <segment_display_standby+0x198>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e005      	b.n	80009bc <segment_display_standby+0x164>
		}else{
			standby_counter += 1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <segment_display_standby+0x198>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <segment_display_standby+0x198>)
 80009ba:	701a      	strb	r2, [r3, #0]
		}
		//		max7219_PrintDigit(DIGIT_1,MINUS,false);
		//		max7219_PrintDigit(DIGIT_2,MINUS,false);
		//		max7219_PrintDigit(DIGIT_3,MINUS,false);
		displayEnable = false;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <segment_display_standby+0x194>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		max7219_PrintDigit(DIGIT_2,BLANK,false);
		max7219_PrintDigit(DIGIT_3,BLANK,false);
		displayEnable = true;
	}

}
 80009c2:	e011      	b.n	80009e8 <segment_display_standby+0x190>
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 80009c4:	2200      	movs	r2, #0
 80009c6:	210f      	movs	r1, #15
 80009c8:	2001      	movs	r0, #1
 80009ca:	f001 fa8f 	bl	8001eec <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	2002      	movs	r0, #2
 80009d4:	f001 fa8a 	bl	8001eec <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 80009d8:	2200      	movs	r2, #0
 80009da:	210f      	movs	r1, #15
 80009dc:	2003      	movs	r0, #3
 80009de:	f001 fa85 	bl	8001eec <max7219_PrintDigit>
		displayEnable = true;
 80009e2:	4b02      	ldr	r3, [pc, #8]	; (80009ec <segment_display_standby+0x194>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	200000fc 	.word	0x200000fc

080009f4 <iot_send_inserted_credit>:
	max7219_PrintDigit(DIGIT_1,BLANK,false);
	max7219_PrintDigit(DIGIT_2,BLANK,false);
	max7219_PrintDigit(DIGIT_3,BLANK,false);
}

void iot_send_inserted_credit(uint16_t inst_credit){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cINST_%d_%d%c\r\n",0x02,(unsigned int)credit,(unsigned int)inst_credit,0x03);
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <iot_send_inserted_credit+0x64>)
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	f107 000c 	add.w	r0, r7, #12
 8000a08:	2203      	movs	r2, #3
 8000a0a:	9201      	str	r2, [sp, #4]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	4912      	ldr	r1, [pc, #72]	; (8000a5c <iot_send_inserted_credit+0x68>)
 8000a14:	f005 f91c 	bl	8005c50 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fb95 	bl	800014c <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f107 010c 	add.w	r1, r7, #12
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <iot_send_inserted_credit+0x6c>)
 8000a30:	f004 ff71 	bl	8005916 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fb87 	bl	800014c <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f107 010c 	add.w	r1, r7, #12
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <iot_send_inserted_credit+0x70>)
 8000a4c:	f004 ff63 	bl	8005916 <HAL_UART_Transmit>
	}
}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	08006558 	.word	0x08006558
 8000a60:	2000031c 	.word	0x2000031c
 8000a64:	200002dc 	.word	0x200002dc

08000a68 <iot_send_mode>:
void iot_send_mode(uint8_t mode){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	; 0x38
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cMODE_%d_%d%c\r\n",0x02,(unsigned int)credit,(unsigned int)mode,0x03);
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <iot_send_mode+0x64>)
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f107 000c 	add.w	r0, r7, #12
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	460b      	mov	r3, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	4912      	ldr	r1, [pc, #72]	; (8000ad0 <iot_send_mode+0x68>)
 8000a88:	f005 f8e2 	bl	8005c50 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fb5b 	bl	800014c <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 010c 	add.w	r1, r7, #12
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <iot_send_mode+0x6c>)
 8000aa4:	f004 ff37 	bl	8005916 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fb4d 	bl	800014c <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	f107 010c 	add.w	r1, r7, #12
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <iot_send_mode+0x70>)
 8000ac0:	f004 ff29 	bl	8005916 <HAL_UART_Transmit>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000e4 	.word	0x200000e4
 8000ad0:	0800656c 	.word	0x0800656c
 8000ad4:	2000031c 	.word	0x2000031c
 8000ad8:	200002dc 	.word	0x200002dc

08000adc <iot_send_status>:
void iot_send_status(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af02      	add	r7, sp, #8
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cSTAT_%d%c\r\n",0x02,(unsigned int)credit,0x03);
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <iot_send_status+0x54>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	1d38      	adds	r0, r7, #4
 8000ae8:	2303      	movs	r3, #3
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4613      	mov	r3, r2
 8000aee:	2202      	movs	r2, #2
 8000af0:	4910      	ldr	r1, [pc, #64]	; (8000b34 <iot_send_status+0x58>)
 8000af2:	f005 f8ad 	bl	8005c50 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fb27 	bl	800014c <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	1d39      	adds	r1, r7, #4
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <iot_send_status+0x5c>)
 8000b0a:	f004 ff04 	bl	8005916 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	1d39      	adds	r1, r7, #4
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <iot_send_status+0x60>)
 8000b22:	f004 fef8 	bl	8005916 <HAL_UART_Transmit>
	}
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000e4 	.word	0x200000e4
 8000b34:	08006580 	.word	0x08006580
 8000b38:	2000031c 	.word	0x2000031c
 8000b3c:	200002dc 	.word	0x200002dc

08000b40 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b098      	sub	sp, #96	; 0x60
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { /// tick every 1s
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4aa7      	ldr	r2, [pc, #668]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	f040 80bc 	bne.w	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
		max7219_Turn_On();
 8000b54:	f001 f9aa 	bl	8001eac <max7219_Turn_On>
		//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, 2);
		//		char tmp[25];
		//		uint8_t mapped_value = calculate_adc(adcBuffer[0]);
		if(clearButton == true){
 8000b58:	4ba5      	ldr	r3, [pc, #660]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d044      	beq.n	8000bea <HAL_TIM_PeriodElapsedCallback+0xaa>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	48a4      	ldr	r0, [pc, #656]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b64:	f002 fb02 	bl	800316c <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d112      	bne.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_UART_Transmit(&huart1, "---> CLEAR BTN >>PRESS<< !!!\r\n", 30, HAL_MAX_DELAY);
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	221e      	movs	r2, #30
 8000b74:	49a0      	ldr	r1, [pc, #640]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b76:	48a1      	ldr	r0, [pc, #644]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b78:	f004 fecd 	bl	8005916 <HAL_UART_Transmit>
				selected_button = 0;
 8000b7c:	4ba0      	ldr	r3, [pc, #640]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000b82:	f7ff fdb1 	bl	80006e8 <reset_all_output>
				clearButtonCounter += 1;
 8000b86:	4b9f      	ldr	r3, [pc, #636]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b9d      	ldr	r3, [pc, #628]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e008      	b.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x66>
			}else{
				clearButton = false;
 8000b94:	4b96      	ldr	r3, [pc, #600]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000b9a:	4b9a      	ldr	r3, [pc, #616]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000ba0:	4899      	ldr	r0, [pc, #612]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ba2:	f003 ff91 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
			}
			if(clearButtonCounter > 5){
 8000ba6:	4b97      	ldr	r3, [pc, #604]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b05      	cmp	r3, #5
 8000bac:	d91d      	bls.n	8000bea <HAL_TIM_PeriodElapsedCallback+0xaa>
				HAL_UART_Transmit(&huart1, "---> CLEAR CREDITS !!!\r\n", 24, HAL_MAX_DELAY);
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	2218      	movs	r2, #24
 8000bb4:	4995      	ldr	r1, [pc, #596]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000bb6:	4891      	ldr	r0, [pc, #580]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bb8:	f004 fead 	bl	8005916 <HAL_UART_Transmit>
				clearButton = false;
 8000bbc:	4b8c      	ldr	r3, [pc, #560]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000bc2:	4b90      	ldr	r3, [pc, #576]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
				credit = 0;
 8000bc8:	4b91      	ldr	r3, [pc, #580]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
				system_function_start = false;
 8000bce:	4b91      	ldr	r3, [pc, #580]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
				selected_button = 0;
 8000bd4:	4b8a      	ldr	r3, [pc, #552]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000bda:	f7ff fd85 	bl	80006e8 <reset_all_output>
				clearButtonCounter = 0;
 8000bde:	4b89      	ldr	r3, [pc, #548]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000be4:	4888      	ldr	r0, [pc, #544]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000be6:	f003 ff6f 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (selected_menu > 0) {
 8000bea:	4b8b      	ldr	r3, [pc, #556]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d05c      	beq.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16e>
			HAL_TIM_Base_Stop_IT(&htim2); //stop main program
 8000bf4:	4889      	ldr	r0, [pc, #548]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000bf6:	f003 ff67 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
			switch (selected_menu) {
 8000bfa:	4b87      	ldr	r3, [pc, #540]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3b01      	subs	r3, #1
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d862      	bhi.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000c06:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0c:	08000c21 	.word	0x08000c21
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	08000c51 	.word	0x08000c51
 8000c18:	08000c73 	.word	0x08000c73
 8000c1c:	08000c95 	.word	0x08000c95
			case 1:
				//				max7219_PrintDigit(DIGIT_3,16,true);
				segment_display_function_settings(selected_menu,F1_DURATION);
 8000c20:	4b7d      	ldr	r3, [pc, #500]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b7d      	ldr	r3, [pc, #500]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4610      	mov	r0, r2
 8000c32:	f7ff fdea 	bl	800080a <segment_display_function_settings>
				//				max7219_PrintDigit(DIGIT_2,NUM_1,false);
				//				memset(tmp, 0, sizeof tmp);
				//				sprintf(tmp, "F1 VALUE : %d \r\n", (unsigned int) mapped_value);
				//				HAL_UART_Transmit(&huart1, tmp, strlen(tmp), HAL_MAX_DELAY);
				//				F1_DURATION = mapped_value;
				break;
 8000c36:	e049      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 2:
				segment_display_function_settings(selected_menu,F2_DURATION);
 8000c38:	4b77      	ldr	r3, [pc, #476]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	4610      	mov	r0, r2
 8000c4a:	f7ff fdde 	bl	800080a <segment_display_function_settings>
				break;
 8000c4e:	e03d      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 3:
				max7219_PrintDigit(DIGIT_3,18,true);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2112      	movs	r1, #18
 8000c54:	2003      	movs	r0, #3
 8000c56:	f001 f949 	bl	8001eec <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F3_DURATION);
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b71      	ldr	r3, [pc, #452]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f7ff fdcd 	bl	800080a <segment_display_function_settings>
				break;
 8000c70:	e02c      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 4:
				max7219_PrintDigit(DIGIT_3,19,true);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2113      	movs	r1, #19
 8000c76:	2003      	movs	r0, #3
 8000c78:	f001 f938 	bl	8001eec <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F4_DURATION);
 8000c7c:	4b66      	ldr	r3, [pc, #408]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b69      	ldr	r3, [pc, #420]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	f7ff fdbc 	bl	800080a <segment_display_function_settings>
				break;
 8000c92:	e01b      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 5:
				segment_display_function_settings(selected_menu,F5_DURATION);
 8000c94:	4b60      	ldr	r3, [pc, #384]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	f7ff fdb0 	bl	800080a <segment_display_function_settings>
				break;
 8000caa:	bf00      	nop
 8000cac:	e00e      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
			}
		} else {
			max7219_Decode_On();
 8000cae:	f001 f90d 	bl	8001ecc <max7219_Decode_On>
			HAL_TIM_Base_Start_IT(&htim2);
 8000cb2:	485a      	ldr	r0, [pc, #360]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cb4:	f003 feb6 	bl	8004a24 <HAL_TIM_Base_Start_IT>
			if(clearButton == false){
 8000cb8:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x18c>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000cc6:	4850      	ldr	r0, [pc, #320]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000cc8:	f003 fefe 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if (htim->Instance == TIM2) { /// tick every 1ms
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd4:	f040 80d4 	bne.w	8000e80 <HAL_TIM_PeriodElapsedCallback+0x340>
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
		char credit_tmp_msg[55];
		if(last_credit_insert > 0){
 8000cd8:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d01e      	beq.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x1de>
			sprintf(credit_tmp_msg,"last credit inserted: %d \r\n",(unsigned int)last_credit_insert);
 8000ce0:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 ffaf 	bl	8005c50 <siprintf>
			iot_send_inserted_credit(last_credit_insert);
 8000cf2:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe7c 	bl	80009f4 <iot_send_inserted_credit>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa23 	bl	800014c <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f107 010c 	add.w	r1, r7, #12
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	483a      	ldr	r0, [pc, #232]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d14:	f004 fdff 	bl	8005916 <HAL_UART_Transmit>
			last_credit_insert = 0;
 8000d18:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
		}
		if(last_credit_insert_bank > 0){
 8000d1e:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01e      	beq.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x224>
			sprintf(credit_tmp_msg,"last bank credit inserted: %d \r\n",(unsigned int)last_credit_insert_bank);
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4943      	ldr	r1, [pc, #268]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 ff8c 	bl	8005c50 <siprintf>
			iot_send_inserted_credit(last_credit_insert_bank);
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe59 	bl	80009f4 <iot_send_inserted_credit>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa00 	bl	800014c <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f107 010c 	add.w	r1, r7, #12
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	4828      	ldr	r0, [pc, #160]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d5a:	f004 fddc 	bl	8005916 <HAL_UART_Transmit>
			last_credit_insert_bank = 0;
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	801a      	strh	r2, [r3, #0]
		}
		if(tim2_round_counter >= 10){
 8000d64:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	d91c      	bls.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x266>
			HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	220d      	movs	r2, #13
 8000d72:	4935      	ldr	r1, [pc, #212]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000d74:	4821      	ldr	r0, [pc, #132]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d76:	f004 fdce 	bl	8005916 <HAL_UART_Transmit>
			logic_runner();
 8000d7a:	f000 fd9f 	bl	80018bc <logic_runner>
			tim2_round_counter = 0;
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
			if(iot_round_counter > 30){
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b1e      	cmp	r3, #30
 8000d8a:	d905      	bls.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x258>
				iot_send_status();
 8000d8c:	f7ff fea6 	bl	8000adc <iot_send_status>
				iot_round_counter = 0;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e073      	b.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x340>
			}else{
				iot_round_counter += 1;
 8000d98:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e06c      	b.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x340>
			}
		}else{
			if((tim2_round_counter%3) == 0){
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000dac:	fba3 1302 	umull	r1, r3, r3, r2
 8000db0:	0859      	lsrs	r1, r3, #1
 8000db2:	460b      	mov	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	440b      	add	r3, r1
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d14d      	bne.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x31c>
				if (selected_button != 0) {
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d046      	beq.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x318>
					if(displayToggle){
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d005      	beq.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
						max7219_Turn_On();
 8000dd4:	f001 f86a 	bl	8001eac <max7219_Turn_On>
						displayToggle = false;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e03d      	b.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x31c>
					}else{
						max7219_Turn_Off();
 8000de0:	f001 f86c 	bl	8001ebc <max7219_Turn_Off>
						displayToggle = true;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e037      	b.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x31c>
 8000dec:	40000800 	.word	0x40000800
 8000df0:	200000fd 	.word	0x200000fd
 8000df4:	40010800 	.word	0x40010800
 8000df8:	08006590 	.word	0x08006590
 8000dfc:	2000031c 	.word	0x2000031c
 8000e00:	200000e8 	.word	0x200000e8
 8000e04:	200000fe 	.word	0x200000fe
 8000e08:	200001bc 	.word	0x200001bc
 8000e0c:	080065b0 	.word	0x080065b0
 8000e10:	200000e4 	.word	0x200000e4
 8000e14:	200000f0 	.word	0x200000f0
 8000e18:	200000e1 	.word	0x200000e1
 8000e1c:	20000294 	.word	0x20000294
 8000e20:	20000013 	.word	0x20000013
 8000e24:	20000014 	.word	0x20000014
 8000e28:	20000015 	.word	0x20000015
 8000e2c:	20000016 	.word	0x20000016
 8000e30:	20000017 	.word	0x20000017
 8000e34:	200000f8 	.word	0x200000f8
 8000e38:	080065cc 	.word	0x080065cc
 8000e3c:	200000fa 	.word	0x200000fa
 8000e40:	080065e8 	.word	0x080065e8
 8000e44:	200000ff 	.word	0x200000ff
 8000e48:	0800660c 	.word	0x0800660c
 8000e4c:	20000100 	.word	0x20000100
 8000e50:	aaaaaaab 	.word	0xaaaaaaab
 8000e54:	2000000d 	.word	0x2000000d
					}
				}else{
					max7219_Turn_On();
 8000e58:	f001 f828 	bl	8001eac <max7219_Turn_On>
				}
			}
			if(credit <= 0){
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x334>
				if((tim2_round_counter&2) == 0){
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x334>
					segment_display_standby();
 8000e70:	f7ff fcf2 	bl	8000858 <segment_display_standby>
				}
			}

			tim2_round_counter += 1;
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000e7e:	701a      	strb	r2, [r3, #0]

		}
	}
	if (htim->Instance == TIM1) { /// tick every 1000ms
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d136      	bne.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		stop_and_clear_tim1();
 8000e8a:	f000 fde7 	bl	8001a5c <stop_and_clear_tim1>
		//		enable_all_exti_it();
		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM SW DEBOUNCE TICK!\r\n", 23, HAL_MAX_DELAY);
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	2217      	movs	r2, #23
 8000e94:	491d      	ldr	r1, [pc, #116]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000e96:	481e      	ldr	r0, [pc, #120]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000e98:	f004 fd3d 	bl	8005916 <HAL_UART_Transmit>
		char tmp[25];
		sprintf(tmp, "selected mode %d \r\n", (unsigned int) selected_button);
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea8:	491b      	ldr	r1, [pc, #108]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 fed0 	bl	8005c50 <siprintf>
		reset_all_output();
 8000eb0:	f7ff fc1a 	bl	80006e8 <reset_all_output>
		set_output_to(selected_button);
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc3e 	bl	800073c <set_output_to>
		iot_send_mode(selected_button);
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fdce 	bl	8000a68 <iot_send_mode>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp, strlen(tmp), HAL_MAX_DELAY);
 8000ecc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f93b 	bl	800014c <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000ee4:	f004 fd17 	bl	8005916 <HAL_UART_Transmit>
		if(selected_menu <= 0){
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
			HAL_TIM_Base_Start_IT(&htim2);
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8000ef4:	f003 fd96 	bl	8004a24 <HAL_TIM_Base_Start_IT>
		}

	}
}
 8000ef8:	bf00      	nop
 8000efa:	3760      	adds	r7, #96	; 0x60
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000e4 	.word	0x200000e4
 8000f04:	200000ff 	.word	0x200000ff
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	0800661c 	.word	0x0800661c
 8000f10:	2000031c 	.word	0x2000031c
 8000f14:	200000e8 	.word	0x200000e8
 8000f18:	08006634 	.word	0x08006634
 8000f1c:	200000e1 	.word	0x200000e1
 8000f20:	20000294 	.word	0x20000294

08000f24 <disable_all_exti_it>:
void disable_all_exti_it(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000f28:	2008      	movs	r0, #8
 8000f2a:	f001 ff9c 	bl	8002e66 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f2e:	2009      	movs	r0, #9
 8000f30:	f001 ff99 	bl	8002e66 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000f34:	200a      	movs	r0, #10
 8000f36:	f001 ff96 	bl	8002e66 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000f3a:	2017      	movs	r0, #23
 8000f3c:	f001 ff93 	bl	8002e66 <HAL_NVIC_DisableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <enable_all_exti_it>:
void enable_all_exti_it(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000f48:	2008      	movs	r0, #8
 8000f4a:	f001 ffa6 	bl	8002e9a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000f4e:	2009      	movs	r0, #9
 8000f50:	f001 ffa3 	bl	8002e9a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f001 ffa0 	bl	8002e9a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000f5a:	2017      	movs	r0, #23
 8000f5c:	f001 ff9d 	bl	8002e9a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f60:	2008      	movs	r0, #8
 8000f62:	f001 ff72 	bl	8002e4a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f66:	2009      	movs	r0, #9
 8000f68:	f001 ff6f 	bl	8002e4a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f001 ff6c 	bl	8002e4a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f72:	2017      	movs	r0, #23
 8000f74:	f001 ff69 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b0b0      	sub	sp, #192	; 0xc0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
	disable_all_exti_it();
 8000f86:	f7ff ffcd 	bl	8000f24 <disable_all_exti_it>
	char message_sw2[] = "Switch [2] pressed!\r\n";
 8000f8a:	4bc0      	ldr	r3, [pc, #768]	; (800128c <HAL_GPIO_EXTI_Callback+0x310>)
 8000f8c:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000f90:	461d      	mov	r5, r3
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f9a:	6020      	str	r0, [r4, #0]
 8000f9c:	3404      	adds	r4, #4
 8000f9e:	8021      	strh	r1, [r4, #0]
	char message_sw3[] = "FRONT SW [1] pressed!\r\n";
 8000fa0:	4bbb      	ldr	r3, [pc, #748]	; (8001290 <HAL_GPIO_EXTI_Callback+0x314>)
 8000fa2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb0:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw4[] = "FRONT SW [2] pressed!\r\n";
 8000fb4:	4bb7      	ldr	r3, [pc, #732]	; (8001294 <HAL_GPIO_EXTI_Callback+0x318>)
 8000fb6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000fba:	461d      	mov	r5, r3
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fc4:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw5[] = "FRONT SW [3] pressed!\r\n";
 8000fc8:	4bb3      	ldr	r3, [pc, #716]	; (8001298 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000fca:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000fce:	461d      	mov	r5, r3
 8000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fd8:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw6[] = "FRONT SW [4] pressed!\r\n";
 8000fdc:	4baf      	ldr	r3, [pc, #700]	; (800129c <HAL_GPIO_EXTI_Callback+0x320>)
 8000fde:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fec:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw7[] = "FRONT SW [5] pressed!\r\n";
 8000ff0:	4bab      	ldr	r3, [pc, #684]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x324>)
 8000ff2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001000:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t tickstart = HAL_GetTick();
 8001004:	f001 fdaa 	bl	8002b5c <HAL_GetTick>
 8001008:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	char tick_msg[35];
	sprintf(tick_msg,"---- sysTick : %d\r\n",tickstart);
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001014:	49a3      	ldr	r1, [pc, #652]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x328>)
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fe1a 	bl	8005c50 <siprintf>
	if( (tickstart - lastTimePress)<=50){
 800101c:	4ba2      	ldr	r3, [pc, #648]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b32      	cmp	r3, #50	; 0x32
 8001028:	d809      	bhi.n	800103e <HAL_GPIO_EXTI_Callback+0xc2>
		HAL_UART_Transmit(&huart1,"too many times press !!!!\r\n", 27,HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	221b      	movs	r2, #27
 8001030:	499e      	ldr	r1, [pc, #632]	; (80012ac <HAL_GPIO_EXTI_Callback+0x330>)
 8001032:	489f      	ldr	r0, [pc, #636]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 8001034:	f004 fc6f 	bl	8005916 <HAL_UART_Transmit>
		enable_all_exti_it();
 8001038:	f7ff ff84 	bl	8000f44 <enable_all_exti_it>
 800103c:	e18a      	b.n	8001354 <HAL_GPIO_EXTI_Callback+0x3d8>
		return;
	}else{
		lastTimePress = tickstart;
 800103e:	4a9a      	ldr	r2, [pc, #616]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001040:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001044:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)tick_msg, strlen(tick_msg),
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f87e 	bl	800014c <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	4894      	ldr	r0, [pc, #592]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 800105e:	f004 fc5a 	bl	8005916 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	if (GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d131      	bne.n	80010cc <HAL_GPIO_EXTI_Callback+0x150>
 8001068:	2104      	movs	r1, #4
 800106a:	4892      	ldr	r0, [pc, #584]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 800106c:	f002 f87e 	bl	800316c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d12a      	bne.n	80010cc <HAL_GPIO_EXTI_Callback+0x150>
		enable_all_exti_it();
 8001076:	f7ff ff65 	bl	8000f44 <enable_all_exti_it>
		HAL_TIM_Base_Stop_IT(&htim2);
 800107a:	488f      	ldr	r0, [pc, #572]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x33c>)
 800107c:	f003 fd24 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_sw2, strlen(message_sw2),
 8001080:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f861 	bl	800014c <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	4886      	ldr	r0, [pc, #536]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 8001098:	f004 fc3d 	bl	8005916 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		selected_menu += 1;
 800109c:	4b87      	ldr	r3, [pc, #540]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b85      	ldr	r3, [pc, #532]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 80010a8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 80010aa:	4885      	ldr	r0, [pc, #532]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x344>)
 80010ac:	f003 fcba 	bl	8004a24 <HAL_TIM_Base_Start_IT>
		if (selected_menu > 5) {
 80010b0:	4b82      	ldr	r3, [pc, #520]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d908      	bls.n	80010cc <HAL_GPIO_EXTI_Callback+0x150>
			selected_menu = 0;
 80010ba:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 80010c0:	487f      	ldr	r0, [pc, #508]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x344>)
 80010c2:	f003 fd01 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80010c6:	487c      	ldr	r0, [pc, #496]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x33c>)
 80010c8:	f003 fcac 	bl	8004a24 <HAL_TIM_Base_Start_IT>
		}
	}
	if(selected_menu > 0){
 80010cc:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01c      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0x194>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80010d6:	2108      	movs	r1, #8
 80010d8:	4876      	ldr	r0, [pc, #472]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 80010da:	f002 f847 	bl	800316c <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d106      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0x176>
			set_add_duration_of_function(selected_menu);
 80010e4:	4b75      	ldr	r3, [pc, #468]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f98e 	bl	800140c <set_add_duration_of_function>
 80010f0:	e12b      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 80010f2:	2110      	movs	r1, #16
 80010f4:	486f      	ldr	r0, [pc, #444]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 80010f6:	f002 f839 	bl	800316c <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	f040 8124 	bne.w	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
			set_substract_duration_of_function(selected_menu);
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <HAL_GPIO_EXTI_Callback+0x340>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa15 	bl	8001538 <set_substract_duration_of_function>
 800110e:	e11c      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
		}
	}
	else if (system_function_start) {
 8001110:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x348>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8117 	beq.w	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
		HAL_TIM_Base_Stop_IT(&htim2);
 800111c:	4866      	ldr	r0, [pc, #408]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x33c>)
 800111e:	f003 fcd3 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 8001122:	4869      	ldr	r0, [pc, #420]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 8001124:	f003 fcd0 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001128:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x34c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001130:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
		displayToggle = true;
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <HAL_GPIO_EXTI_Callback+0x350>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
		max7219_Turn_On();
 800113e:	f000 feb5 	bl	8001eac <max7219_Turn_On>
		switch (GPIO_Pin) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b20      	cmp	r3, #32
 8001146:	d05a      	beq.n	80011fe <HAL_GPIO_EXTI_Callback+0x282>
 8001148:	2b20      	cmp	r3, #32
 800114a:	dc04      	bgt.n	8001156 <HAL_GPIO_EXTI_Callback+0x1da>
 800114c:	2b08      	cmp	r3, #8
 800114e:	d008      	beq.n	8001162 <HAL_GPIO_EXTI_Callback+0x1e6>
 8001150:	2b10      	cmp	r3, #16
 8001152:	d02d      	beq.n	80011b0 <HAL_GPIO_EXTI_Callback+0x234>
 8001154:	e0f9      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
 8001156:	2b40      	cmp	r3, #64	; 0x40
 8001158:	d078      	beq.n	800124c <HAL_GPIO_EXTI_Callback+0x2d0>
 800115a:	2b80      	cmp	r3, #128	; 0x80
 800115c:	f000 80c0 	beq.w	80012e0 <HAL_GPIO_EXTI_Callback+0x364>
 8001160:	e0f3      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
		case GPIO_PIN_3:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 8001162:	2108      	movs	r1, #8
 8001164:	4853      	ldr	r0, [pc, #332]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 8001166:	f002 f801 	bl	800316c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	f040 80e3 	bne.w	8001338 <HAL_GPIO_EXTI_Callback+0x3bc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw3, strlen(message_sw3),
 8001172:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001176:	4618      	mov	r0, r3
 8001178:	f7fe ffe8 	bl	800014c <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4849      	ldr	r0, [pc, #292]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 800118a:	f004 fbc4 	bl	8005916 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 3) {
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d105      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x228>
					selected_button = 0;
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 800119e:	f7ff faa3 	bl	80006e8 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 3;
				}
			}
			break;
 80011a2:	e0c9      	b.n	8001338 <HAL_GPIO_EXTI_Callback+0x3bc>
					reset_all_output();
 80011a4:	f7ff faa0 	bl	80006e8 <reset_all_output>
					selected_button = 3;
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	701a      	strb	r2, [r3, #0]
			break;
 80011ae:	e0c3      	b.n	8001338 <HAL_GPIO_EXTI_Callback+0x3bc>
		case GPIO_PIN_4:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 80011b0:	2110      	movs	r1, #16
 80011b2:	4840      	ldr	r0, [pc, #256]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 80011b4:	f001 ffda 	bl	800316c <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	f040 80be 	bne.w	800133c <HAL_GPIO_EXTI_Callback+0x3c0>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw4, strlen(message_sw3),
 80011c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7fe ffc1 	bl	800014c <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	4836      	ldr	r0, [pc, #216]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 80011d8:	f004 fb9d 	bl	8005916 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 4) {
 80011dc:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d105      	bne.n	80011f2 <HAL_GPIO_EXTI_Callback+0x276>
					selected_button = 0;
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 80011ec:	f7ff fa7c 	bl	80006e8 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 4;
				}
			}
			break;
 80011f0:	e0a4      	b.n	800133c <HAL_GPIO_EXTI_Callback+0x3c0>
					reset_all_output();
 80011f2:	f7ff fa79 	bl	80006e8 <reset_all_output>
					selected_button = 4;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	701a      	strb	r2, [r3, #0]
			break;
 80011fc:	e09e      	b.n	800133c <HAL_GPIO_EXTI_Callback+0x3c0>
		case GPIO_PIN_5:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 80011fe:	2120      	movs	r1, #32
 8001200:	482c      	ldr	r0, [pc, #176]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 8001202:	f001 ffb3 	bl	800316c <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b01      	cmp	r3, #1
 800120a:	f040 8099 	bne.w	8001340 <HAL_GPIO_EXTI_Callback+0x3c4>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw5, strlen(message_sw3),
 800120e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe ff9a 	bl	800014c <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 8001226:	f004 fb76 	bl	8005916 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 5) {
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b05      	cmp	r3, #5
 8001232:	d105      	bne.n	8001240 <HAL_GPIO_EXTI_Callback+0x2c4>
					selected_button = 0;
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 800123a:	f7ff fa55 	bl	80006e8 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 5;
				}
			}
			break;
 800123e:	e07f      	b.n	8001340 <HAL_GPIO_EXTI_Callback+0x3c4>
					reset_all_output();
 8001240:	f7ff fa52 	bl	80006e8 <reset_all_output>
					selected_button = 5;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 8001246:	2205      	movs	r2, #5
 8001248:	701a      	strb	r2, [r3, #0]
			break;
 800124a:	e079      	b.n	8001340 <HAL_GPIO_EXTI_Callback+0x3c4>
		case GPIO_PIN_6:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x338>)
 8001250:	f001 ff8c 	bl	800316c <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d174      	bne.n	8001344 <HAL_GPIO_EXTI_Callback+0x3c8>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw6, strlen(message_sw3),
 800125a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ff74 	bl	800014c <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	480f      	ldr	r0, [pc, #60]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x334>)
 8001272:	f004 fb50 	bl	8005916 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 6) {
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b06      	cmp	r3, #6
 800127e:	d129      	bne.n	80012d4 <HAL_GPIO_EXTI_Callback+0x358>
					reset_all_output();
 8001280:	f7ff fa32 	bl	80006e8 <reset_all_output>
					selected_button = 0;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x354>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
				} else {
					reset_all_output();
					selected_button = 6;
				}
			}
			break;
 800128a:	e05b      	b.n	8001344 <HAL_GPIO_EXTI_Callback+0x3c8>
 800128c:	08006678 	.word	0x08006678
 8001290:	08006690 	.word	0x08006690
 8001294:	080066a8 	.word	0x080066a8
 8001298:	080066c0 	.word	0x080066c0
 800129c:	080066d8 	.word	0x080066d8
 80012a0:	080066f0 	.word	0x080066f0
 80012a4:	08006648 	.word	0x08006648
 80012a8:	200000f4 	.word	0x200000f4
 80012ac:	0800665c 	.word	0x0800665c
 80012b0:	2000031c 	.word	0x2000031c
 80012b4:	40010800 	.word	0x40010800
 80012b8:	20000294 	.word	0x20000294
 80012bc:	200000e1 	.word	0x200000e1
 80012c0:	200001bc 	.word	0x200001bc
 80012c4:	200000f0 	.word	0x200000f0
 80012c8:	2000024c 	.word	0x2000024c
 80012cc:	2000000d 	.word	0x2000000d
 80012d0:	200000e8 	.word	0x200000e8
					reset_all_output();
 80012d4:	f7ff fa08 	bl	80006e8 <reset_all_output>
					selected_button = 6;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_GPIO_EXTI_Callback+0x3e0>)
 80012da:	2206      	movs	r2, #6
 80012dc:	701a      	strb	r2, [r3, #0]
			break;
 80012de:	e031      	b.n	8001344 <HAL_GPIO_EXTI_Callback+0x3c8>
		case GPIO_PIN_7:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) {
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	481f      	ldr	r0, [pc, #124]	; (8001360 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80012e4:	f001 ff42 	bl	800316c <HAL_GPIO_ReadPin>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d12c      	bne.n	8001348 <HAL_GPIO_EXTI_Callback+0x3cc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw7, strlen(message_sw3),
 80012ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff2a 	bl	800014c <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001306:	f004 fb06 	bl	8005916 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 7) {
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_GPIO_EXTI_Callback+0x3e0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b07      	cmp	r3, #7
 8001312:	d10b      	bne.n	800132c <HAL_GPIO_EXTI_Callback+0x3b0>
					selected_button = 0;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 800131a:	f7ff f9e5 	bl	80006e8 <reset_all_output>
					clearButton = true;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim4);
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_GPIO_EXTI_Callback+0x3f0>)
 8001326:	f003 fb7d 	bl	8004a24 <HAL_TIM_Base_Start_IT>
				} else {
					reset_all_output();
					selected_button = 7;
				}
			}
			break;
 800132a:	e00d      	b.n	8001348 <HAL_GPIO_EXTI_Callback+0x3cc>
					reset_all_output();
 800132c:	f7ff f9dc 	bl	80006e8 <reset_all_output>
					selected_button = 7;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001332:	2207      	movs	r2, #7
 8001334:	701a      	strb	r2, [r3, #0]
			break;
 8001336:	e007      	b.n	8001348 <HAL_GPIO_EXTI_Callback+0x3cc>
			break;
 8001338:	bf00      	nop
 800133a:	e006      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 800133c:	bf00      	nop
 800133e:	e004      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001340:	bf00      	nop
 8001342:	e002      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001344:	bf00      	nop
 8001346:	e000      	b.n	800134a <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001348:	bf00      	nop
	}
	//	uint32_t i = 100000;
	//	while (i-- > 0) {
	//		asm("nop");
	//	}
	enable_all_exti_it();
 800134a:	f7ff fdfb 	bl	8000f44 <enable_all_exti_it>
	HAL_TIM_Base_Start_IT(&htim1);
 800134e:	4808      	ldr	r0, [pc, #32]	; (8001370 <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001350:	f003 fb68 	bl	8004a24 <HAL_TIM_Base_Start_IT>
}
 8001354:	37c0      	adds	r7, #192	; 0xc0
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	200000e8 	.word	0x200000e8
 8001360:	40010800 	.word	0x40010800
 8001364:	2000031c 	.word	0x2000031c
 8001368:	200000fd 	.word	0x200000fd
 800136c:	200001bc 	.word	0x200001bc
 8001370:	2000024c 	.word	0x2000024c

08001374 <eeprom_write>:
void eeprom_write(uint8_t addr, uint8_t data){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
	 *   0x05   |  F5_DURATION
	 *
	 *	 0x06   |  credit
	 *
	 * */
	switch(addr){
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3b01      	subs	r3, #1
 8001388:	2b05      	cmp	r3, #5
 800138a:	d839      	bhi.n	8001400 <eeprom_write+0x8c>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <eeprom_write+0x20>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013bb 	.word	0x080013bb
 800139c:	080013c9 	.word	0x080013c9
 80013a0:	080013d7 	.word	0x080013d7
 80013a4:	080013e5 	.word	0x080013e5
 80013a8:	080013f3 	.word	0x080013f3
	case 0x01:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	461a      	mov	r2, r3
 80013b0:	2101      	movs	r1, #1
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <eeprom_write+0x94>)
 80013b4:	f003 f84a 	bl	800444c <HAL_RTCEx_BKUPWrite>
		break;
 80013b8:	e022      	b.n	8001400 <eeprom_write+0x8c>
	case 0x02:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, data);
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	461a      	mov	r2, r3
 80013be:	2102      	movs	r1, #2
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <eeprom_write+0x94>)
 80013c2:	f003 f843 	bl	800444c <HAL_RTCEx_BKUPWrite>
		break;
 80013c6:	e01b      	b.n	8001400 <eeprom_write+0x8c>
	case 0x03:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, data);
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	461a      	mov	r2, r3
 80013cc:	2103      	movs	r1, #3
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <eeprom_write+0x94>)
 80013d0:	f003 f83c 	bl	800444c <HAL_RTCEx_BKUPWrite>
		break;
 80013d4:	e014      	b.n	8001400 <eeprom_write+0x8c>
	case 0x04:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	461a      	mov	r2, r3
 80013da:	2104      	movs	r1, #4
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <eeprom_write+0x94>)
 80013de:	f003 f835 	bl	800444c <HAL_RTCEx_BKUPWrite>
		break;
 80013e2:	e00d      	b.n	8001400 <eeprom_write+0x8c>
	case 0x05:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, data);
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	461a      	mov	r2, r3
 80013e8:	2105      	movs	r1, #5
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <eeprom_write+0x94>)
 80013ec:	f003 f82e 	bl	800444c <HAL_RTCEx_BKUPWrite>
		break;
 80013f0:	e006      	b.n	8001400 <eeprom_write+0x8c>
	case 0x06:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, data);
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	461a      	mov	r2, r3
 80013f6:	2106      	movs	r1, #6
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <eeprom_write+0x94>)
 80013fa:	f003 f827 	bl	800444c <HAL_RTCEx_BKUPWrite>
		break;
 80013fe:	bf00      	nop
	}

}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000150 	.word	0x20000150

0800140c <set_add_duration_of_function>:
//uint8_t eeprom_read(uint8_t addr){
//	uint8_t recv_data;
//	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 0xFF, &recv_data, 1, HAL_MAX_DELAY);
//}
void set_add_duration_of_function(uint8_t _selected_menu){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d07e      	beq.n	800151a <set_add_duration_of_function+0x10e>
		switch (_selected_menu) {
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3b01      	subs	r3, #1
 8001420:	2b04      	cmp	r3, #4
 8001422:	d87a      	bhi.n	800151a <set_add_duration_of_function+0x10e>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <set_add_duration_of_function+0x20>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001441 	.word	0x08001441
 8001430:	08001469 	.word	0x08001469
 8001434:	08001491 	.word	0x08001491
 8001438:	080014b9 	.word	0x080014b9
 800143c:	080014e1 	.word	0x080014e1
		case 1:
			if(F1_DURATION < 99){
 8001440:	4b38      	ldr	r3, [pc, #224]	; (8001524 <set_add_duration_of_function+0x118>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b62      	cmp	r3, #98	; 0x62
 8001448:	d85e      	bhi.n	8001508 <set_add_duration_of_function+0xfc>
				F1_DURATION += 1;
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <set_add_duration_of_function+0x118>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <set_add_duration_of_function+0x118>)
 8001456:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <set_add_duration_of_function+0x118>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff ff87 	bl	8001374 <eeprom_write>
			}
			break;
 8001466:	e04f      	b.n	8001508 <set_add_duration_of_function+0xfc>
		case 2:
			if(F2_DURATION < 99){
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <set_add_duration_of_function+0x11c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b62      	cmp	r3, #98	; 0x62
 8001470:	d84c      	bhi.n	800150c <set_add_duration_of_function+0x100>
				F2_DURATION += 1;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <set_add_duration_of_function+0x11c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <set_add_duration_of_function+0x11c>)
 800147e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <set_add_duration_of_function+0x11c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff ff73 	bl	8001374 <eeprom_write>
			}
			break;
 800148e:	e03d      	b.n	800150c <set_add_duration_of_function+0x100>
		case 3:
			if(F3_DURATION < 99){
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <set_add_duration_of_function+0x120>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b62      	cmp	r3, #98	; 0x62
 8001498:	d83a      	bhi.n	8001510 <set_add_duration_of_function+0x104>
				F3_DURATION += 1;
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <set_add_duration_of_function+0x120>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <set_add_duration_of_function+0x120>)
 80014a6:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <set_add_duration_of_function+0x120>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	2003      	movs	r0, #3
 80014b2:	f7ff ff5f 	bl	8001374 <eeprom_write>
			}
			break;
 80014b6:	e02b      	b.n	8001510 <set_add_duration_of_function+0x104>
		case 4:
			if(F4_DURATION < 99){
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <set_add_duration_of_function+0x124>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b62      	cmp	r3, #98	; 0x62
 80014c0:	d828      	bhi.n	8001514 <set_add_duration_of_function+0x108>
				F4_DURATION += 1;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <set_add_duration_of_function+0x124>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <set_add_duration_of_function+0x124>)
 80014ce:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <set_add_duration_of_function+0x124>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	2004      	movs	r0, #4
 80014da:	f7ff ff4b 	bl	8001374 <eeprom_write>
			}
			break;
 80014de:	e019      	b.n	8001514 <set_add_duration_of_function+0x108>
		case 5:
			if(F5_DURATION < 99){
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <set_add_duration_of_function+0x128>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b62      	cmp	r3, #98	; 0x62
 80014e8:	d816      	bhi.n	8001518 <set_add_duration_of_function+0x10c>
				F5_DURATION += 1;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <set_add_duration_of_function+0x128>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <set_add_duration_of_function+0x128>)
 80014f6:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <set_add_duration_of_function+0x128>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	2005      	movs	r0, #5
 8001502:	f7ff ff37 	bl	8001374 <eeprom_write>
			}
			break;
 8001506:	e007      	b.n	8001518 <set_add_duration_of_function+0x10c>
			break;
 8001508:	bf00      	nop
 800150a:	e006      	b.n	800151a <set_add_duration_of_function+0x10e>
			break;
 800150c:	bf00      	nop
 800150e:	e004      	b.n	800151a <set_add_duration_of_function+0x10e>
			break;
 8001510:	bf00      	nop
 8001512:	e002      	b.n	800151a <set_add_duration_of_function+0x10e>
			break;
 8001514:	bf00      	nop
 8001516:	e000      	b.n	800151a <set_add_duration_of_function+0x10e>
			break;
 8001518:	bf00      	nop
		}
	}
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000013 	.word	0x20000013
 8001528:	20000014 	.word	0x20000014
 800152c:	20000015 	.word	0x20000015
 8001530:	20000016 	.word	0x20000016
 8001534:	20000017 	.word	0x20000017

08001538 <set_substract_duration_of_function>:

void set_substract_duration_of_function(uint8_t _selected_menu){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d07e      	beq.n	8001646 <set_substract_duration_of_function+0x10e>
		switch (_selected_menu) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3b01      	subs	r3, #1
 800154c:	2b04      	cmp	r3, #4
 800154e:	d87a      	bhi.n	8001646 <set_substract_duration_of_function+0x10e>
 8001550:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <set_substract_duration_of_function+0x20>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	0800156d 	.word	0x0800156d
 800155c:	08001595 	.word	0x08001595
 8001560:	080015bd 	.word	0x080015bd
 8001564:	080015e5 	.word	0x080015e5
 8001568:	0800160d 	.word	0x0800160d
		case 1:
			if(F1_DURATION >1){
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <set_substract_duration_of_function+0x118>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d95e      	bls.n	8001634 <set_substract_duration_of_function+0xfc>
				F1_DURATION -= 1;
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <set_substract_duration_of_function+0x118>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b33      	ldr	r3, [pc, #204]	; (8001650 <set_substract_duration_of_function+0x118>)
 8001582:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <set_substract_duration_of_function+0x118>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fef1 	bl	8001374 <eeprom_write>
			}
			break;
 8001592:	e04f      	b.n	8001634 <set_substract_duration_of_function+0xfc>
		case 2:
			if(F2_DURATION >1){
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <set_substract_duration_of_function+0x11c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d94c      	bls.n	8001638 <set_substract_duration_of_function+0x100>
				F2_DURATION -= 1;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <set_substract_duration_of_function+0x11c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <set_substract_duration_of_function+0x11c>)
 80015aa:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <set_substract_duration_of_function+0x11c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff fedd 	bl	8001374 <eeprom_write>
			}
			break;
 80015ba:	e03d      	b.n	8001638 <set_substract_duration_of_function+0x100>
		case 3:
			if(F3_DURATION >1){
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <set_substract_duration_of_function+0x120>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d93a      	bls.n	800163c <set_substract_duration_of_function+0x104>
				F3_DURATION -= 1;
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <set_substract_duration_of_function+0x120>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <set_substract_duration_of_function+0x120>)
 80015d2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <set_substract_duration_of_function+0x120>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	2003      	movs	r0, #3
 80015de:	f7ff fec9 	bl	8001374 <eeprom_write>
			}
			break;
 80015e2:	e02b      	b.n	800163c <set_substract_duration_of_function+0x104>
		case 4:
			if(F4_DURATION >1){
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <set_substract_duration_of_function+0x124>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d928      	bls.n	8001640 <set_substract_duration_of_function+0x108>
				F4_DURATION -= 1;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <set_substract_duration_of_function+0x124>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <set_substract_duration_of_function+0x124>)
 80015fa:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <set_substract_duration_of_function+0x124>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	2004      	movs	r0, #4
 8001606:	f7ff feb5 	bl	8001374 <eeprom_write>
			}
			break;
 800160a:	e019      	b.n	8001640 <set_substract_duration_of_function+0x108>
		case 5:
			if(F5_DURATION >1){
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <set_substract_duration_of_function+0x128>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d916      	bls.n	8001644 <set_substract_duration_of_function+0x10c>
				F5_DURATION -= 1;
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <set_substract_duration_of_function+0x128>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <set_substract_duration_of_function+0x128>)
 8001622:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <set_substract_duration_of_function+0x128>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	2005      	movs	r0, #5
 800162e:	f7ff fea1 	bl	8001374 <eeprom_write>
			}
			break;
 8001632:	e007      	b.n	8001644 <set_substract_duration_of_function+0x10c>
			break;
 8001634:	bf00      	nop
 8001636:	e006      	b.n	8001646 <set_substract_duration_of_function+0x10e>
			break;
 8001638:	bf00      	nop
 800163a:	e004      	b.n	8001646 <set_substract_duration_of_function+0x10e>
			break;
 800163c:	bf00      	nop
 800163e:	e002      	b.n	8001646 <set_substract_duration_of_function+0x10e>
			break;
 8001640:	bf00      	nop
 8001642:	e000      	b.n	8001646 <set_substract_duration_of_function+0x10e>
			break;
 8001644:	bf00      	nop
		}
	}
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000013 	.word	0x20000013
 8001654:	20000014 	.word	0x20000014
 8001658:	20000015 	.word	0x20000015
 800165c:	20000016 	.word	0x20000016
 8001660:	20000017 	.word	0x20000017

08001664 <add_coin_credit>:
void add_coin_credit(uint32_t pulse_width) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	; 0x50
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	if (pulse_width <= (coin_acceptor_pulse_width + creditPulseOffset)
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <add_coin_credit+0xec>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b37      	ldr	r3, [pc, #220]	; (8001754 <add_coin_credit+0xf0>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4293      	cmp	r3, r2
 8001680:	d84b      	bhi.n	800171a <add_coin_credit+0xb6>
			&& (pulse_width
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <add_coin_credit+0xec>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <add_coin_credit+0xf0>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	461a      	mov	r2, r3
			&& (pulse_width
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4293      	cmp	r3, r2
 8001696:	d340      	bcc.n	800171a <add_coin_credit+0xb6>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <add_coin_credit+0xf4>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	492d      	ldr	r1, [pc, #180]	; (800175c <add_coin_credit+0xf8>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 fad2 	bl	8005c50 <siprintf>
				(int)coin_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fd4b 	bl	800014c <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f107 0108 	add.w	r1, r7, #8
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	4827      	ldr	r0, [pc, #156]	; (8001760 <add_coin_credit+0xfc>)
 80016c4:	f004 f927 	bl	8005916 <HAL_UART_Transmit>
		credit += coin_credit_per_pulse;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <add_coin_credit+0xf4>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <add_coin_credit+0x100>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a23      	ldr	r2, [pc, #140]	; (8001764 <add_coin_credit+0x100>)
 80016d8:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <add_coin_credit+0x100>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f240 32e6 	movw	r2, #998	; 0x3e6
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d903      	bls.n	80016ee <add_coin_credit+0x8a>
			credit = 999;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <add_coin_credit+0x100>)
 80016e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ec:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <add_coin_credit+0x100>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f866 	bl	80007c4 <segment_display_int>

		if (credit >= minimum_credit_to_start) {
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <add_coin_credit+0x100>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <add_coin_credit+0x104>)
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	4293      	cmp	r3, r2
 8001702:	d320      	bcc.n	8001746 <add_coin_credit+0xe2>
			system_function_start = true;
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <add_coin_credit+0x108>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	2219      	movs	r2, #25
 8001710:	4917      	ldr	r1, [pc, #92]	; (8001770 <add_coin_credit+0x10c>)
 8001712:	4813      	ldr	r0, [pc, #76]	; (8001760 <add_coin_credit+0xfc>)
 8001714:	f004 f8ff 	bl	8005916 <HAL_UART_Transmit>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 8001718:	e015      	b.n	8001746 <add_coin_credit+0xe2>
					HAL_MAX_DELAY);
		}
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001720:	4914      	ldr	r1, [pc, #80]	; (8001774 <add_coin_credit+0x110>)
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fa94 	bl	8005c50 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 8001728:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd0d 	bl	800014c <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <add_coin_credit+0xfc>)
 8001740:	f004 f8e9 	bl	8005916 <HAL_UART_Transmit>
	}
}
 8001744:	e000      	b.n	8001748 <add_coin_credit+0xe4>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 8001746:	bf00      	nop
}
 8001748:	bf00      	nop
 800174a:	3750      	adds	r7, #80	; 0x50
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000000f 	.word	0x2000000f
 8001754:	20000010 	.word	0x20000010
 8001758:	20000012 	.word	0x20000012
 800175c:	08006708 	.word	0x08006708
 8001760:	2000031c 	.word	0x2000031c
 8001764:	200000e4 	.word	0x200000e4
 8001768:	20000004 	.word	0x20000004
 800176c:	200000f0 	.word	0x200000f0
 8001770:	08006720 	.word	0x08006720
 8001774:	0800673c 	.word	0x0800673c

08001778 <add_bank_note_credit>:
void add_bank_note_credit(uint32_t pulse_width) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b09e      	sub	sp, #120	; 0x78
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	if (pulse_width <= bank_acceptor_pulse_width + creditPulseOffset
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <add_bank_note_credit+0x118>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	4b42      	ldr	r3, [pc, #264]	; (8001894 <add_bank_note_credit+0x11c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4413      	add	r3, r2
 800178e:	461a      	mov	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4293      	cmp	r3, r2
 8001794:	d862      	bhi.n	800185c <add_bank_note_credit+0xe4>
			&& pulse_width
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <add_bank_note_credit+0x118>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <add_bank_note_credit+0x11c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	461a      	mov	r2, r3
			&& pulse_width
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d357      	bcc.n	800185c <add_bank_note_credit+0xe4>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 80017ac:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <add_bank_note_credit+0x120>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b8:	4938      	ldr	r1, [pc, #224]	; (800189c <add_bank_note_credit+0x124>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 fa48 	bl	8005c50 <siprintf>
				bank_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80017c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fcc1 	bl	800014c <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	4832      	ldr	r0, [pc, #200]	; (80018a0 <add_bank_note_credit+0x128>)
 80017d8:	f004 f89d 	bl	8005916 <HAL_UART_Transmit>
		credit += bank_credit_per_pulse;
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <add_bank_note_credit+0x120>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <add_bank_note_credit+0x12c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <add_bank_note_credit+0x12c>)
 80017ec:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <add_bank_note_credit+0x12c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f240 32e6 	movw	r2, #998	; 0x3e6
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d903      	bls.n	8001802 <add_bank_note_credit+0x8a>
			credit = 999;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <add_bank_note_credit+0x12c>)
 80017fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001800:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <add_bank_note_credit+0x12c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe ffdc 	bl	80007c4 <segment_display_int>
		if (credit >= minimum_credit_to_start) {
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <add_bank_note_credit+0x12c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <add_bank_note_credit+0x130>)
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4293      	cmp	r3, r2
 8001816:	d309      	bcc.n	800182c <add_bank_note_credit+0xb4>
			system_function_start = true;
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <add_bank_note_credit+0x134>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	2219      	movs	r2, #25
 8001824:	4922      	ldr	r1, [pc, #136]	; (80018b0 <add_bank_note_credit+0x138>)
 8001826:	481e      	ldr	r0, [pc, #120]	; (80018a0 <add_bank_note_credit+0x128>)
 8001828:	f004 f875 	bl	8005916 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		char tmp_msg2[35];
		sprintf(tmp_msg2, "current credit : %d \r\n", (int)credit);
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <add_bank_note_credit+0x12c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	491f      	ldr	r1, [pc, #124]	; (80018b4 <add_bank_note_credit+0x13c>)
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fa09 	bl	8005c50 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg2, strlen(tmp_msg2),
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fc82 	bl	800014c <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 010c 	add.w	r1, r7, #12
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
 8001854:	4812      	ldr	r0, [pc, #72]	; (80018a0 <add_bank_note_credit+0x128>)
 8001856:	f004 f85e 	bl	8005916 <HAL_UART_Transmit>
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 800185a:	e014      	b.n	8001886 <add_bank_note_credit+0x10e>
				HAL_MAX_DELAY);
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001862:	4915      	ldr	r1, [pc, #84]	; (80018b8 <add_bank_note_credit+0x140>)
 8001864:	4618      	mov	r0, r3
 8001866:	f004 f9f3 	bl	8005c50 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 800186a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fc6c 	bl	800014c <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
 8001880:	4807      	ldr	r0, [pc, #28]	; (80018a0 <add_bank_note_credit+0x128>)
 8001882:	f004 f848 	bl	8005916 <HAL_UART_Transmit>
	}
}
 8001886:	bf00      	nop
 8001888:	3778      	adds	r7, #120	; 0x78
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000000e 	.word	0x2000000e
 8001894:	20000010 	.word	0x20000010
 8001898:	20000011 	.word	0x20000011
 800189c:	08006708 	.word	0x08006708
 80018a0:	2000031c 	.word	0x2000031c
 80018a4:	200000e4 	.word	0x200000e4
 80018a8:	20000004 	.word	0x20000004
 80018ac:	200000f0 	.word	0x200000f0
 80018b0:	08006720 	.word	0x08006720
 80018b4:	0800675c 	.word	0x0800675c
 80018b8:	0800673c 	.word	0x0800673c

080018bc <logic_runner>:

void logic_runner() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	eeprom_write(0x06,credit);
 80018c0:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <logic_runner+0x124>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	2006      	movs	r0, #6
 80018ca:	f7ff fd53 	bl	8001374 <eeprom_write>
	if (selected_button != 0) {
 80018ce:	4b45      	ldr	r3, [pc, #276]	; (80019e4 <logic_runner+0x128>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <logic_runner+0x26>
		logic_runner_round_counter += 1;
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <logic_runner+0x12c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	4a42      	ldr	r2, [pc, #264]	; (80019e8 <logic_runner+0x12c>)
 80018e0:	6013      	str	r3, [r2, #0]
	}
	switch(selected_button){
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <logic_runner+0x128>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3b03      	subs	r3, #3
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d82f      	bhi.n	800194e <logic_runner+0x92>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <logic_runner+0x38>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	08001909 	.word	0x08001909
 80018f8:	08001917 	.word	0x08001917
 80018fc:	08001925 	.word	0x08001925
 8001900:	08001933 	.word	0x08001933
 8001904:	08001941 	.word	0x08001941
	case 3:
		duration_per_1credit = F1_DURATION;
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <logic_runner+0x130>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <logic_runner+0x134>)
 8001912:	601a      	str	r2, [r3, #0]
		break;
 8001914:	e01f      	b.n	8001956 <logic_runner+0x9a>
	case 4:
		duration_per_1credit = F2_DURATION;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <logic_runner+0x138>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <logic_runner+0x134>)
 8001920:	601a      	str	r2, [r3, #0]
		break;
 8001922:	e018      	b.n	8001956 <logic_runner+0x9a>
	case 5:
		duration_per_1credit = F3_DURATION;
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <logic_runner+0x13c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <logic_runner+0x134>)
 800192e:	601a      	str	r2, [r3, #0]
		break;
 8001930:	e011      	b.n	8001956 <logic_runner+0x9a>
	case 6:
		duration_per_1credit = F4_DURATION;
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <logic_runner+0x140>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <logic_runner+0x134>)
 800193c:	601a      	str	r2, [r3, #0]
		break;
 800193e:	e00a      	b.n	8001956 <logic_runner+0x9a>
	case 7:
		duration_per_1credit = F5_DURATION;
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <logic_runner+0x144>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <logic_runner+0x134>)
 800194a:	601a      	str	r2, [r3, #0]
		break;
 800194c:	e003      	b.n	8001956 <logic_runner+0x9a>
	default:
		duration_per_1credit = 10;
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <logic_runner+0x134>)
 8001950:	220a      	movs	r2, #10
 8001952:	601a      	str	r2, [r3, #0]
		break;
 8001954:	bf00      	nop
	}

	if (logic_runner_round_counter >= duration_per_1credit && credit > 0) {
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <logic_runner+0x12c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <logic_runner+0x134>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	db1f      	blt.n	80019a2 <logic_runner+0xe6>
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <logic_runner+0x124>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01b      	beq.n	80019a2 <logic_runner+0xe6>
		logic_runner_round_counter = 0;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <logic_runner+0x12c>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)"took 1 credit\r\n", 15, HAL_MAX_DELAY);
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	220f      	movs	r2, #15
 8001976:	4923      	ldr	r1, [pc, #140]	; (8001a04 <logic_runner+0x148>)
 8001978:	4823      	ldr	r0, [pc, #140]	; (8001a08 <logic_runner+0x14c>)
 800197a:	f003 ffcc 	bl	8005916 <HAL_UART_Transmit>
		credit -= 1;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <logic_runner+0x124>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <logic_runner+0x124>)
 8001986:	6013      	str	r3, [r2, #0]
		if(credit < 255){
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <logic_runner+0x124>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2bfe      	cmp	r3, #254	; 0xfe
 800198e:	d806      	bhi.n	800199e <logic_runner+0xe2>
			//			eeprom_write(0x06,credit);
			HAL_UART_Transmit(&huart1, (uint8_t *)"writing credit value\r\n", 22,
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	2216      	movs	r2, #22
 8001996:	491d      	ldr	r1, [pc, #116]	; (8001a0c <logic_runner+0x150>)
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <logic_runner+0x14c>)
 800199a:	f003 ffbc 	bl	8005916 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		serial_display_credit();
 800199e:	f000 f83b 	bl	8001a18 <serial_display_credit>
	}
	if (credit <= 0) {
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <logic_runner+0x124>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d112      	bne.n	80019d0 <logic_runner+0x114>
		//		segment_display_standby();
		reset_all_output();
 80019aa:	f7fe fe9d 	bl	80006e8 <reset_all_output>
		HAL_UART_Transmit(&huart1, (uint8_t *)"time up !, disable all functions\r\n", 34,
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	2222      	movs	r2, #34	; 0x22
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <logic_runner+0x154>)
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <logic_runner+0x14c>)
 80019b8:	f003 ffad 	bl	8005916 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		credit = 0;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <logic_runner+0x124>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
		//		eeprom_write(0x06,0);
		system_function_start = false;
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <logic_runner+0x158>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
		selected_button = 0;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <logic_runner+0x128>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	}else{
		segment_display_int(credit);
	}
}
 80019ce:	e004      	b.n	80019da <logic_runner+0x11e>
		segment_display_int(credit);
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <logic_runner+0x124>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fef5 	bl	80007c4 <segment_display_int>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200000e4 	.word	0x200000e4
 80019e4:	200000e8 	.word	0x200000e8
 80019e8:	200000ec 	.word	0x200000ec
 80019ec:	20000013 	.word	0x20000013
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000014 	.word	0x20000014
 80019f8:	20000015 	.word	0x20000015
 80019fc:	20000016 	.word	0x20000016
 8001a00:	20000017 	.word	0x20000017
 8001a04:	08006774 	.word	0x08006774
 8001a08:	2000031c 	.word	0x2000031c
 8001a0c:	08006784 	.word	0x08006784
 8001a10:	0800679c 	.word	0x0800679c
 8001a14:	200000f0 	.word	0x200000f0

08001a18 <serial_display_credit>:

void serial_display_credit() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
	char buffer[35];
	sprintf(buffer, "current credit : %d \r\n", (int)credit);
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <serial_display_credit+0x38>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	490b      	ldr	r1, [pc, #44]	; (8001a54 <serial_display_credit+0x3c>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 f911 	bl	8005c50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fb8b 	bl	800014c <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	1d39      	adds	r1, r7, #4
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <serial_display_credit+0x40>)
 8001a42:	f003 ff68 	bl	8005916 <HAL_UART_Transmit>
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000e4 	.word	0x200000e4
 8001a54:	0800675c 	.word	0x0800675c
 8001a58:	2000031c 	.word	0x2000031c

08001a5c <stop_and_clear_tim1>:
void stop_and_clear_tim1() {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <stop_and_clear_tim1+0x20>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop_IT(&htim1);
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <stop_and_clear_tim1+0x20>)
 8001a6a:	f003 f82d 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001a6e:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <stop_and_clear_tim1+0x20>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f06f 0201 	mvn.w	r2, #1
 8001a76:	611a      	str	r2, [r3, #16]
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000024c 	.word	0x2000024c

08001a80 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	//	HAL_UART_Transmit(&huart2, message3, strlen(message3), HAL_MAX_DELAY);
	//	stop_and_clear_tim1();
	max7219_Turn_On();
 8001a88:	f000 fa10 	bl	8001eac <max7219_Turn_On>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001a8c:	4884      	ldr	r0, [pc, #528]	; (8001ca0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a8e:	f003 f81b 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001a92:	4b83      	ldr	r3, [pc, #524]	; (8001ca0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001a9a:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0201 	mvn.w	r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Stop_IT(&htim1);
 8001aa4:	487f      	ldr	r0, [pc, #508]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001aa6:	f003 f80f 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001aaa:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0201 	mvn.w	r2, #1
 8001aba:	611a      	str	r2, [r3, #16]


	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f040 8095 	bne.w	8001bf2 <HAL_TIM_IC_CaptureCallback+0x172>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7f1b      	ldrb	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 8090 	bne.w	8001bf2 <HAL_TIM_IC_CaptureCallback+0x172>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH1 INT\r\n", 9, HAL_MAX_DELAY);
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	2209      	movs	r2, #9
 8001ad8:	4974      	ldr	r1, [pc, #464]	; (8001cac <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001ada:	4875      	ldr	r0, [pc, #468]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001adc:	f003 ff1b 	bl	8005916 <HAL_UART_Transmit>
		if (Is_First_Captured == 0) // if the first value is not captured
 8001ae0:	4b74      	ldr	r3, [pc, #464]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11a      	bne.n	8001b20 <HAL_TIM_IC_CaptureCallback+0xa0>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f003 fbcb 	bl	8005288 <HAL_TIM_ReadCapturedValue>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001af6:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001af8:	4b6e      	ldr	r3, [pc, #440]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			 (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\
				 ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\
				 ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) :\
				 ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))*/

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a1a      	ldr	r2, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 020a 	bic.w	r2, r2, #10
 8001b0c:	621a      	str	r2, [r3, #32]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0202 	orr.w	r2, r2, #2
 8001b1c:	621a      	str	r2, [r3, #32]
 8001b1e:	e068      	b.n	8001bf2 <HAL_TIM_IC_CaptureCallback+0x172>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d163      	bne.n	8001bf2 <HAL_TIM_IC_CaptureCallback+0x172>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f003 fbab 	bl	8005288 <HAL_TIM_ReadCapturedValue>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b36:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
			//			burst_bank_credit += bank_credit_per_pulse;
			//			burst_counter = 0;
			//			start_debounce_counter = true;
			if (IC_Val2 > IC_Val1) {
 8001b40:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d907      	bls.n	8001b5c <HAL_TIM_IC_CaptureCallback+0xdc>
				Difference = IC_Val2 - IC_Val1;
 8001b4c:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e00f      	b.n	8001b7c <HAL_TIM_IC_CaptureCallback+0xfc>
			}

			else if (IC_Val1 > IC_Val2) {
 8001b5c:	4b56      	ldr	r3, [pc, #344]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d909      	bls.n	8001b7c <HAL_TIM_IC_CaptureCallback+0xfc>
				Difference = ((uint16_t) 0xffff - IC_Val1) + IC_Val2;
 8001b68:	4b54      	ldr	r3, [pc, #336]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b76:	33ff      	adds	r3, #255	; 0xff
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b7a:	6013      	str	r3, [r2, #0]
			}
			Is_First_Captured = 0; // set it back to false
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 020a 	bic.w	r2, r2, #10
 8001b90:	621a      	str	r2, [r3, #32]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a12      	ldr	r2, [r2, #32]
 8001b9c:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);

			add_bank_note_credit(Difference/1000);
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a48      	ldr	r2, [pc, #288]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fde4 	bl	8001778 <add_bank_note_credit>
			last_credit_insert_bank += bank_credit_per_pulse;
 8001bb0:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bc2:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH1:captured val : %d \r\n",(int)Difference);
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4940      	ldr	r1, [pc, #256]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f83d 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fab6 	bl	800014c <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f107 010c 	add.w	r1, r7, #12
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	4830      	ldr	r0, [pc, #192]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001bee:	f003 fe92 	bl	8005916 <HAL_UART_Transmit>
			//			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
			//			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
	if (htim->Instance == TIM3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f040 80c0 	bne.w	8001d7e <HAL_TIM_IC_CaptureCallback+0x2fe>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if the interrupt source is channel1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7f1b      	ldrb	r3, [r3, #28]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	f040 80bb 	bne.w	8001d7e <HAL_TIM_IC_CaptureCallback+0x2fe>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH2 INT\r\n", 9, HAL_MAX_DELAY);
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	2209      	movs	r2, #9
 8001c0e:	4931      	ldr	r1, [pc, #196]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001c10:	4827      	ldr	r0, [pc, #156]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c12:	f003 fe80 	bl	8005916 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001c16:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001c18:	f002 ff56 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 8001c1c:	4821      	ldr	r0, [pc, #132]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001c1e:	f002 ff53 	bl	8004ac8 <HAL_TIM_Base_Stop_IT>
		if (coin_Is_First_Captured == 0) // if the first value is not captured
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11a      	bne.n	8001c62 <HAL_TIM_IC_CaptureCallback+0x1e2>
		{
			coin_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f003 fb2a 	bl	8005288 <HAL_TIM_ReadCapturedValue>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c38:	601a      	str	r2, [r3, #0]
			coin_Is_First_Captured = 1;  // set the first captured as true
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c4e:	621a      	str	r2, [r3, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	621a      	str	r2, [r3, #32]
 8001c60:	e08d      	b.n	8001d7e <HAL_TIM_IC_CaptureCallback+0x2fe>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (coin_Is_First_Captured == 1) // if the first is already captured
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f040 8088 	bne.w	8001d7e <HAL_TIM_IC_CaptureCallback+0x2fe>
		{
			coin_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001c6e:	2104      	movs	r1, #4
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f003 fb09 	bl	8005288 <HAL_TIM_ReadCapturedValue>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001c7a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
			if (coin_IC_Val2 > coin_IC_Val1) {
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d92b      	bls.n	8001ce8 <HAL_TIM_IC_CaptureCallback+0x268>
				coin_Difference = coin_IC_Val2 - coin_IC_Val1;
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e033      	b.n	8001d08 <HAL_TIM_IC_CaptureCallback+0x288>
 8001ca0:	20000294 	.word	0x20000294
 8001ca4:	2000024c 	.word	0x2000024c
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	080067c0 	.word	0x080067c0
 8001cb0:	2000031c 	.word	0x2000031c
 8001cb4:	200000d0 	.word	0x200000d0
 8001cb8:	200000c4 	.word	0x200000c4
 8001cbc:	200000c8 	.word	0x200000c8
 8001cc0:	200000cc 	.word	0x200000cc
 8001cc4:	10624dd3 	.word	0x10624dd3
 8001cc8:	20000011 	.word	0x20000011
 8001ccc:	200000fa 	.word	0x200000fa
 8001cd0:	080067cc 	.word	0x080067cc
 8001cd4:	080067e8 	.word	0x080067e8
 8001cd8:	200000e0 	.word	0x200000e0
 8001cdc:	200000d4 	.word	0x200000d4
 8001ce0:	200000d8 	.word	0x200000d8
 8001ce4:	200000dc 	.word	0x200000dc
			}

			else if (coin_IC_Val1 > coin_IC_Val2) {
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d909      	bls.n	8001d08 <HAL_TIM_IC_CaptureCallback+0x288>
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
																																																																																																										+ coin_IC_Val2;
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d02:	33ff      	adds	r3, #255	; 0xff
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001d06:	6013      	str	r3, [r2, #0]
			}
			coin_Is_First_Captured = 0; // set it back to false
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d1c:	621a      	str	r2, [r3, #32]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a12      	ldr	r2, [r2, #32]
 8001d28:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			add_coin_credit(coin_Difference/1000);
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fc94 	bl	8001664 <add_coin_credit>
			last_credit_insert += coin_credit_per_pulse;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001d4e:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH2:captured val : %d \r\n",(int)coin_Difference);
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4913      	ldr	r1, [pc, #76]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 ff77 	bl	8005c50 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe f9f0 	bl	800014c <strlen>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f107 010c 	add.w	r1, r7, #12
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001d7a:	f003 fdcc 	bl	8005916 <HAL_UART_Transmit>
			// set polarity to rising edge
			//			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
			//			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8001d7e:	480c      	ldr	r0, [pc, #48]	; (8001db0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001d80:	f002 fe50 	bl	8004a24 <HAL_TIM_Base_Start_IT>
}
 8001d84:	bf00      	nop
 8001d86:	3730      	adds	r7, #48	; 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200000d4 	.word	0x200000d4
 8001d90:	200000d8 	.word	0x200000d8
 8001d94:	200000dc 	.word	0x200000dc
 8001d98:	200000e0 	.word	0x200000e0
 8001d9c:	10624dd3 	.word	0x10624dd3
 8001da0:	20000012 	.word	0x20000012
 8001da4:	200000f8 	.word	0x200000f8
 8001da8:	080067f4 	.word	0x080067f4
 8001dac:	2000031c 	.word	0x2000031c
 8001db0:	20000294 	.word	0x20000294

08001db4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_On();
 8001dca:	f000 f86f 	bl	8001eac <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8001dce:	2107      	movs	r1, #7
 8001dd0:	200b      	movs	r0, #11
 8001dd2:	f000 f841 	bl	8001e58 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f806 	bl	8001dea <max7219_SetIntensivity>
	max7219_Clean();
 8001dde:	f000 f817 	bl	8001e10 <max7219_Clean>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d805      	bhi.n	8001e06 <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f000 f82a 	bl	8001e58 <max7219_SendData>
 8001e04:	e000      	b.n	8001e08 <max7219_SetIntensivity+0x1e>
		return;
 8001e06:	bf00      	nop
}
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <max7219_Clean>:

void max7219_Clean()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <max7219_Clean+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d101      	bne.n	8001e26 <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001e22:	230f      	movs	r3, #15
 8001e24:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	e00b      	b.n	8001e44 <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	79fa      	ldrb	r2, [r7, #7]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f80d 	bl	8001e58 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b07      	cmp	r3, #7
 8001e48:	ddf0      	ble.n	8001e2c <max7219_Clean+0x1c>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000101 	.word	0x20000101

08001e58 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460a      	mov	r2, r1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <max7219_SendData+0x4c>)
 8001e70:	f001 f993 	bl	800319a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001e74:	1df9      	adds	r1, r7, #7
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <max7219_SendData+0x50>)
 8001e7e:	f002 fb9f 	bl	80045c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001e82:	1db9      	adds	r1, r7, #6
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <max7219_SendData+0x50>)
 8001e8c:	f002 fb98 	bl	80045c0 <HAL_SPI_Transmit>
	CS_RESET();
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <max7219_SendData+0x4c>)
 8001e98:	f001 f97f 	bl	800319a <HAL_GPIO_WritePin>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	20000164 	.word	0x20000164

08001eac <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	200c      	movs	r0, #12
 8001eb4:	f7ff ffd0 	bl	8001e58 <max7219_SendData>
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <max7219_Turn_Off>:

void max7219_Turn_Off(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x00);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	200c      	movs	r0, #12
 8001ec4:	f7ff ffc8 	bl	8001e58 <max7219_SendData>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <max7219_Decode_On>:

void max7219_Decode_On(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <max7219_Decode_On+0x1c>)
 8001ed2:	22ff      	movs	r2, #255	; 0xff
 8001ed4:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <max7219_Decode_On+0x1c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	2009      	movs	r0, #9
 8001ede:	f7ff ffbb 	bl	8001e58 <max7219_SendData>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000101 	.word	0x20000101

08001eec <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	71bb      	strb	r3, [r7, #6]
 8001efa:	4613      	mov	r3, r2
 8001efc:	717b      	strb	r3, [r7, #5]
	if(position > NUMBER_OF_DIGITS)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d844      	bhi.n	8001f8e <max7219_PrintDigit+0xa2>
	{
		return;
	}

	if(point)
 8001f04:	797b      	ldrb	r3, [r7, #5]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d020      	beq.n	8001f4c <max7219_PrintDigit+0x60>
	{
		if(decodeMode == 0x00)
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <max7219_PrintDigit+0xac>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <max7219_PrintDigit+0x44>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8b9 	bl	800208c <getSymbol>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff95 	bl	8001e58 <max7219_SendData>
 8001f2e:	e02f      	b.n	8001f90 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <max7219_PrintDigit+0xac>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d12b      	bne.n	8001f90 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff87 	bl	8001e58 <max7219_SendData>
 8001f4a:	e021      	b.n	8001f90 <max7219_PrintDigit+0xa4>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <max7219_PrintDigit+0xac>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10e      	bne.n	8001f72 <max7219_PrintDigit+0x86>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f898 	bl	800208c <getSymbol>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff74 	bl	8001e58 <max7219_SendData>
 8001f70:	e00e      	b.n	8001f90 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <max7219_PrintDigit+0xac>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2bff      	cmp	r3, #255	; 0xff
 8001f78:	d10a      	bne.n	8001f90 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff66 	bl	8001e58 <max7219_SendData>
 8001f8c:	e000      	b.n	8001f90 <max7219_PrintDigit+0xa4>
		return;
 8001f8e:	bf00      	nop
		}
	}
}
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000101 	.word	0x20000101

08001f9c <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8001fa8:	21ff      	movs	r1, #255	; 0xff
 8001faa:	2009      	movs	r0, #9
 8001fac:	f7ff ff54 	bl	8001e58 <max7219_SendData>

	int32_t i;

	if (value < 0)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0d      	bge.n	8001fd2 <max7219_PrintItos+0x36>
	{
		if(position > 0)
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <max7219_PrintItos+0x30>
		{
			max7219_SendData(position, MINUS);
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	210a      	movs	r1, #10
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff49 	bl	8001e58 <max7219_SendData>
			position--;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	425b      	negs	r3, r3
 8001fd0:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 8001fd6:	e005      	b.n	8001fe4 <max7219_PrintItos+0x48>
	{
		i *= 10;
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	dcf3      	bgt.n	8001fd8 <max7219_PrintItos+0x3c>
	}

	if(position > 0)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <max7219_PrintItos+0x74>
	{
		max7219_SendData(position, value/i);
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff27 	bl	8001e58 <max7219_SendData>
		position--;
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	3b01      	subs	r3, #1
 800200e:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <max7219_PrintItos+0xe8>)
 8002014:	fb82 1203 	smull	r1, r2, r2, r3
 8002018:	1092      	asrs	r2, r2, #2
 800201a:	17db      	asrs	r3, r3, #31
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 8002020:	e022      	b.n	8002068 <max7219_PrintItos+0xcc>
	{
		if(position > 0)
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d017      	beq.n	8002058 <max7219_PrintItos+0xbc>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	fb93 f1f2 	sdiv	r1, r3, r2
 800203a:	fb02 f201 	mul.w	r2, r2, r1
 800203e:	1a9a      	subs	r2, r3, r2
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	fb92 f3f3 	sdiv	r3, r2, r3
 8002046:	b2da      	uxtb	r2, r3
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff03 	bl	8001e58 <max7219_SendData>
			position--;
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	3b01      	subs	r3, #1
 8002056:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <max7219_PrintItos+0xe8>)
 800205c:	fb82 1203 	smull	r1, r2, r2, r3
 8002060:	1092      	asrs	r2, r2, #2
 8002062:	17db      	asrs	r3, r3, #31
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dcd9      	bgt.n	8002022 <max7219_PrintItos+0x86>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <max7219_PrintItos+0xec>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	2009      	movs	r0, #9
 8002076:	f7ff feef 	bl	8001e58 <max7219_SendData>

	return position;
 800207a:	79fb      	ldrb	r3, [r7, #7]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	66666667 	.word	0x66666667
 8002088:	20000101 	.word	0x20000101

0800208c <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <getSymbol+0x1c>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	b29b      	uxth	r3, r3
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000018 	.word	0x20000018

080020ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2100      	movs	r1, #0
 80020b6:	460a      	mov	r2, r1
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	460a      	mov	r2, r1
 80020bc:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <MX_RTC_Init+0x8c>)
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <MX_RTC_Init+0x90>)
 80020c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <MX_RTC_Init+0x8c>)
 80020ca:	f04f 32ff 	mov.w	r2, #4294967295
 80020ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <MX_RTC_Init+0x8c>)
 80020d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <MX_RTC_Init+0x8c>)
 80020da:	f001 fe29 	bl	8003d30 <HAL_RTC_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80020e4:	f7ff fe66 	bl	8001db4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <MX_RTC_Init+0x8c>)
 80020fc:	f001 feae 	bl	8003e5c <HAL_RTC_SetTime>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002106:	f7ff fe55 	bl	8001db4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800210a:	2301      	movs	r3, #1
 800210c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800210e:	2301      	movs	r3, #1
 8002110:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002112:	2301      	movs	r3, #1
 8002114:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002116:	2300      	movs	r3, #0
 8002118:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_RTC_Init+0x8c>)
 8002122:	f001 ff33 	bl	8003f8c <HAL_RTC_SetDate>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800212c:	f7ff fe42 	bl	8001db4 <Error_Handler>
  }

}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000150 	.word	0x20000150
 800213c:	40002800 	.word	0x40002800

08002140 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <HAL_RTC_MspInit+0x3c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d110      	bne.n	8002174 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002152:	f001 f853 	bl	80031fc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RTC_MspInit+0x40>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RTC_MspInit+0x40>)
 800215c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RTC_MspInit+0x40>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RTC_MspInit+0x44>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40002800 	.word	0x40002800
 8002180:	40021000 	.word	0x40021000
 8002184:	4242043c 	.word	0x4242043c

08002188 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <MX_SPI2_Init+0x64>)
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <MX_SPI2_Init+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_SPI2_Init+0x64>)
 8002194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002198:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_SPI2_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_SPI2_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_SPI2_Init+0x64>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_SPI2_Init+0x64>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_SPI2_Init+0x64>)
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_SPI2_Init+0x64>)
 80021bc:	2208      	movs	r2, #8
 80021be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <MX_SPI2_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_SPI2_Init+0x64>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <MX_SPI2_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_SPI2_Init+0x64>)
 80021d4:	220a      	movs	r2, #10
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <MX_SPI2_Init+0x64>)
 80021da:	f002 f96d 	bl	80044b8 <HAL_SPI_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021e4:	f7ff fde6 	bl	8001db4 <Error_Handler>
  }

}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000164 	.word	0x20000164
 80021f0:	40003800 	.word	0x40003800

080021f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_SPI_MspInit+0x74>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d124      	bne.n	800225e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_SPI_MspInit+0x78>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_SPI_MspInit+0x78>)
 800221a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221e:	61d3      	str	r3, [r2, #28]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_SPI_MspInit+0x78>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_SPI_MspInit+0x78>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_SPI_MspInit+0x78>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_SPI_MspInit+0x78>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002244:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_SPI_MspInit+0x7c>)
 800225a:	f000 fe2d 	bl	8002eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800225e:	bf00      	nop
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40003800 	.word	0x40003800
 800226c:	40021000 	.word	0x40021000
 8002270:	40010c00 	.word	0x40010c00

08002274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_MspInit+0xa4>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_MspInit+0xa4>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6193      	str	r3, [r2, #24]
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_MspInit+0xa4>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_MspInit+0xa4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_MspInit+0xa4>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_MspInit+0xa4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2101      	movs	r1, #1
 80022ae:	f06f 000b 	mvn.w	r0, #11
 80022b2:	f000 fdae 	bl	8002e12 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2101      	movs	r1, #1
 80022ba:	f06f 000a 	mvn.w	r0, #10
 80022be:	f000 fda8 	bl	8002e12 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	f06f 0009 	mvn.w	r0, #9
 80022ca:	f000 fda2 	bl	8002e12 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2101      	movs	r1, #1
 80022d2:	f06f 0004 	mvn.w	r0, #4
 80022d6:	f000 fd9c 	bl	8002e12 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2101      	movs	r1, #1
 80022de:	f06f 0003 	mvn.w	r0, #3
 80022e2:	f000 fd96 	bl	8002e12 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	f06f 0001 	mvn.w	r0, #1
 80022ee:	f000 fd90 	bl	8002e12 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_MspInit+0xa8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_MspInit+0xa8>)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <HardFault_Handler+0x4>

08002332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <MemManage_Handler+0x4>

08002338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <BusFault_Handler+0x4>

0800233e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <UsageFault_Handler+0x4>

08002344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800236c:	f000 fbe4 	bl	8002b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002378:	2004      	movs	r0, #4
 800237a:	f000 ff27 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}

08002382 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002386:	2008      	movs	r0, #8
 8002388:	f000 ff20 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002394:	2010      	movs	r0, #16
 8002396:	f000 ff19 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}

0800239e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80023a2:	2020      	movs	r0, #32
 80023a4:	f000 ff12 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80023a8:	2040      	movs	r0, #64	; 0x40
 80023aa:	f000 ff0f 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80023ae:	2080      	movs	r0, #128	; 0x80
 80023b0:	f000 ff0c 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM1_UP_IRQHandler+0x10>)
 80023be:	f002 fd0f 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000024c 	.word	0x2000024c

080023cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <TIM2_IRQHandler+0x10>)
 80023d2:	f002 fd05 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000294 	.word	0x20000294

080023e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM3_IRQHandler+0x10>)
 80023e6:	f002 fcfb 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000204 	.word	0x20000204

080023f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM4_IRQHandler+0x10>)
 80023fa:	f002 fcf1 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001bc 	.word	0x200001bc

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f003 fbd8 	bl	8005bec <__errno>
 800243c:	4602      	mov	r2, r0
 800243e:	230c      	movs	r3, #12
 8002440:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20005000 	.word	0x20005000
 8002468:	00000400 	.word	0x00000400
 800246c:	20000104 	.word	0x20000104
 8002470:	20000368 	.word	0x20000368

08002474 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800249c:	4b1f      	ldr	r3, [pc, #124]	; (800251c <MX_TIM1_Init+0x9c>)
 800249e:	4a20      	ldr	r2, [pc, #128]	; (8002520 <MX_TIM1_Init+0xa0>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 524;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <MX_TIM1_Init+0x9c>)
 80024a4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80024a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <MX_TIM1_Init+0x9c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <MX_TIM1_Init+0x9c>)
 80024b2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80024b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_TIM1_Init+0x9c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <MX_TIM1_Init+0x9c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_TIM1_Init+0x9c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ca:	4814      	ldr	r0, [pc, #80]	; (800251c <MX_TIM1_Init+0x9c>)
 80024cc:	f002 fa5a 	bl	8004984 <HAL_TIM_Base_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80024d6:	f7ff fc6d 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	4619      	mov	r1, r3
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <MX_TIM1_Init+0x9c>)
 80024e8:	f002 fe16 	bl	8005118 <HAL_TIM_ConfigClockSource>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80024f2:	f7ff fc5f 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024fe:	463b      	mov	r3, r7
 8002500:	4619      	mov	r1, r3
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <MX_TIM1_Init+0x9c>)
 8002504:	f003 f94a 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800250e:	f7ff fc51 	bl	8001db4 <Error_Handler>
  }

}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000024c 	.word	0x2000024c
 8002520:	40012c00 	.word	0x40012c00

08002524 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	463b      	mov	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 74;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_TIM2_Init+0x94>)
 800254a:	224a      	movs	r2, #74	; 0x4a
 800254c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002556:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800255a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_TIM2_Init+0x94>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002568:	4813      	ldr	r0, [pc, #76]	; (80025b8 <MX_TIM2_Init+0x94>)
 800256a:	f002 fa0b 	bl	8004984 <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002574:	f7ff fc1e 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002586:	f002 fdc7 	bl	8005118 <HAL_TIM_ConfigClockSource>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002590:	f7ff fc10 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_TIM2_Init+0x94>)
 80025a2:	f003 f8fb 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025ac:	f7ff fc02 	bl	8001db4 <Error_Handler>
  }

}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000294 	.word	0x20000294

080025bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0318 	add.w	r3, r7, #24
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025da:	463b      	mov	r3, r7
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <MX_TIM3_Init+0xf0>)
 80025e8:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <MX_TIM3_Init+0xf4>)
 80025ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <MX_TIM3_Init+0xf0>)
 80025ee:	2247      	movs	r2, #71	; 0x47
 80025f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <MX_TIM3_Init+0xf0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <MX_TIM3_Init+0xf0>)
 80025fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <MX_TIM3_Init+0xf0>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <MX_TIM3_Init+0xf0>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800260c:	4827      	ldr	r0, [pc, #156]	; (80026ac <MX_TIM3_Init+0xf0>)
 800260e:	f002 f9b9 	bl	8004984 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002618:	f7ff fbcc 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	4619      	mov	r1, r3
 8002628:	4820      	ldr	r0, [pc, #128]	; (80026ac <MX_TIM3_Init+0xf0>)
 800262a:	f002 fd75 	bl	8005118 <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002634:	f7ff fbbe 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002638:	481c      	ldr	r0, [pc, #112]	; (80026ac <MX_TIM3_Init+0xf0>)
 800263a:	f002 fa73 	bl	8004b24 <HAL_TIM_IC_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002644:	f7ff fbb6 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4619      	mov	r1, r3
 8002656:	4815      	ldr	r0, [pc, #84]	; (80026ac <MX_TIM3_Init+0xf0>)
 8002658:	f003 f8a0 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002662:	f7ff fba7 	bl	8001db4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800266a:	2301      	movs	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8002672:	2305      	movs	r3, #5
 8002674:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	2200      	movs	r2, #0
 800267a:	4619      	mov	r1, r3
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <MX_TIM3_Init+0xf0>)
 800267e:	f002 fcb7 	bl	8004ff0 <HAL_TIM_IC_ConfigChannel>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002688:	f7ff fb94 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	2204      	movs	r2, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4806      	ldr	r0, [pc, #24]	; (80026ac <MX_TIM3_Init+0xf0>)
 8002694:	f002 fcac 	bl	8004ff0 <HAL_TIM_IC_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800269e:	f7ff fb89 	bl	8001db4 <Error_Handler>
  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000204 	.word	0x20000204
 80026b0:	40000400 	.word	0x40000400

080026b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	463b      	mov	r3, r7
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_TIM4_Init+0x94>)
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <MX_TIM4_Init+0x98>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1124;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_TIM4_Init+0x94>)
 80026d8:	f240 4264 	movw	r2, #1124	; 0x464
 80026dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_TIM4_Init+0x94>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_TIM4_Init+0x94>)
 80026e6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80026ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <MX_TIM4_Init+0x94>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_TIM4_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026f8:	4813      	ldr	r0, [pc, #76]	; (8002748 <MX_TIM4_Init+0x94>)
 80026fa:	f002 f943 	bl	8004984 <HAL_TIM_Base_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002704:	f7ff fb56 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	4619      	mov	r1, r3
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <MX_TIM4_Init+0x94>)
 8002716:	f002 fcff 	bl	8005118 <HAL_TIM_ConfigClockSource>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002720:	f7ff fb48 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_TIM4_Init+0x94>)
 8002732:	f003 f833 	bl	800579c <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800273c:	f7ff fb3a 	bl	8001db4 <Error_Handler>
  }

}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200001bc 	.word	0x200001bc
 800274c:	40000800 	.word	0x40000800

08002750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a49      	ldr	r2, [pc, #292]	; (8002890 <HAL_TIM_Base_MspInit+0x140>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d114      	bne.n	800279a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002770:	4b48      	ldr	r3, [pc, #288]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a47      	ldr	r2, [pc, #284]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 8002776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b45      	ldr	r3, [pc, #276]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2103      	movs	r1, #3
 800278c:	2019      	movs	r0, #25
 800278e:	f000 fb40 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002792:	2019      	movs	r0, #25
 8002794:	f000 fb59 	bl	8002e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002798:	e076      	b.n	8002888 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	d114      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	61d3      	str	r3, [r2, #28]
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2104      	movs	r1, #4
 80027c0:	201c      	movs	r0, #28
 80027c2:	f000 fb26 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027c6:	201c      	movs	r0, #28
 80027c8:	f000 fb3f 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 80027cc:	e05c      	b.n	8002888 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_TIM_Base_MspInit+0x148>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d13e      	bne.n	8002856 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027d8:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	61d3      	str	r3, [r2, #28]
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002808:	2330      	movs	r3, #48	; 0x30
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002810:	2302      	movs	r3, #2
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4820      	ldr	r0, [pc, #128]	; (800289c <HAL_TIM_Base_MspInit+0x14c>)
 800281c:	f000 fb4c 	bl	8002eb8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_TIM_Base_MspInit+0x150>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_TIM_Base_MspInit+0x150>)
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2101      	movs	r1, #1
 8002848:	201d      	movs	r0, #29
 800284a:	f000 fae2 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800284e:	201d      	movs	r0, #29
 8002850:	f000 fafb 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 8002854:	e018      	b.n	8002888 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM4)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_TIM_Base_MspInit+0x154>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d113      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	61d3      	str	r3, [r2, #28]
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_TIM_Base_MspInit+0x144>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002878:	2200      	movs	r2, #0
 800287a:	2103      	movs	r1, #3
 800287c:	201e      	movs	r0, #30
 800287e:	f000 fac8 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002882:	201e      	movs	r0, #30
 8002884:	f000 fae1 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 8002888:	bf00      	nop
 800288a:	3730      	adds	r7, #48	; 0x30
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40021000 	.word	0x40021000
 8002898:	40000400 	.word	0x40000400
 800289c:	40010c00 	.word	0x40010c00
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40000800 	.word	0x40000800

080028a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <MX_USART1_UART_Init+0x50>)
 80028b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028ce:	220c      	movs	r2, #12
 80028d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028e0:	f002 ffcc 	bl	800587c <HAL_UART_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028ea:	f7ff fa63 	bl	8001db4 <Error_Handler>
  }

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000031c 	.word	0x2000031c
 80028f8:	40013800 	.word	0x40013800

080028fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <MX_USART3_UART_Init+0x50>)
 8002904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800290c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_USART3_UART_Init+0x4c>)
 8002934:	f002 ffa2 	bl	800587c <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800293e:	f7ff fa39 	bl	8001db4 <Error_Handler>
  }

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200002dc 	.word	0x200002dc
 800294c:	40004800 	.word	0x40004800

08002950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <HAL_UART_MspInit+0xfc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d132      	bne.n	80029d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_UART_MspInit+0x100>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a36      	ldr	r2, [pc, #216]	; (8002a50 <HAL_UART_MspInit+0x100>)
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_UART_MspInit+0x100>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_UART_MspInit+0x100>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_UART_MspInit+0x100>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_UART_MspInit+0x100>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 0318 	add.w	r3, r7, #24
 80029b2:	4619      	mov	r1, r3
 80029b4:	4827      	ldr	r0, [pc, #156]	; (8002a54 <HAL_UART_MspInit+0x104>)
 80029b6:	f000 fa7f 	bl	8002eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4821      	ldr	r0, [pc, #132]	; (8002a54 <HAL_UART_MspInit+0x104>)
 80029d0:	f000 fa72 	bl	8002eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029d4:	e036      	b.n	8002a44 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_UART_MspInit+0x108>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d131      	bne.n	8002a44 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_UART_MspInit+0x100>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_UART_MspInit+0x100>)
 80029e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_UART_MspInit+0x100>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_UART_MspInit+0x100>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_UART_MspInit+0x100>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_UART_MspInit+0x100>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 0318 	add.w	r3, r7, #24
 8002a22:	4619      	mov	r1, r3
 8002a24:	480d      	ldr	r0, [pc, #52]	; (8002a5c <HAL_UART_MspInit+0x10c>)
 8002a26:	f000 fa47 	bl	8002eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 0318 	add.w	r3, r7, #24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4807      	ldr	r0, [pc, #28]	; (8002a5c <HAL_UART_MspInit+0x10c>)
 8002a40:	f000 fa3a 	bl	8002eb8 <HAL_GPIO_Init>
}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40004800 	.word	0x40004800
 8002a5c:	40010c00 	.word	0x40010c00

08002a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a62:	e003      	b.n	8002a6c <LoopCopyDataInit>

08002a64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a6a:	3104      	adds	r1, #4

08002a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a6c:	480a      	ldr	r0, [pc, #40]	; (8002a98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a74:	d3f6      	bcc.n	8002a64 <CopyDataInit>
  ldr r2, =_sbss
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a78:	e002      	b.n	8002a80 <LoopFillZerobss>

08002a7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a7c:	f842 3b04 	str.w	r3, [r2], #4

08002a80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a84:	d3f9      	bcc.n	8002a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a86:	f7ff fcf5 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f003 f8b5 	bl	8005bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a8e:	f7fd fc25 	bl	80002dc <main>
  bx lr
 8002a92:	4770      	bx	lr
  ldr r3, =_sidata
 8002a94:	0800688c 	.word	0x0800688c
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a9c:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 8002aa0:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 8002aa4:	20000364 	.word	0x20000364

08002aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC1_2_IRQHandler>
	...

08002aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_Init+0x28>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_Init+0x28>)
 8002ab6:	f043 0310 	orr.w	r3, r3, #16
 8002aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abc:	2003      	movs	r0, #3
 8002abe:	f000 f99d 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f000 f808 	bl	8002ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac8:	f7ff fbd4 	bl	8002274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_InitTick+0x54>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_InitTick+0x58>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f9c3 	bl	8002e82 <HAL_SYSTICK_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00e      	b.n	8002b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d80a      	bhi.n	8002b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f000 f97d 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <HAL_InitTick+0x5c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000030 	.word	0x20000030
 8002b30:	20000038 	.word	0x20000038
 8002b34:	20000034 	.word	0x20000034

08002b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_IncTick+0x1c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_IncTick+0x20>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4a03      	ldr	r2, [pc, #12]	; (8002b58 <HAL_IncTick+0x20>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20000038 	.word	0x20000038
 8002b58:	2000035c 	.word	0x2000035c

08002b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <HAL_GetTick+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	2000035c 	.word	0x2000035c

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_Delay+0x40>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffe0 	bl	8002b5c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000038 	.word	0x20000038

08002bb4 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_GetREVID+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e0042000 	.word	0xe0042000

08002bcc <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_GetDEVID+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	e0042000 	.word	0xe0042000

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4906      	ldr	r1, [pc, #24]	; (8002c7c <__NVIC_EnableIRQ+0x34>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db10      	blt.n	8002cb4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <__NVIC_DisableIRQ+0x40>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	3320      	adds	r3, #32
 8002ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cb0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0c      	blt.n	8002cf0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <__NVIC_ClearPendingIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	3360      	adds	r3, #96	; 0x60
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff90 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff feed 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff02 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff90 	bl	8002d54 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5f 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fef5 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff03 	bl	8002c80 <__NVIC_DisableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff94 	bl	8002db8 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff0b 	bl	8002cc4 <__NVIC_ClearPendingIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b08b      	sub	sp, #44	; 0x2c
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	e127      	b.n	800311c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f040 8116 	bne.w	8003116 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b12      	cmp	r3, #18
 8002ef0:	d034      	beq.n	8002f5c <HAL_GPIO_Init+0xa4>
 8002ef2:	2b12      	cmp	r3, #18
 8002ef4:	d80d      	bhi.n	8002f12 <HAL_GPIO_Init+0x5a>
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d02b      	beq.n	8002f52 <HAL_GPIO_Init+0x9a>
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d804      	bhi.n	8002f08 <HAL_GPIO_Init+0x50>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d031      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d01c      	beq.n	8002f40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f06:	e048      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d043      	beq.n	8002f94 <HAL_GPIO_Init+0xdc>
 8002f0c:	2b11      	cmp	r3, #17
 8002f0e:	d01b      	beq.n	8002f48 <HAL_GPIO_Init+0x90>
          break;
 8002f10:	e043      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f12:	4a89      	ldr	r2, [pc, #548]	; (8003138 <HAL_GPIO_Init+0x280>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d026      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
 8002f18:	4a87      	ldr	r2, [pc, #540]	; (8003138 <HAL_GPIO_Init+0x280>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d806      	bhi.n	8002f2c <HAL_GPIO_Init+0x74>
 8002f1e:	4a87      	ldr	r2, [pc, #540]	; (800313c <HAL_GPIO_Init+0x284>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d020      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
 8002f24:	4a86      	ldr	r2, [pc, #536]	; (8003140 <HAL_GPIO_Init+0x288>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01d      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
          break;
 8002f2a:	e036      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f2c:	4a85      	ldr	r2, [pc, #532]	; (8003144 <HAL_GPIO_Init+0x28c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
 8002f32:	4a85      	ldr	r2, [pc, #532]	; (8003148 <HAL_GPIO_Init+0x290>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d016      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
 8002f38:	4a84      	ldr	r2, [pc, #528]	; (800314c <HAL_GPIO_Init+0x294>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0xae>
          break;
 8002f3e:	e02c      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	623b      	str	r3, [r7, #32]
          break;
 8002f46:	e028      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	623b      	str	r3, [r7, #32]
          break;
 8002f50:	e023      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	3308      	adds	r3, #8
 8002f58:	623b      	str	r3, [r7, #32]
          break;
 8002f5a:	e01e      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	330c      	adds	r3, #12
 8002f62:	623b      	str	r3, [r7, #32]
          break;
 8002f64:	e019      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	623b      	str	r3, [r7, #32]
          break;
 8002f72:	e012      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	611a      	str	r2, [r3, #16]
          break;
 8002f86:	e008      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	615a      	str	r2, [r3, #20]
          break;
 8002f92:	e002      	b.n	8002f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f94:	2300      	movs	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
          break;
 8002f98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2bff      	cmp	r3, #255	; 0xff
 8002f9e:	d801      	bhi.n	8002fa4 <HAL_GPIO_Init+0xec>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	e001      	b.n	8002fa8 <HAL_GPIO_Init+0xf0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2bff      	cmp	r3, #255	; 0xff
 8002fae:	d802      	bhi.n	8002fb6 <HAL_GPIO_Init+0xfe>
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x104>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	3b08      	subs	r3, #8
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	401a      	ands	r2, r3
 8002fce:	6a39      	ldr	r1, [r7, #32]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8096 	beq.w	8003116 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fea:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_GPIO_Init+0x298>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4a58      	ldr	r2, [pc, #352]	; (8003150 <HAL_GPIO_Init+0x298>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6193      	str	r3, [r2, #24]
 8002ff6:	4b56      	ldr	r3, [pc, #344]	; (8003150 <HAL_GPIO_Init+0x298>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003002:	4a54      	ldr	r2, [pc, #336]	; (8003154 <HAL_GPIO_Init+0x29c>)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4b      	ldr	r2, [pc, #300]	; (8003158 <HAL_GPIO_Init+0x2a0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_GPIO_Init+0x19e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4a      	ldr	r2, [pc, #296]	; (800315c <HAL_GPIO_Init+0x2a4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00d      	beq.n	8003052 <HAL_GPIO_Init+0x19a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a49      	ldr	r2, [pc, #292]	; (8003160 <HAL_GPIO_Init+0x2a8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <HAL_GPIO_Init+0x196>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a48      	ldr	r2, [pc, #288]	; (8003164 <HAL_GPIO_Init+0x2ac>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <HAL_GPIO_Init+0x192>
 8003046:	2303      	movs	r3, #3
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x1a0>
 800304a:	2304      	movs	r3, #4
 800304c:	e004      	b.n	8003058 <HAL_GPIO_Init+0x1a0>
 800304e:	2302      	movs	r3, #2
 8003050:	e002      	b.n	8003058 <HAL_GPIO_Init+0x1a0>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_GPIO_Init+0x1a0>
 8003056:	2300      	movs	r3, #0
 8003058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305a:	f002 0203 	and.w	r2, r2, #3
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	4093      	lsls	r3, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003068:	493a      	ldr	r1, [pc, #232]	; (8003154 <HAL_GPIO_Init+0x29c>)
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003082:	4b39      	ldr	r3, [pc, #228]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4938      	ldr	r1, [pc, #224]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
 800308e:	e006      	b.n	800309e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	43db      	mvns	r3, r3
 8003098:	4933      	ldr	r1, [pc, #204]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 800309a:	4013      	ands	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	492e      	ldr	r1, [pc, #184]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
 80030b6:	e006      	b.n	80030c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	43db      	mvns	r3, r3
 80030c0:	4929      	ldr	r1, [pc, #164]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030d2:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	4924      	ldr	r1, [pc, #144]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
 80030de:	e006      	b.n	80030ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	491f      	ldr	r1, [pc, #124]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	491a      	ldr	r1, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	60cb      	str	r3, [r1, #12]
 8003106:	e006      	b.n	8003116 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4915      	ldr	r1, [pc, #84]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8003112:	4013      	ands	r3, r2
 8003114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f aed0 	bne.w	8002ecc <HAL_GPIO_Init+0x14>
  }
}
 800312c:	bf00      	nop
 800312e:	372c      	adds	r7, #44	; 0x2c
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	10210000 	.word	0x10210000
 800313c:	10110000 	.word	0x10110000
 8003140:	10120000 	.word	0x10120000
 8003144:	10310000 	.word	0x10310000
 8003148:	10320000 	.word	0x10320000
 800314c:	10220000 	.word	0x10220000
 8003150:	40021000 	.word	0x40021000
 8003154:	40010000 	.word	0x40010000
 8003158:	40010800 	.word	0x40010800
 800315c:	40010c00 	.word	0x40010c00
 8003160:	40011000 	.word	0x40011000
 8003164:	40011400 	.word	0x40011400
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	e001      	b.n	800318e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	807b      	strh	r3, [r7, #2]
 80031a6:	4613      	mov	r3, r2
 80031a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031aa:	787b      	ldrb	r3, [r7, #1]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031b6:	e003      	b.n	80031c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	041a      	lsls	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fec6 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	420e0020 	.word	0x420e0020

08003214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e26c      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8087 	beq.w	8003342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003234:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b04      	cmp	r3, #4
 800323e:	d00c      	beq.n	800325a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003240:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d112      	bne.n	8003272 <HAL_RCC_OscConfig+0x5e>
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d10b      	bne.n	8003272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d06c      	beq.n	8003340 <HAL_RCC_OscConfig+0x12c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d168      	bne.n	8003340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e246      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x76>
 800327c:	4b80      	ldr	r3, [pc, #512]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a7f      	ldr	r2, [pc, #508]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e02e      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x98>
 8003292:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7a      	ldr	r2, [pc, #488]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b78      	ldr	r3, [pc, #480]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a77      	ldr	r2, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e01d      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0xbc>
 80032b6:	4b72      	ldr	r3, [pc, #456]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a71      	ldr	r2, [pc, #452]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 80032d0:	4b6b      	ldr	r3, [pc, #428]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a67      	ldr	r2, [pc, #412]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7ff fc34 	bl	8002b5c <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7ff fc30 	bl	8002b5c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1fa      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0xe4>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7ff fc20 	bl	8002b5c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7ff fc1c 	bl	8002b5c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1e6      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x10c>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d063      	beq.n	8003416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334e:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800335a:	4b49      	ldr	r3, [pc, #292]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d11c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x18c>
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d116      	bne.n	80033a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_RCC_OscConfig+0x176>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e1ba      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4939      	ldr	r1, [pc, #228]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	e03a      	b.n	8003416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7ff fbd5 	bl	8002b5c <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7ff fbd1 	bl	8002b5c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e19b      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4927      	ldr	r1, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
 80033e8:	e015      	b.n	8003416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7ff fbb4 	bl	8002b5c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7ff fbb0 	bl	8002b5c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e17a      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03a      	beq.n	8003498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d019      	beq.n	800345e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7ff fb94 	bl	8002b5c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003438:	f7ff fb90 	bl	8002b5c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e15a      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003456:	2001      	movs	r0, #1
 8003458:	f000 fada 	bl	8003a10 <RCC_Delay>
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003464:	f7ff fb7a 	bl	8002b5c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346a:	e00f      	b.n	800348c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346c:	f7ff fb76 	bl	8002b5c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d908      	bls.n	800348c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e140      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	42420000 	.word	0x42420000
 8003488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348c:	4b9e      	ldr	r3, [pc, #632]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e9      	bne.n	800346c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a6 	beq.w	80035f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034aa:	4b97      	ldr	r3, [pc, #604]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b94      	ldr	r3, [pc, #592]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a93      	ldr	r2, [pc, #588]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	61d3      	str	r3, [r2, #28]
 80034c2:	4b91      	ldr	r3, [pc, #580]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b8e      	ldr	r3, [pc, #568]	; (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d118      	bne.n	8003510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b8b      	ldr	r3, [pc, #556]	; (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a8a      	ldr	r2, [pc, #552]	; (800370c <HAL_RCC_OscConfig+0x4f8>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ea:	f7ff fb37 	bl	8002b5c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f2:	f7ff fb33 	bl	8002b5c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0fd      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x4f8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x312>
 8003518:	4b7b      	ldr	r3, [pc, #492]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4a7a      	ldr	r2, [pc, #488]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6213      	str	r3, [r2, #32]
 8003524:	e02d      	b.n	8003582 <HAL_RCC_OscConfig+0x36e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x334>
 800352e:	4b76      	ldr	r3, [pc, #472]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a75      	ldr	r2, [pc, #468]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6213      	str	r3, [r2, #32]
 800353a:	4b73      	ldr	r3, [pc, #460]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a72      	ldr	r2, [pc, #456]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	e01c      	b.n	8003582 <HAL_RCC_OscConfig+0x36e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x356>
 8003550:	4b6d      	ldr	r3, [pc, #436]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a6c      	ldr	r2, [pc, #432]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a69      	ldr	r2, [pc, #420]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e00b      	b.n	8003582 <HAL_RCC_OscConfig+0x36e>
 800356a:	4b67      	ldr	r3, [pc, #412]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a66      	ldr	r2, [pc, #408]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b64      	ldr	r3, [pc, #400]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a63      	ldr	r2, [pc, #396]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d015      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7ff fae7 	bl	8002b5c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7ff fae3 	bl	8002b5c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0ab      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	4b57      	ldr	r3, [pc, #348]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ee      	beq.n	8003592 <HAL_RCC_OscConfig+0x37e>
 80035b4:	e014      	b.n	80035e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7ff fad1 	bl	8002b5c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7ff facd 	bl	8002b5c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e095      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d4:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ee      	bne.n	80035be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d105      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	4b48      	ldr	r3, [pc, #288]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a47      	ldr	r2, [pc, #284]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8081 	beq.w	80036fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035fc:	4b42      	ldr	r3, [pc, #264]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d061      	beq.n	80036cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d146      	bne.n	800369e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_OscConfig+0x4fc>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7ff faa1 	bl	8002b5c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361e:	f7ff fa9d 	bl	8002b5c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e067      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003630:	4b35      	ldr	r3, [pc, #212]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d108      	bne.n	8003658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003646:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	492d      	ldr	r1, [pc, #180]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a19      	ldr	r1, [r3, #32]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	430b      	orrs	r3, r1
 800366a:	4927      	ldr	r1, [pc, #156]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_RCC_OscConfig+0x4fc>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7ff fa71 	bl	8002b5c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367e:	f7ff fa6d 	bl	8002b5c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e037      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x46a>
 800369c:	e02f      	b.n	80036fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <HAL_RCC_OscConfig+0x4fc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7ff fa5a 	bl	8002b5c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7ff fa56 	bl	8002b5c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e020      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x498>
 80036ca:	e018      	b.n	80036fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e013      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
 8003710:	42420060 	.word	0x42420060

08003714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4965      	ldr	r1, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800377a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7ff f9aa 	bl	8002b5c <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7ff f9a6 	bl	8002b5c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4601      	mov	r1, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f908 	bl	8002ad8 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08006838 	.word	0x08006838
 80038e0:	20000030 	.word	0x20000030
 80038e4:	20000034 	.word	0x20000034

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b490      	push	{r4, r7}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038f0:	1d3c      	adds	r4, r7, #4
 80038f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038f8:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d002      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x40>
 8003922:	2b08      	cmp	r3, #8
 8003924:	d003      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x46>
 8003926:	e02d      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800392a:	623b      	str	r3, [r7, #32]
      break;
 800392c:	e02d      	b.n	800398a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	0c9b      	lsrs	r3, r3, #18
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800393a:	4413      	add	r3, r2
 800393c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003940:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0c5b      	lsrs	r3, r3, #17
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800395a:	4413      	add	r3, r2
 800395c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003966:	fb02 f203 	mul.w	r2, r2, r3
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	e004      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	623b      	str	r3, [r7, #32]
      break;
 8003982:	e002      	b.n	800398a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003986:	623b      	str	r3, [r7, #32]
      break;
 8003988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398a:	6a3b      	ldr	r3, [r7, #32]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	bc90      	pop	{r4, r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	08006810 	.word	0x08006810
 800399c:	08006820 	.word	0x08006820
 80039a0:	40021000 	.word	0x40021000
 80039a4:	007a1200 	.word	0x007a1200
 80039a8:	003d0900 	.word	0x003d0900

080039ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b0:	4b02      	ldr	r3, [pc, #8]	; (80039bc <HAL_RCC_GetHCLKFreq+0x10>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	20000030 	.word	0x20000030

080039c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039c4:	f7ff fff2 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039c8:	4601      	mov	r1, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08006848 	.word	0x08006848

080039e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039ec:	f7ff ffde 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039f0:	4601      	mov	r1, r0
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	0adb      	lsrs	r3, r3, #11
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4a03      	ldr	r2, [pc, #12]	; (8003a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fe:	5cd3      	ldrb	r3, [r2, r3]
 8003a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08006848 	.word	0x08006848

08003a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <RCC_Delay+0x34>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <RCC_Delay+0x38>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	0a5b      	lsrs	r3, r3, #9
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a2c:	bf00      	nop
  }
  while (Delay --);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e5a      	subs	r2, r3, #1
 8003a32:	60fa      	str	r2, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f9      	bne.n	8003a2c <RCC_Delay+0x1c>
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000030 	.word	0x20000030
 8003a48:	10624dd3 	.word	0x10624dd3

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d07d      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10d      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	61d3      	str	r3, [r2, #28]
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d118      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aac:	f7ff f856 	bl	8002b5c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7ff f852 	bl	8002b5c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e06d      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d02e      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d027      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af0:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003afa:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b06:	4a29      	ldr	r2, [pc, #164]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d014      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7ff f821 	bl	8002b5c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7ff f81d 	bl	8002b5c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e036      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4917      	ldr	r1, [pc, #92]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4a13      	ldr	r2, [pc, #76]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	490b      	ldr	r1, [pc, #44]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4904      	ldr	r1, [pc, #16]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42420440 	.word	0x42420440

08003bb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b08d      	sub	sp, #52	; 0x34
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bc0:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bc2:	f107 040c 	add.w	r4, r7, #12
 8003bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	2300      	movs	r3, #0
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d07f      	beq.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d002      	beq.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d048      	beq.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003bf4:	e08b      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003bfc:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07f      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	0c9b      	lsrs	r3, r3, #18
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c14:	4413      	add	r3, r2
 8003c16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c1a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	0c5b      	lsrs	r3, r3, #17
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c34:	4413      	add	r3, r2
 8003c36:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c46:	4a37      	ldr	r2, [pc, #220]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	4a33      	ldr	r2, [pc, #204]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6e:	d102      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c74:	e048      	b.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c84:	e040      	b.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c96:	d108      	bne.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca8:	e01f      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d109      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003cc2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd4:	d11a      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003ce2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ce8:	e010      	b.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003cea:	e00f      	b.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cec:	f7ff fe7c 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	0b9b      	lsrs	r3, r3, #14
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d0c:	bf00      	nop
    }
  }
  return (frequency);
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3734      	adds	r7, #52	; 0x34
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd90      	pop	{r4, r7, pc}
 8003d18:	08006824 	.word	0x08006824
 8003d1c:	08006834 	.word	0x08006834
 8003d20:	40021000 	.word	0x40021000
 8003d24:	007a1200 	.word	0x007a1200
 8003d28:	003d0900 	.word	0x003d0900
 8003d2c:	aaaaaaab 	.word	0xaaaaaaab

08003d30 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e084      	b.n	8003e50 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	7c5b      	ldrb	r3, [r3, #17]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe f9f2 	bl	8002140 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9c8 	bl	80040f8 <HAL_RTC_WaitForSynchro>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2204      	movs	r2, #4
 8003d72:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e06b      	b.n	8003e50 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fa81 	bl	8004280 <RTC_EnterInitMode>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e060      	b.n	8003e50 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0207 	bic.w	r2, r2, #7
 8003d9c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <HAL_RTC_Init+0x128>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <HAL_RTC_Init+0x128>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003db2:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RTC_Init+0x128>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4926      	ldr	r1, [pc, #152]	; (8003e58 <HAL_RTC_Init+0x128>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e00e      	b.n	8003df4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f7ff feee 	bl	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ddc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2204      	movs	r2, #4
 8003de8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e030      	b.n	8003e50 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 010f 	bic.w	r1, r3, #15
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0c1a      	lsrs	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	b291      	uxth	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa55 	bl	80042d0 <RTC_ExitInitMode>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e00c      	b.n	8003e50 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40006c00 	.word	0x40006c00

08003e5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RTC_SetTime+0x20>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e080      	b.n	8003f82 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	7c1b      	ldrb	r3, [r3, #16]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_RTC_SetTime+0x30>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e07a      	b.n	8003f82 <HAL_RTC_SetTime+0x126>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2202      	movs	r2, #2
 8003e96:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d113      	bne.n	8003ec6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ea8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003eba:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ec0:	4413      	add	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e01e      	b.n	8003f04 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fa28 	bl	8004320 <RTC_Bcd2ToByte>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ed8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fa1d 	bl	8004320 <RTC_Bcd2ToByte>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ef2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	789b      	ldrb	r3, [r3, #2]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa11 	bl	8004320 <RTC_Bcd2ToByte>
 8003efe:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f00:	4423      	add	r3, r4
 8003f02:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f953 	bl	80041b2 <RTC_WriteTimeCounter>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2204      	movs	r2, #4
 8003f16:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e02f      	b.n	8003f82 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0205 	bic.w	r2, r2, #5
 8003f30:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f964 	bl	8004200 <RTC_ReadAlarmCounter>
 8003f38:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d018      	beq.n	8003f74 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d214      	bcs.n	8003f74 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003f50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f54:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f96a 	bl	8004232 <RTC_WriteAlarmCounter>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2204      	movs	r2, #4
 8003f68:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e006      	b.n	8003f82 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}
	...

08003f8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RTC_SetDate+0x24>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e097      	b.n	80040e4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	7c1b      	ldrb	r3, [r3, #16]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_RTC_SetDate+0x34>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e091      	b.n	80040e4 <HAL_RTC_SetDate+0x158>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	78da      	ldrb	r2, [r3, #3]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	785a      	ldrb	r2, [r3, #1]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	789a      	ldrb	r2, [r3, #2]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	739a      	strb	r2, [r3, #14]
 8003fea:	e01a      	b.n	8004022 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	78db      	ldrb	r3, [r3, #3]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f995 	bl	8004320 <RTC_Bcd2ToByte>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f98c 	bl	8004320 <RTC_Bcd2ToByte>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	789b      	ldrb	r3, [r3, #2]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f983 	bl	8004320 <RTC_Bcd2ToByte>
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	7bdb      	ldrb	r3, [r3, #15]
 8004026:	4618      	mov	r0, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	7b59      	ldrb	r1, [r3, #13]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	7b9b      	ldrb	r3, [r3, #14]
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f993 	bl	800435c <RTC_WeekDayNum>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	7b1a      	ldrb	r2, [r3, #12]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f883 	bl	8004152 <RTC_ReadTimeCounter>
 800404c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4a26      	ldr	r2, [pc, #152]	; (80040ec <HAL_RTC_SetDate+0x160>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0adb      	lsrs	r3, r3, #11
 8004058:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b18      	cmp	r3, #24
 800405e:	d93a      	bls.n	80040d6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_RTC_SetDate+0x164>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_RTC_SetDate+0x168>)
 800406c:	fb02 f303 	mul.w	r3, r2, r3
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004076:	69f9      	ldr	r1, [r7, #28]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f89a 	bl	80041b2 <RTC_WriteTimeCounter>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e027      	b.n	80040e4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f8b3 	bl	8004200 <RTC_ReadAlarmCounter>
 800409a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d018      	beq.n	80040d6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d214      	bcs.n	80040d6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040b6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040b8:	69b9      	ldr	r1, [r7, #24]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f8b9 	bl	8004232 <RTC_WriteAlarmCounter>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2204      	movs	r2, #4
 80040ca:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e006      	b.n	80040e4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	91a2b3c5 	.word	0x91a2b3c5
 80040f0:	aaaaaaab 	.word	0xaaaaaaab
 80040f4:	00015180 	.word	0x00015180

080040f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e01d      	b.n	800414a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0208 	bic.w	r2, r2, #8
 800411c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800411e:	f7fe fd1d 	bl	8002b5c <HAL_GetTick>
 8004122:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004124:	e009      	b.n	800413a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004126:	f7fe fd19 	bl	8002b5c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004134:	d901      	bls.n	800413a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e007      	b.n	800414a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ee      	beq.n	8004126 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004152:	b480      	push	{r7}
 8004154:	b087      	sub	sp, #28
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	827b      	strh	r3, [r7, #18]
 800415e:	2300      	movs	r3, #0
 8004160:	823b      	strh	r3, [r7, #16]
 8004162:	2300      	movs	r3, #0
 8004164:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004182:	8a7a      	ldrh	r2, [r7, #18]
 8004184:	8a3b      	ldrh	r3, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d008      	beq.n	800419c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800418a:	8a3b      	ldrh	r3, [r7, #16]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	b29b      	uxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e004      	b.n	80041a6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800419c:	8a7b      	ldrh	r3, [r7, #18]
 800419e:	041a      	lsls	r2, r3, #16
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80041a6:	697b      	ldr	r3, [r7, #20]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f85d 	bl	8004280 <RTC_EnterInitMode>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e011      	b.n	80041f6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	0c12      	lsrs	r2, r2, #16
 80041da:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	b292      	uxth	r2, r2
 80041e4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f872 	bl	80042d0 <RTC_ExitInitMode>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	81fb      	strh	r3, [r7, #14]
 800420c:	2300      	movs	r3, #0
 800420e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004220:	89fb      	ldrh	r3, [r7, #14]
 8004222:	041a      	lsls	r2, r3, #16
 8004224:	89bb      	ldrh	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f81d 	bl	8004280 <RTC_EnterInitMode>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e011      	b.n	8004276 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	0c12      	lsrs	r2, r2, #16
 800425a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b292      	uxth	r2, r2
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f832 	bl	80042d0 <RTC_ExitInitMode>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800428c:	f7fe fc66 	bl	8002b5c <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004292:	e009      	b.n	80042a8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004294:	f7fe fc62 	bl	8002b5c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a2:	d901      	bls.n	80042a8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e00f      	b.n	80042c8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ee      	beq.n	8004294 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0210 	orr.w	r2, r2, #16
 80042c4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0210 	bic.w	r2, r2, #16
 80042ea:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042ec:	f7fe fc36 	bl	8002b5c <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042f2:	e009      	b.n	8004308 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042f4:	f7fe fc32 	bl	8002b5c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004302:	d901      	bls.n	8004308 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e007      	b.n	8004318 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ee      	beq.n	80042f4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	4413      	add	r3, r2
 800434e:	b2db      	uxtb	r3, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
	...

0800435c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
 8004368:	4613      	mov	r3, r2
 800436a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800437a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d82d      	bhi.n	80043de <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	4613      	mov	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <RTC_WeekDayNum+0xe4>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	085a      	lsrs	r2, r3, #1
 8004396:	78bb      	ldrb	r3, [r7, #2]
 8004398:	441a      	add	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	441a      	add	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	4926      	ldr	r1, [pc, #152]	; (8004444 <RTC_WeekDayNum+0xe8>)
 80043ac:	fba1 1303 	umull	r1, r3, r1, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4922      	ldr	r1, [pc, #136]	; (8004444 <RTC_WeekDayNum+0xe8>)
 80043ba:	fba1 1303 	umull	r1, r3, r1, r3
 80043be:	09db      	lsrs	r3, r3, #7
 80043c0:	4413      	add	r3, r2
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <RTC_WeekDayNum+0xec>)
 80043c6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ca:	1ad1      	subs	r1, r2, r3
 80043cc:	0849      	lsrs	r1, r1, #1
 80043ce:	440b      	add	r3, r1
 80043d0:	0899      	lsrs	r1, r3, #2
 80043d2:	460b      	mov	r3, r1
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	1a5b      	subs	r3, r3, r1
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e029      	b.n	8004432 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	4a15      	ldr	r2, [pc, #84]	; (8004440 <RTC_WeekDayNum+0xe4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	085a      	lsrs	r2, r3, #1
 80043f2:	78bb      	ldrb	r3, [r7, #2]
 80043f4:	441a      	add	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	441a      	add	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4910      	ldr	r1, [pc, #64]	; (8004444 <RTC_WeekDayNum+0xe8>)
 8004404:	fba1 1303 	umull	r1, r3, r1, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	490d      	ldr	r1, [pc, #52]	; (8004444 <RTC_WeekDayNum+0xe8>)
 8004410:	fba1 1303 	umull	r1, r3, r1, r3
 8004414:	09db      	lsrs	r3, r3, #7
 8004416:	4413      	add	r3, r2
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <RTC_WeekDayNum+0xec>)
 800441c:	fba3 1302 	umull	r1, r3, r3, r2
 8004420:	1ad1      	subs	r1, r2, r3
 8004422:	0849      	lsrs	r1, r1, #1
 8004424:	440b      	add	r3, r1
 8004426:	0899      	lsrs	r1, r3, #2
 8004428:	460b      	mov	r3, r1
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	1a5b      	subs	r3, r3, r1
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	b2db      	uxtb	r3, r3
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	38e38e39 	.word	0x38e38e39
 8004444:	51eb851f 	.word	0x51eb851f
 8004448:	24924925 	.word	0x24924925

0800444c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <HAL_RTCEx_BKUPWrite+0x30>)
 800445e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4413      	add	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	b292      	uxth	r2, r2
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	40006c00 	.word	0x40006c00

08004480 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RTCEx_BKUPRead+0x34>)
 8004494:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80044a8:	68bb      	ldr	r3, [r7, #8]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40006c00 	.word	0x40006c00

080044b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e076      	b.n	80045b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044da:	d009      	beq.n	80044f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
 80044e2:	e005      	b.n	80044f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd fe72 	bl	80021f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	ea42 0103 	orr.w	r1, r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	0c1a      	lsrs	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f002 0204 	and.w	r2, r2, #4
 8004596:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_Transmit+0x22>
 80045de:	2302      	movs	r3, #2
 80045e0:	e126      	b.n	8004830 <HAL_SPI_Transmit+0x270>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ea:	f7fe fab7 	bl	8002b5c <HAL_GetTick>
 80045ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d002      	beq.n	8004606 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004600:	2302      	movs	r3, #2
 8004602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004604:	e10b      	b.n	800481e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_Transmit+0x52>
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004616:	e102      	b.n	800481e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2203      	movs	r2, #3
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465e:	d10f      	bne.n	8004680 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800467e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d007      	beq.n	800469e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a6:	d14b      	bne.n	8004740 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_SPI_Transmit+0xf6>
 80046b0:	8afb      	ldrh	r3, [r7, #22]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d13e      	bne.n	8004734 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046da:	e02b      	b.n	8004734 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d112      	bne.n	8004710 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	86da      	strh	r2, [r3, #54]	; 0x36
 800470e:	e011      	b.n	8004734 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004710:	f7fe fa24 	bl	8002b5c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d803      	bhi.n	8004728 <HAL_SPI_Transmit+0x168>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d102      	bne.n	800472e <HAL_SPI_Transmit+0x16e>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004732:	e074      	b.n	800481e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1ce      	bne.n	80046dc <HAL_SPI_Transmit+0x11c>
 800473e:	e04c      	b.n	80047da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_SPI_Transmit+0x18e>
 8004748:	8afb      	ldrh	r3, [r7, #22]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d140      	bne.n	80047d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004774:	e02c      	b.n	80047d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d113      	bne.n	80047ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80047aa:	e011      	b.n	80047d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ac:	f7fe f9d6 	bl	8002b5c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d803      	bhi.n	80047c4 <HAL_SPI_Transmit+0x204>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d102      	bne.n	80047ca <HAL_SPI_Transmit+0x20a>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047ce:	e026      	b.n	800481e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1cd      	bne.n	8004776 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f8b2 	bl	8004948 <SPI_EndRxTxTransaction>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e000      	b.n	800481e <HAL_SPI_Transmit+0x25e>
  }

error:
 800481c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800482e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004848:	f7fe f988 	bl	8002b5c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	4413      	add	r3, r2
 8004856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004858:	f7fe f980 	bl	8002b5c <HAL_GetTick>
 800485c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800485e:	4b39      	ldr	r3, [pc, #228]	; (8004944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	015b      	lsls	r3, r3, #5
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800486e:	e054      	b.n	800491a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d050      	beq.n	800491a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004878:	f7fe f970 	bl	8002b5c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d902      	bls.n	800488e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d13d      	bne.n	800490a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800489c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a6:	d111      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b0:	d004      	beq.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d107      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d4:	d10f      	bne.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e017      	b.n	800493a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3b01      	subs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	429a      	cmp	r2, r3
 8004936:	d19b      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000030 	.word	0x20000030

08004948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff ff6a 	bl	8004838 <SPI_WaitFlagStateUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e000      	b.n	800497c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e041      	b.n	8004a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fd fed0 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f000 fcc0 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d001      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e03a      	b.n	8004ab2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_TIM_Base_Start_IT+0x98>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x58>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d009      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x58>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x58>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d111      	bne.n	8004aa0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d010      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9e:	e007      	b.n	8004ab0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800

08004ac8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <HAL_TIM_Base_Stop_IT+0x48>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	f240 4344 	movw	r3, #1092	; 0x444
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_Base_Stop_IT+0x48>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e041      	b.n	8004bba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f839 	bl	8004bc2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f000 fbf0 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_IC_Start_IT+0x1a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e013      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x42>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_IC_Start_IT+0x2a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e00b      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x42>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_IC_Start_IT+0x3a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	e003      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x42>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d104      	bne.n	8004c28 <HAL_TIM_IC_Start_IT+0x54>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e013      	b.n	8004c50 <HAL_TIM_IC_Start_IT+0x7c>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d104      	bne.n	8004c38 <HAL_TIM_IC_Start_IT+0x64>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e00b      	b.n	8004c50 <HAL_TIM_IC_Start_IT+0x7c>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d104      	bne.n	8004c48 <HAL_TIM_IC_Start_IT+0x74>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e003      	b.n	8004c50 <HAL_TIM_IC_Start_IT+0x7c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d102      	bne.n	8004c5e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c58:	7bbb      	ldrb	r3, [r7, #14]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d001      	beq.n	8004c62 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0b3      	b.n	8004dca <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_IC_Start_IT+0x9e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c70:	e013      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0xc6>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_IC_Start_IT+0xae>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c80:	e00b      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0xc6>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_IC_Start_IT+0xbe>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c90:	e003      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0xc6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_IC_Start_IT+0xd6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	e013      	b.n	8004cd2 <HAL_TIM_IC_Start_IT+0xfe>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_IC_Start_IT+0xe6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb8:	e00b      	b.n	8004cd2 <HAL_TIM_IC_Start_IT+0xfe>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_IC_Start_IT+0xf6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc8:	e003      	b.n	8004cd2 <HAL_TIM_IC_Start_IT+0xfe>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b0c      	cmp	r3, #12
 8004cd6:	d841      	bhi.n	8004d5c <HAL_TIM_IC_Start_IT+0x188>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <HAL_TIM_IC_Start_IT+0x10c>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d5d 	.word	0x08004d5d
 8004ce8:	08004d5d 	.word	0x08004d5d
 8004cec:	08004d5d 	.word	0x08004d5d
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004d5d 	.word	0x08004d5d
 8004cfc:	08004d5d 	.word	0x08004d5d
 8004d00:	08004d39 	.word	0x08004d39
 8004d04:	08004d5d 	.word	0x08004d5d
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004d5d 	.word	0x08004d5d
 8004d10:	08004d4b 	.word	0x08004d4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0202 	orr.w	r2, r2, #2
 8004d22:	60da      	str	r2, [r3, #12]
      break;
 8004d24:	e01b      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0204 	orr.w	r2, r2, #4
 8004d34:	60da      	str	r2, [r3, #12]
      break;
 8004d36:	e012      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	60da      	str	r2, [r3, #12]
      break;
 8004d48:	e009      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0210 	orr.w	r2, r2, #16
 8004d58:	60da      	str	r2, [r3, #12]
      break;
 8004d5a:	e000      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004d5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2201      	movs	r2, #1
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fcf3 	bl	8005752 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_TIM_IC_Start_IT+0x200>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_TIM_IC_Start_IT+0x1c0>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d009      	beq.n	8004d94 <HAL_TIM_IC_Start_IT+0x1c0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <HAL_TIM_IC_Start_IT+0x204>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_TIM_IC_Start_IT+0x1c0>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <HAL_TIM_IC_Start_IT+0x208>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d111      	bne.n	8004db8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d010      	beq.n	8004dc8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	e007      	b.n	8004dc8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800

08004de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0202 	mvn.w	r2, #2
 8004e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fe2c 	bl	8001a80 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa70 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa76 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0204 	mvn.w	r2, #4
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fc fe02 	bl	8001a80 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa46 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fa4c 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0208 	mvn.w	r2, #8
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc fdd8 	bl	8001a80 <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa1c 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa22 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0210 	mvn.w	r2, #16
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc fdae 	bl	8001a80 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9f2 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f9f8 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0201 	mvn.w	r2, #1
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fb fdee 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b80      	cmp	r3, #128	; 0x80
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fc6d 	bl	800586a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9bc 	bl	8005334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0220 	mvn.w	r2, #32
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fc38 	bl	8005858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005006:	2302      	movs	r3, #2
 8005008:	e082      	b.n	8005110 <HAL_TIM_IC_ConfigChannel+0x120>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f000 f9f0 	bl	800540c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 020c 	bic.w	r2, r2, #12
 800503a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6999      	ldr	r1, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	619a      	str	r2, [r3, #24]
 800504e:	e05a      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d11c      	bne.n	8005090 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f000 fa59 	bl	800551c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005078:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6999      	ldr	r1, [r3, #24]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
 800508e:	e03a      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d11b      	bne.n	80050ce <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f000 faa4 	bl	80055f2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 020c 	bic.w	r2, r2, #12
 80050b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69d9      	ldr	r1, [r3, #28]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	61da      	str	r2, [r3, #28]
 80050cc:	e01b      	b.n	8005106 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f000 fac3 	bl	8005668 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	021a      	lsls	r2, r3, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIM_ConfigClockSource+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e0a6      	b.n	800527e <HAL_TIM_ConfigClockSource+0x166>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800514e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005156:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d067      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x120>
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d80b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x6c>
 800516c:	2b10      	cmp	r3, #16
 800516e:	d073      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0x140>
 8005170:	2b10      	cmp	r3, #16
 8005172:	d802      	bhi.n	800517a <HAL_TIM_ConfigClockSource+0x62>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d06f      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005178:	e078      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800517a:	2b20      	cmp	r3, #32
 800517c:	d06c      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0x140>
 800517e:	2b30      	cmp	r3, #48	; 0x30
 8005180:	d06a      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005182:	e073      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005184:	2b70      	cmp	r3, #112	; 0x70
 8005186:	d00d      	beq.n	80051a4 <HAL_TIM_ConfigClockSource+0x8c>
 8005188:	2b70      	cmp	r3, #112	; 0x70
 800518a:	d804      	bhi.n	8005196 <HAL_TIM_ConfigClockSource+0x7e>
 800518c:	2b50      	cmp	r3, #80	; 0x50
 800518e:	d033      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0xe0>
 8005190:	2b60      	cmp	r3, #96	; 0x60
 8005192:	d041      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005194:	e06a      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	d066      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x152>
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d017      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80051a2:	e063      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6899      	ldr	r1, [r3, #8]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f000 faae 	bl	8005714 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]
      break;
 80051d0:	e04c      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6899      	ldr	r1, [r3, #8]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f000 fa97 	bl	8005714 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f4:	609a      	str	r2, [r3, #8]
      break;
 80051f6:	e039      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	f000 f95b 	bl	80054c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2150      	movs	r1, #80	; 0x50
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa65 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 8005216:	e029      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	461a      	mov	r2, r3
 8005226:	f000 f9b5 	bl	8005594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2160      	movs	r1, #96	; 0x60
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fa55 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 8005236:	e019      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	461a      	mov	r2, r3
 8005246:	f000 f93b 	bl	80054c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2140      	movs	r1, #64	; 0x40
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fa45 	bl	80056e0 <TIM_ITRx_SetConfig>
      break;
 8005256:	e009      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f000 fa3c 	bl	80056e0 <TIM_ITRx_SetConfig>
        break;
 8005268:	e000      	b.n	800526c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800526a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d831      	bhi.n	8005300 <HAL_TIM_ReadCapturedValue+0x78>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052d9 	.word	0x080052d9
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005301 	.word	0x08005301
 80052b0:	08005301 	.word	0x08005301
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	08005301 	.word	0x08005301
 80052bc:	08005301 	.word	0x08005301
 80052c0:	08005301 	.word	0x08005301
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	08005301 	.word	0x08005301
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005301 	.word	0x08005301
 80052d4:	080052f7 	.word	0x080052f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	60fb      	str	r3, [r7, #12]

      break;
 80052e0:	e00f      	b.n	8005302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	60fb      	str	r3, [r7, #12]

      break;
 80052ea:	e00a      	b.n	8005302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	60fb      	str	r3, [r7, #12]

      break;
 80052f4:	e005      	b.n	8005302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	60fb      	str	r3, [r7, #12]

      break;
 80052fe:	e000      	b.n	8005302 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005300:	bf00      	nop
  }

  return tmpreg;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop

08005310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
	...

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a29      	ldr	r2, [pc, #164]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a26      	ldr	r2, [pc, #152]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d007      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800

0800540c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <TIM_TI1_SetConfig+0xa8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_TI1_SetConfig+0x46>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d007      	beq.n	8005452 <TIM_TI1_SetConfig+0x46>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <TIM_TI1_SetConfig+0xac>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_TI1_SetConfig+0x46>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <TIM_TI1_SetConfig+0xb0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <TIM_TI1_SetConfig+0x4a>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <TIM_TI1_SetConfig+0x4c>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e003      	b.n	8005476 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	b2db      	uxtb	r3, r3
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f023 030a 	bic.w	r3, r3, #10
 8005490:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 030a 	and.w	r3, r3, #10
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800

080054c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 030a 	bic.w	r3, r3, #10
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0210 	bic.w	r2, r3, #16
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	031b      	lsls	r3, r3, #12
 8005560:	b29b      	uxth	r3, r3
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 0210 	bic.w	r2, r3, #16
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	031b      	lsls	r3, r3, #12
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	b2db      	uxtb	r3, r3
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005642:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	031b      	lsls	r3, r3, #12
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	031b      	lsls	r3, r3, #12
 80056c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f043 0307 	orr.w	r3, r3, #7
 8005702:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr

08005714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	431a      	orrs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005752:	b480      	push	{r7}
 8005754:	b087      	sub	sp, #28
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	2201      	movs	r2, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	43db      	mvns	r3, r3
 8005774:	401a      	ands	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	431a      	orrs	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
	...

0800579c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e046      	b.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a16      	ldr	r2, [pc, #88]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d009      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a10      	ldr	r2, [pc, #64]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	4313      	orrs	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800

08005858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e03f      	b.n	800590e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fd f854 	bl	8002950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2224      	movs	r2, #36	; 0x24
 80058ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f905 	bl	8005ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b08a      	sub	sp, #40	; 0x28
 800591a:	af02      	add	r7, sp, #8
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d17c      	bne.n	8005a30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_UART_Transmit+0x2c>
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e075      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UART_Transmit+0x3e>
 8005950:	2302      	movs	r3, #2
 8005952:	e06e      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2221      	movs	r2, #33	; 0x21
 8005966:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800596a:	f7fd f8f7 	bl	8002b5c <HAL_GetTick>
 800596e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005984:	d108      	bne.n	8005998 <HAL_UART_Transmit+0x82>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	e003      	b.n	80059a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059a8:	e02a      	b.n	8005a00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f840 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e036      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	3302      	adds	r3, #2
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e007      	b.n	80059f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3301      	adds	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1cf      	bne.n	80059aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f810 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3720      	adds	r7, #32
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	4613      	mov	r3, r2
 8005a48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4a:	e02c      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d028      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a5a:	f7fd f87f 	bl	8002b5c <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d21d      	bcs.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e00f      	b.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bf0c      	ite	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	2300      	movne	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d0c3      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b0a:	f023 030c 	bic.w	r3, r3, #12
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2c      	ldr	r2, [pc, #176]	; (8005be4 <UART_SetConfig+0x114>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d103      	bne.n	8005b40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fd ff56 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	e002      	b.n	8005b46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fd ff3e 	bl	80039c0 <HAL_RCC_GetPCLK1Freq>
 8005b44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009a      	lsls	r2, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <UART_SetConfig+0x118>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	0119      	lsls	r1, r3, #4
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009a      	lsls	r2, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <UART_SetConfig+0x118>)
 8005b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2064      	movs	r0, #100	; 0x64
 8005b86:	fb00 f303 	mul.w	r3, r0, r3
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	3332      	adds	r3, #50	; 0x32
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <UART_SetConfig+0x118>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b9c:	4419      	add	r1, r3
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009a      	lsls	r2, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <UART_SetConfig+0x118>)
 8005bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	2064      	movs	r0, #100	; 0x64
 8005bbe:	fb00 f303 	mul.w	r3, r0, r3
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	3332      	adds	r3, #50	; 0x32
 8005bc8:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <UART_SetConfig+0x118>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	440a      	add	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40013800 	.word	0x40013800
 8005be8:	51eb851f 	.word	0x51eb851f

08005bec <__errno>:
 8005bec:	4b01      	ldr	r3, [pc, #4]	; (8005bf4 <__errno+0x8>)
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	2000003c 	.word	0x2000003c

08005bf8 <__libc_init_array>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	4e0c      	ldr	r6, [pc, #48]	; (8005c30 <__libc_init_array+0x38>)
 8005bfe:	4c0d      	ldr	r4, [pc, #52]	; (8005c34 <__libc_init_array+0x3c>)
 8005c00:	1ba4      	subs	r4, r4, r6
 8005c02:	10a4      	asrs	r4, r4, #2
 8005c04:	42a5      	cmp	r5, r4
 8005c06:	d109      	bne.n	8005c1c <__libc_init_array+0x24>
 8005c08:	f000 fc34 	bl	8006474 <_init>
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	4e0a      	ldr	r6, [pc, #40]	; (8005c38 <__libc_init_array+0x40>)
 8005c10:	4c0a      	ldr	r4, [pc, #40]	; (8005c3c <__libc_init_array+0x44>)
 8005c12:	1ba4      	subs	r4, r4, r6
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	42a5      	cmp	r5, r4
 8005c18:	d105      	bne.n	8005c26 <__libc_init_array+0x2e>
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c20:	4798      	blx	r3
 8005c22:	3501      	adds	r5, #1
 8005c24:	e7ee      	b.n	8005c04 <__libc_init_array+0xc>
 8005c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c2a:	4798      	blx	r3
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	e7f2      	b.n	8005c16 <__libc_init_array+0x1e>
 8005c30:	08006884 	.word	0x08006884
 8005c34:	08006884 	.word	0x08006884
 8005c38:	08006884 	.word	0x08006884
 8005c3c:	08006888 	.word	0x08006888

08005c40 <memset>:
 8005c40:	4603      	mov	r3, r0
 8005c42:	4402      	add	r2, r0
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d100      	bne.n	8005c4a <memset+0xa>
 8005c48:	4770      	bx	lr
 8005c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4e:	e7f9      	b.n	8005c44 <memset+0x4>

08005c50 <siprintf>:
 8005c50:	b40e      	push	{r1, r2, r3}
 8005c52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c56:	b500      	push	{lr}
 8005c58:	b09c      	sub	sp, #112	; 0x70
 8005c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c5c:	9002      	str	r0, [sp, #8]
 8005c5e:	9006      	str	r0, [sp, #24]
 8005c60:	9107      	str	r1, [sp, #28]
 8005c62:	9104      	str	r1, [sp, #16]
 8005c64:	4808      	ldr	r0, [pc, #32]	; (8005c88 <siprintf+0x38>)
 8005c66:	4909      	ldr	r1, [pc, #36]	; (8005c8c <siprintf+0x3c>)
 8005c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6c:	9105      	str	r1, [sp, #20]
 8005c6e:	6800      	ldr	r0, [r0, #0]
 8005c70:	a902      	add	r1, sp, #8
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	f000 f866 	bl	8005d44 <_svfiprintf_r>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	9b02      	ldr	r3, [sp, #8]
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	b01c      	add	sp, #112	; 0x70
 8005c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c84:	b003      	add	sp, #12
 8005c86:	4770      	bx	lr
 8005c88:	2000003c 	.word	0x2000003c
 8005c8c:	ffff0208 	.word	0xffff0208

08005c90 <__ssputs_r>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	688e      	ldr	r6, [r1, #8]
 8005c96:	4682      	mov	sl, r0
 8005c98:	429e      	cmp	r6, r3
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4690      	mov	r8, r2
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	d837      	bhi.n	8005d12 <__ssputs_r+0x82>
 8005ca2:	898a      	ldrh	r2, [r1, #12]
 8005ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ca8:	d031      	beq.n	8005d0e <__ssputs_r+0x7e>
 8005caa:	2302      	movs	r3, #2
 8005cac:	6825      	ldr	r5, [r4, #0]
 8005cae:	6909      	ldr	r1, [r1, #16]
 8005cb0:	1a6f      	subs	r7, r5, r1
 8005cb2:	6965      	ldr	r5, [r4, #20]
 8005cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cbc:	f109 0301 	add.w	r3, r9, #1
 8005cc0:	443b      	add	r3, r7
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	bf38      	it	cc
 8005cc6:	461d      	movcc	r5, r3
 8005cc8:	0553      	lsls	r3, r2, #21
 8005cca:	d530      	bpl.n	8005d2e <__ssputs_r+0x9e>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f000 fb37 	bl	8006340 <_malloc_r>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	b950      	cbnz	r0, 8005cec <__ssputs_r+0x5c>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	f8ca 3000 	str.w	r3, [sl]
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cec:	463a      	mov	r2, r7
 8005cee:	6921      	ldr	r1, [r4, #16]
 8005cf0:	f000 fab6 	bl	8006260 <memcpy>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	6126      	str	r6, [r4, #16]
 8005d02:	443e      	add	r6, r7
 8005d04:	6026      	str	r6, [r4, #0]
 8005d06:	464e      	mov	r6, r9
 8005d08:	6165      	str	r5, [r4, #20]
 8005d0a:	1bed      	subs	r5, r5, r7
 8005d0c:	60a5      	str	r5, [r4, #8]
 8005d0e:	454e      	cmp	r6, r9
 8005d10:	d900      	bls.n	8005d14 <__ssputs_r+0x84>
 8005d12:	464e      	mov	r6, r9
 8005d14:	4632      	mov	r2, r6
 8005d16:	4641      	mov	r1, r8
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	f000 faac 	bl	8006276 <memmove>
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	2000      	movs	r0, #0
 8005d22:	1b9b      	subs	r3, r3, r6
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	441e      	add	r6, r3
 8005d2a:	6026      	str	r6, [r4, #0]
 8005d2c:	e7dc      	b.n	8005ce8 <__ssputs_r+0x58>
 8005d2e:	462a      	mov	r2, r5
 8005d30:	f000 fb60 	bl	80063f4 <_realloc_r>
 8005d34:	4606      	mov	r6, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1e2      	bne.n	8005d00 <__ssputs_r+0x70>
 8005d3a:	6921      	ldr	r1, [r4, #16]
 8005d3c:	4650      	mov	r0, sl
 8005d3e:	f000 fab3 	bl	80062a8 <_free_r>
 8005d42:	e7c8      	b.n	8005cd6 <__ssputs_r+0x46>

08005d44 <_svfiprintf_r>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	461d      	mov	r5, r3
 8005d4a:	898b      	ldrh	r3, [r1, #12]
 8005d4c:	b09d      	sub	sp, #116	; 0x74
 8005d4e:	061f      	lsls	r7, r3, #24
 8005d50:	4680      	mov	r8, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	4616      	mov	r6, r2
 8005d56:	d50f      	bpl.n	8005d78 <_svfiprintf_r+0x34>
 8005d58:	690b      	ldr	r3, [r1, #16]
 8005d5a:	b96b      	cbnz	r3, 8005d78 <_svfiprintf_r+0x34>
 8005d5c:	2140      	movs	r1, #64	; 0x40
 8005d5e:	f000 faef 	bl	8006340 <_malloc_r>
 8005d62:	6020      	str	r0, [r4, #0]
 8005d64:	6120      	str	r0, [r4, #16]
 8005d66:	b928      	cbnz	r0, 8005d74 <_svfiprintf_r+0x30>
 8005d68:	230c      	movs	r3, #12
 8005d6a:	f8c8 3000 	str.w	r3, [r8]
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	e0c8      	b.n	8005f06 <_svfiprintf_r+0x1c2>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	6163      	str	r3, [r4, #20]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d82:	2330      	movs	r3, #48	; 0x30
 8005d84:	f04f 0b01 	mov.w	fp, #1
 8005d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d8c:	9503      	str	r5, [sp, #12]
 8005d8e:	4637      	mov	r7, r6
 8005d90:	463d      	mov	r5, r7
 8005d92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d96:	b10b      	cbz	r3, 8005d9c <_svfiprintf_r+0x58>
 8005d98:	2b25      	cmp	r3, #37	; 0x25
 8005d9a:	d13e      	bne.n	8005e1a <_svfiprintf_r+0xd6>
 8005d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005da0:	d00b      	beq.n	8005dba <_svfiprintf_r+0x76>
 8005da2:	4653      	mov	r3, sl
 8005da4:	4632      	mov	r2, r6
 8005da6:	4621      	mov	r1, r4
 8005da8:	4640      	mov	r0, r8
 8005daa:	f7ff ff71 	bl	8005c90 <__ssputs_r>
 8005dae:	3001      	adds	r0, #1
 8005db0:	f000 80a4 	beq.w	8005efc <_svfiprintf_r+0x1b8>
 8005db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db6:	4453      	add	r3, sl
 8005db8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dba:	783b      	ldrb	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 809d 	beq.w	8005efc <_svfiprintf_r+0x1b8>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd6:	462f      	mov	r7, r5
 8005dd8:	2205      	movs	r2, #5
 8005dda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dde:	4850      	ldr	r0, [pc, #320]	; (8005f20 <_svfiprintf_r+0x1dc>)
 8005de0:	f000 fa30 	bl	8006244 <memchr>
 8005de4:	9b04      	ldr	r3, [sp, #16]
 8005de6:	b9d0      	cbnz	r0, 8005e1e <_svfiprintf_r+0xda>
 8005de8:	06d9      	lsls	r1, r3, #27
 8005dea:	bf44      	itt	mi
 8005dec:	2220      	movmi	r2, #32
 8005dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005df2:	071a      	lsls	r2, r3, #28
 8005df4:	bf44      	itt	mi
 8005df6:	222b      	movmi	r2, #43	; 0x2b
 8005df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dfc:	782a      	ldrb	r2, [r5, #0]
 8005dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8005e00:	d015      	beq.n	8005e2e <_svfiprintf_r+0xea>
 8005e02:	462f      	mov	r7, r5
 8005e04:	2000      	movs	r0, #0
 8005e06:	250a      	movs	r5, #10
 8005e08:	9a07      	ldr	r2, [sp, #28]
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e10:	3b30      	subs	r3, #48	; 0x30
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d94d      	bls.n	8005eb2 <_svfiprintf_r+0x16e>
 8005e16:	b1b8      	cbz	r0, 8005e48 <_svfiprintf_r+0x104>
 8005e18:	e00f      	b.n	8005e3a <_svfiprintf_r+0xf6>
 8005e1a:	462f      	mov	r7, r5
 8005e1c:	e7b8      	b.n	8005d90 <_svfiprintf_r+0x4c>
 8005e1e:	4a40      	ldr	r2, [pc, #256]	; (8005f20 <_svfiprintf_r+0x1dc>)
 8005e20:	463d      	mov	r5, r7
 8005e22:	1a80      	subs	r0, r0, r2
 8005e24:	fa0b f000 	lsl.w	r0, fp, r0
 8005e28:	4318      	orrs	r0, r3
 8005e2a:	9004      	str	r0, [sp, #16]
 8005e2c:	e7d3      	b.n	8005dd6 <_svfiprintf_r+0x92>
 8005e2e:	9a03      	ldr	r2, [sp, #12]
 8005e30:	1d11      	adds	r1, r2, #4
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	9103      	str	r1, [sp, #12]
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	db01      	blt.n	8005e3e <_svfiprintf_r+0xfa>
 8005e3a:	9207      	str	r2, [sp, #28]
 8005e3c:	e004      	b.n	8005e48 <_svfiprintf_r+0x104>
 8005e3e:	4252      	negs	r2, r2
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	9207      	str	r2, [sp, #28]
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	783b      	ldrb	r3, [r7, #0]
 8005e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e4c:	d10c      	bne.n	8005e68 <_svfiprintf_r+0x124>
 8005e4e:	787b      	ldrb	r3, [r7, #1]
 8005e50:	2b2a      	cmp	r3, #42	; 0x2a
 8005e52:	d133      	bne.n	8005ebc <_svfiprintf_r+0x178>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	3702      	adds	r7, #2
 8005e58:	1d1a      	adds	r2, r3, #4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	9203      	str	r2, [sp, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bfb8      	it	lt
 8005e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e66:	9305      	str	r3, [sp, #20]
 8005e68:	4d2e      	ldr	r5, [pc, #184]	; (8005f24 <_svfiprintf_r+0x1e0>)
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	7839      	ldrb	r1, [r7, #0]
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f9e8 	bl	8006244 <memchr>
 8005e74:	b138      	cbz	r0, 8005e86 <_svfiprintf_r+0x142>
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	1b40      	subs	r0, r0, r5
 8005e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	3701      	adds	r7, #1
 8005e82:	4303      	orrs	r3, r0
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	7839      	ldrb	r1, [r7, #0]
 8005e88:	2206      	movs	r2, #6
 8005e8a:	4827      	ldr	r0, [pc, #156]	; (8005f28 <_svfiprintf_r+0x1e4>)
 8005e8c:	1c7e      	adds	r6, r7, #1
 8005e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e92:	f000 f9d7 	bl	8006244 <memchr>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d038      	beq.n	8005f0c <_svfiprintf_r+0x1c8>
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <_svfiprintf_r+0x1e8>)
 8005e9c:	bb13      	cbnz	r3, 8005ee4 <_svfiprintf_r+0x1a0>
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	f023 0307 	bic.w	r3, r3, #7
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	444b      	add	r3, r9
 8005eae:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb0:	e76d      	b.n	8005d8e <_svfiprintf_r+0x4a>
 8005eb2:	fb05 3202 	mla	r2, r5, r2, r3
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	460f      	mov	r7, r1
 8005eba:	e7a6      	b.n	8005e0a <_svfiprintf_r+0xc6>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	250a      	movs	r5, #10
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	3701      	adds	r7, #1
 8005ec4:	9305      	str	r3, [sp, #20]
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ecc:	3a30      	subs	r2, #48	; 0x30
 8005ece:	2a09      	cmp	r2, #9
 8005ed0:	d903      	bls.n	8005eda <_svfiprintf_r+0x196>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0c8      	beq.n	8005e68 <_svfiprintf_r+0x124>
 8005ed6:	9105      	str	r1, [sp, #20]
 8005ed8:	e7c6      	b.n	8005e68 <_svfiprintf_r+0x124>
 8005eda:	fb05 2101 	mla	r1, r5, r1, r2
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	e7f0      	b.n	8005ec6 <_svfiprintf_r+0x182>
 8005ee4:	ab03      	add	r3, sp, #12
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	4622      	mov	r2, r4
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <_svfiprintf_r+0x1ec>)
 8005eec:	a904      	add	r1, sp, #16
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f3af 8000 	nop.w
 8005ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ef8:	4681      	mov	r9, r0
 8005efa:	d1d6      	bne.n	8005eaa <_svfiprintf_r+0x166>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	065b      	lsls	r3, r3, #25
 8005f00:	f53f af35 	bmi.w	8005d6e <_svfiprintf_r+0x2a>
 8005f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f06:	b01d      	add	sp, #116	; 0x74
 8005f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0c:	ab03      	add	r3, sp, #12
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4622      	mov	r2, r4
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <_svfiprintf_r+0x1ec>)
 8005f14:	a904      	add	r1, sp, #16
 8005f16:	4640      	mov	r0, r8
 8005f18:	f000 f882 	bl	8006020 <_printf_i>
 8005f1c:	e7ea      	b.n	8005ef4 <_svfiprintf_r+0x1b0>
 8005f1e:	bf00      	nop
 8005f20:	08006850 	.word	0x08006850
 8005f24:	08006856 	.word	0x08006856
 8005f28:	0800685a 	.word	0x0800685a
 8005f2c:	00000000 	.word	0x00000000
 8005f30:	08005c91 	.word	0x08005c91

08005f34 <_printf_common>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	4691      	mov	r9, r2
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	688a      	ldr	r2, [r1, #8]
 8005f3e:	690b      	ldr	r3, [r1, #16]
 8005f40:	4606      	mov	r6, r0
 8005f42:	4293      	cmp	r3, r2
 8005f44:	bfb8      	it	lt
 8005f46:	4613      	movlt	r3, r2
 8005f48:	f8c9 3000 	str.w	r3, [r9]
 8005f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f50:	460c      	mov	r4, r1
 8005f52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f56:	b112      	cbz	r2, 8005f5e <_printf_common+0x2a>
 8005f58:	3301      	adds	r3, #1
 8005f5a:	f8c9 3000 	str.w	r3, [r9]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	0699      	lsls	r1, r3, #26
 8005f62:	bf42      	ittt	mi
 8005f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f68:	3302      	addmi	r3, #2
 8005f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	f015 0506 	ands.w	r5, r5, #6
 8005f74:	d107      	bne.n	8005f86 <_printf_common+0x52>
 8005f76:	f104 0a19 	add.w	sl, r4, #25
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	dc29      	bgt.n	8005fda <_printf_common+0xa6>
 8005f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	3300      	adds	r3, #0
 8005f8e:	bf18      	it	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	0692      	lsls	r2, r2, #26
 8005f94:	d42e      	bmi.n	8005ff4 <_printf_common+0xc0>
 8005f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	47c0      	blx	r8
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d021      	beq.n	8005fe8 <_printf_common+0xb4>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	68e5      	ldr	r5, [r4, #12]
 8005fa8:	f003 0306 	and.w	r3, r3, #6
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	bf18      	it	ne
 8005fb0:	2500      	movne	r5, #0
 8005fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8005fb6:	f04f 0900 	mov.w	r9, #0
 8005fba:	bf08      	it	eq
 8005fbc:	1aad      	subeq	r5, r5, r2
 8005fbe:	68a3      	ldr	r3, [r4, #8]
 8005fc0:	6922      	ldr	r2, [r4, #16]
 8005fc2:	bf08      	it	eq
 8005fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfc4      	itt	gt
 8005fcc:	1a9b      	subgt	r3, r3, r2
 8005fce:	18ed      	addgt	r5, r5, r3
 8005fd0:	341a      	adds	r4, #26
 8005fd2:	454d      	cmp	r5, r9
 8005fd4:	d11a      	bne.n	800600c <_printf_common+0xd8>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	e008      	b.n	8005fec <_printf_common+0xb8>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4652      	mov	r2, sl
 8005fde:	4639      	mov	r1, r7
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	47c0      	blx	r8
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d103      	bne.n	8005ff0 <_printf_common+0xbc>
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	e7c2      	b.n	8005f7a <_printf_common+0x46>
 8005ff4:	2030      	movs	r0, #48	; 0x30
 8005ff6:	18e1      	adds	r1, r4, r3
 8005ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006002:	4422      	add	r2, r4
 8006004:	3302      	adds	r3, #2
 8006006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800600a:	e7c4      	b.n	8005f96 <_printf_common+0x62>
 800600c:	2301      	movs	r3, #1
 800600e:	4622      	mov	r2, r4
 8006010:	4639      	mov	r1, r7
 8006012:	4630      	mov	r0, r6
 8006014:	47c0      	blx	r8
 8006016:	3001      	adds	r0, #1
 8006018:	d0e6      	beq.n	8005fe8 <_printf_common+0xb4>
 800601a:	f109 0901 	add.w	r9, r9, #1
 800601e:	e7d8      	b.n	8005fd2 <_printf_common+0x9e>

08006020 <_printf_i>:
 8006020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006028:	460c      	mov	r4, r1
 800602a:	7e09      	ldrb	r1, [r1, #24]
 800602c:	b085      	sub	sp, #20
 800602e:	296e      	cmp	r1, #110	; 0x6e
 8006030:	4617      	mov	r7, r2
 8006032:	4606      	mov	r6, r0
 8006034:	4698      	mov	r8, r3
 8006036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006038:	f000 80b3 	beq.w	80061a2 <_printf_i+0x182>
 800603c:	d822      	bhi.n	8006084 <_printf_i+0x64>
 800603e:	2963      	cmp	r1, #99	; 0x63
 8006040:	d036      	beq.n	80060b0 <_printf_i+0x90>
 8006042:	d80a      	bhi.n	800605a <_printf_i+0x3a>
 8006044:	2900      	cmp	r1, #0
 8006046:	f000 80b9 	beq.w	80061bc <_printf_i+0x19c>
 800604a:	2958      	cmp	r1, #88	; 0x58
 800604c:	f000 8083 	beq.w	8006156 <_printf_i+0x136>
 8006050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006058:	e032      	b.n	80060c0 <_printf_i+0xa0>
 800605a:	2964      	cmp	r1, #100	; 0x64
 800605c:	d001      	beq.n	8006062 <_printf_i+0x42>
 800605e:	2969      	cmp	r1, #105	; 0x69
 8006060:	d1f6      	bne.n	8006050 <_printf_i+0x30>
 8006062:	6820      	ldr	r0, [r4, #0]
 8006064:	6813      	ldr	r3, [r2, #0]
 8006066:	0605      	lsls	r5, r0, #24
 8006068:	f103 0104 	add.w	r1, r3, #4
 800606c:	d52a      	bpl.n	80060c4 <_printf_i+0xa4>
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6011      	str	r1, [r2, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da03      	bge.n	800607e <_printf_i+0x5e>
 8006076:	222d      	movs	r2, #45	; 0x2d
 8006078:	425b      	negs	r3, r3
 800607a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800607e:	486f      	ldr	r0, [pc, #444]	; (800623c <_printf_i+0x21c>)
 8006080:	220a      	movs	r2, #10
 8006082:	e039      	b.n	80060f8 <_printf_i+0xd8>
 8006084:	2973      	cmp	r1, #115	; 0x73
 8006086:	f000 809d 	beq.w	80061c4 <_printf_i+0x1a4>
 800608a:	d808      	bhi.n	800609e <_printf_i+0x7e>
 800608c:	296f      	cmp	r1, #111	; 0x6f
 800608e:	d020      	beq.n	80060d2 <_printf_i+0xb2>
 8006090:	2970      	cmp	r1, #112	; 0x70
 8006092:	d1dd      	bne.n	8006050 <_printf_i+0x30>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	f043 0320 	orr.w	r3, r3, #32
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	e003      	b.n	80060a6 <_printf_i+0x86>
 800609e:	2975      	cmp	r1, #117	; 0x75
 80060a0:	d017      	beq.n	80060d2 <_printf_i+0xb2>
 80060a2:	2978      	cmp	r1, #120	; 0x78
 80060a4:	d1d4      	bne.n	8006050 <_printf_i+0x30>
 80060a6:	2378      	movs	r3, #120	; 0x78
 80060a8:	4865      	ldr	r0, [pc, #404]	; (8006240 <_printf_i+0x220>)
 80060aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ae:	e055      	b.n	800615c <_printf_i+0x13c>
 80060b0:	6813      	ldr	r3, [r2, #0]
 80060b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b6:	1d19      	adds	r1, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6011      	str	r1, [r2, #0]
 80060bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c0:	2301      	movs	r3, #1
 80060c2:	e08c      	b.n	80061de <_printf_i+0x1be>
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060ca:	6011      	str	r1, [r2, #0]
 80060cc:	bf18      	it	ne
 80060ce:	b21b      	sxthne	r3, r3
 80060d0:	e7cf      	b.n	8006072 <_printf_i+0x52>
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	6825      	ldr	r5, [r4, #0]
 80060d6:	1d18      	adds	r0, r3, #4
 80060d8:	6010      	str	r0, [r2, #0]
 80060da:	0628      	lsls	r0, r5, #24
 80060dc:	d501      	bpl.n	80060e2 <_printf_i+0xc2>
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	e002      	b.n	80060e8 <_printf_i+0xc8>
 80060e2:	0668      	lsls	r0, r5, #25
 80060e4:	d5fb      	bpl.n	80060de <_printf_i+0xbe>
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	296f      	cmp	r1, #111	; 0x6f
 80060ea:	bf14      	ite	ne
 80060ec:	220a      	movne	r2, #10
 80060ee:	2208      	moveq	r2, #8
 80060f0:	4852      	ldr	r0, [pc, #328]	; (800623c <_printf_i+0x21c>)
 80060f2:	2100      	movs	r1, #0
 80060f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060f8:	6865      	ldr	r5, [r4, #4]
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	60a5      	str	r5, [r4, #8]
 80060fe:	f2c0 8095 	blt.w	800622c <_printf_i+0x20c>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	f021 0104 	bic.w	r1, r1, #4
 8006108:	6021      	str	r1, [r4, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d13d      	bne.n	800618a <_printf_i+0x16a>
 800610e:	2d00      	cmp	r5, #0
 8006110:	f040 808e 	bne.w	8006230 <_printf_i+0x210>
 8006114:	4665      	mov	r5, ip
 8006116:	2a08      	cmp	r2, #8
 8006118:	d10b      	bne.n	8006132 <_printf_i+0x112>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	07db      	lsls	r3, r3, #31
 800611e:	d508      	bpl.n	8006132 <_printf_i+0x112>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	bfde      	ittt	le
 8006128:	2330      	movle	r3, #48	; 0x30
 800612a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800612e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006132:	ebac 0305 	sub.w	r3, ip, r5
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	f8cd 8000 	str.w	r8, [sp]
 800613c:	463b      	mov	r3, r7
 800613e:	aa03      	add	r2, sp, #12
 8006140:	4621      	mov	r1, r4
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff fef6 	bl	8005f34 <_printf_common>
 8006148:	3001      	adds	r0, #1
 800614a:	d14d      	bne.n	80061e8 <_printf_i+0x1c8>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	b005      	add	sp, #20
 8006152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006156:	4839      	ldr	r0, [pc, #228]	; (800623c <_printf_i+0x21c>)
 8006158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800615c:	6813      	ldr	r3, [r2, #0]
 800615e:	6821      	ldr	r1, [r4, #0]
 8006160:	1d1d      	adds	r5, r3, #4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6015      	str	r5, [r2, #0]
 8006166:	060a      	lsls	r2, r1, #24
 8006168:	d50b      	bpl.n	8006182 <_printf_i+0x162>
 800616a:	07ca      	lsls	r2, r1, #31
 800616c:	bf44      	itt	mi
 800616e:	f041 0120 	orrmi.w	r1, r1, #32
 8006172:	6021      	strmi	r1, [r4, #0]
 8006174:	b91b      	cbnz	r3, 800617e <_printf_i+0x15e>
 8006176:	6822      	ldr	r2, [r4, #0]
 8006178:	f022 0220 	bic.w	r2, r2, #32
 800617c:	6022      	str	r2, [r4, #0]
 800617e:	2210      	movs	r2, #16
 8006180:	e7b7      	b.n	80060f2 <_printf_i+0xd2>
 8006182:	064d      	lsls	r5, r1, #25
 8006184:	bf48      	it	mi
 8006186:	b29b      	uxthmi	r3, r3
 8006188:	e7ef      	b.n	800616a <_printf_i+0x14a>
 800618a:	4665      	mov	r5, ip
 800618c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006190:	fb02 3311 	mls	r3, r2, r1, r3
 8006194:	5cc3      	ldrb	r3, [r0, r3]
 8006196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800619a:	460b      	mov	r3, r1
 800619c:	2900      	cmp	r1, #0
 800619e:	d1f5      	bne.n	800618c <_printf_i+0x16c>
 80061a0:	e7b9      	b.n	8006116 <_printf_i+0xf6>
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	1d18      	adds	r0, r3, #4
 80061a8:	6961      	ldr	r1, [r4, #20]
 80061aa:	6010      	str	r0, [r2, #0]
 80061ac:	0628      	lsls	r0, r5, #24
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	d501      	bpl.n	80061b6 <_printf_i+0x196>
 80061b2:	6019      	str	r1, [r3, #0]
 80061b4:	e002      	b.n	80061bc <_printf_i+0x19c>
 80061b6:	066a      	lsls	r2, r5, #25
 80061b8:	d5fb      	bpl.n	80061b2 <_printf_i+0x192>
 80061ba:	8019      	strh	r1, [r3, #0]
 80061bc:	2300      	movs	r3, #0
 80061be:	4665      	mov	r5, ip
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	e7b9      	b.n	8006138 <_printf_i+0x118>
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	1d19      	adds	r1, r3, #4
 80061c8:	6011      	str	r1, [r2, #0]
 80061ca:	681d      	ldr	r5, [r3, #0]
 80061cc:	6862      	ldr	r2, [r4, #4]
 80061ce:	2100      	movs	r1, #0
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 f837 	bl	8006244 <memchr>
 80061d6:	b108      	cbz	r0, 80061dc <_printf_i+0x1bc>
 80061d8:	1b40      	subs	r0, r0, r5
 80061da:	6060      	str	r0, [r4, #4]
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	6123      	str	r3, [r4, #16]
 80061e0:	2300      	movs	r3, #0
 80061e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e6:	e7a7      	b.n	8006138 <_printf_i+0x118>
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	462a      	mov	r2, r5
 80061ec:	4639      	mov	r1, r7
 80061ee:	4630      	mov	r0, r6
 80061f0:	47c0      	blx	r8
 80061f2:	3001      	adds	r0, #1
 80061f4:	d0aa      	beq.n	800614c <_printf_i+0x12c>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	079b      	lsls	r3, r3, #30
 80061fa:	d413      	bmi.n	8006224 <_printf_i+0x204>
 80061fc:	68e0      	ldr	r0, [r4, #12]
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	4298      	cmp	r0, r3
 8006202:	bfb8      	it	lt
 8006204:	4618      	movlt	r0, r3
 8006206:	e7a3      	b.n	8006150 <_printf_i+0x130>
 8006208:	2301      	movs	r3, #1
 800620a:	464a      	mov	r2, r9
 800620c:	4639      	mov	r1, r7
 800620e:	4630      	mov	r0, r6
 8006210:	47c0      	blx	r8
 8006212:	3001      	adds	r0, #1
 8006214:	d09a      	beq.n	800614c <_printf_i+0x12c>
 8006216:	3501      	adds	r5, #1
 8006218:	68e3      	ldr	r3, [r4, #12]
 800621a:	9a03      	ldr	r2, [sp, #12]
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	42ab      	cmp	r3, r5
 8006220:	dcf2      	bgt.n	8006208 <_printf_i+0x1e8>
 8006222:	e7eb      	b.n	80061fc <_printf_i+0x1dc>
 8006224:	2500      	movs	r5, #0
 8006226:	f104 0919 	add.w	r9, r4, #25
 800622a:	e7f5      	b.n	8006218 <_printf_i+0x1f8>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1ac      	bne.n	800618a <_printf_i+0x16a>
 8006230:	7803      	ldrb	r3, [r0, #0]
 8006232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800623a:	e76c      	b.n	8006116 <_printf_i+0xf6>
 800623c:	08006861 	.word	0x08006861
 8006240:	08006872 	.word	0x08006872

08006244 <memchr>:
 8006244:	b510      	push	{r4, lr}
 8006246:	b2c9      	uxtb	r1, r1
 8006248:	4402      	add	r2, r0
 800624a:	4290      	cmp	r0, r2
 800624c:	4603      	mov	r3, r0
 800624e:	d101      	bne.n	8006254 <memchr+0x10>
 8006250:	2300      	movs	r3, #0
 8006252:	e003      	b.n	800625c <memchr+0x18>
 8006254:	781c      	ldrb	r4, [r3, #0]
 8006256:	3001      	adds	r0, #1
 8006258:	428c      	cmp	r4, r1
 800625a:	d1f6      	bne.n	800624a <memchr+0x6>
 800625c:	4618      	mov	r0, r3
 800625e:	bd10      	pop	{r4, pc}

08006260 <memcpy>:
 8006260:	b510      	push	{r4, lr}
 8006262:	1e43      	subs	r3, r0, #1
 8006264:	440a      	add	r2, r1
 8006266:	4291      	cmp	r1, r2
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	bd10      	pop	{r4, pc}
 800626c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006274:	e7f7      	b.n	8006266 <memcpy+0x6>

08006276 <memmove>:
 8006276:	4288      	cmp	r0, r1
 8006278:	b510      	push	{r4, lr}
 800627a:	eb01 0302 	add.w	r3, r1, r2
 800627e:	d807      	bhi.n	8006290 <memmove+0x1a>
 8006280:	1e42      	subs	r2, r0, #1
 8006282:	4299      	cmp	r1, r3
 8006284:	d00a      	beq.n	800629c <memmove+0x26>
 8006286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800628e:	e7f8      	b.n	8006282 <memmove+0xc>
 8006290:	4283      	cmp	r3, r0
 8006292:	d9f5      	bls.n	8006280 <memmove+0xa>
 8006294:	1881      	adds	r1, r0, r2
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	42d3      	cmn	r3, r2
 800629a:	d100      	bne.n	800629e <memmove+0x28>
 800629c:	bd10      	pop	{r4, pc}
 800629e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062a6:	e7f7      	b.n	8006298 <memmove+0x22>

080062a8 <_free_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4605      	mov	r5, r0
 80062ac:	2900      	cmp	r1, #0
 80062ae:	d043      	beq.n	8006338 <_free_r+0x90>
 80062b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b4:	1f0c      	subs	r4, r1, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfb8      	it	lt
 80062ba:	18e4      	addlt	r4, r4, r3
 80062bc:	f000 f8d0 	bl	8006460 <__malloc_lock>
 80062c0:	4a1e      	ldr	r2, [pc, #120]	; (800633c <_free_r+0x94>)
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	4610      	mov	r0, r2
 80062c6:	b933      	cbnz	r3, 80062d6 <_free_r+0x2e>
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6014      	str	r4, [r2, #0]
 80062cc:	4628      	mov	r0, r5
 80062ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d2:	f000 b8c6 	b.w	8006462 <__malloc_unlock>
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	d90b      	bls.n	80062f2 <_free_r+0x4a>
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	1862      	adds	r2, r4, r1
 80062de:	4293      	cmp	r3, r2
 80062e0:	bf01      	itttt	eq
 80062e2:	681a      	ldreq	r2, [r3, #0]
 80062e4:	685b      	ldreq	r3, [r3, #4]
 80062e6:	1852      	addeq	r2, r2, r1
 80062e8:	6022      	streq	r2, [r4, #0]
 80062ea:	6063      	str	r3, [r4, #4]
 80062ec:	6004      	str	r4, [r0, #0]
 80062ee:	e7ed      	b.n	80062cc <_free_r+0x24>
 80062f0:	4613      	mov	r3, r2
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	b10a      	cbz	r2, 80062fa <_free_r+0x52>
 80062f6:	42a2      	cmp	r2, r4
 80062f8:	d9fa      	bls.n	80062f0 <_free_r+0x48>
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	1858      	adds	r0, r3, r1
 80062fe:	42a0      	cmp	r0, r4
 8006300:	d10b      	bne.n	800631a <_free_r+0x72>
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	4401      	add	r1, r0
 8006306:	1858      	adds	r0, r3, r1
 8006308:	4282      	cmp	r2, r0
 800630a:	6019      	str	r1, [r3, #0]
 800630c:	d1de      	bne.n	80062cc <_free_r+0x24>
 800630e:	6810      	ldr	r0, [r2, #0]
 8006310:	6852      	ldr	r2, [r2, #4]
 8006312:	4401      	add	r1, r0
 8006314:	6019      	str	r1, [r3, #0]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	e7d8      	b.n	80062cc <_free_r+0x24>
 800631a:	d902      	bls.n	8006322 <_free_r+0x7a>
 800631c:	230c      	movs	r3, #12
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	e7d4      	b.n	80062cc <_free_r+0x24>
 8006322:	6820      	ldr	r0, [r4, #0]
 8006324:	1821      	adds	r1, r4, r0
 8006326:	428a      	cmp	r2, r1
 8006328:	bf01      	itttt	eq
 800632a:	6811      	ldreq	r1, [r2, #0]
 800632c:	6852      	ldreq	r2, [r2, #4]
 800632e:	1809      	addeq	r1, r1, r0
 8006330:	6021      	streq	r1, [r4, #0]
 8006332:	6062      	str	r2, [r4, #4]
 8006334:	605c      	str	r4, [r3, #4]
 8006336:	e7c9      	b.n	80062cc <_free_r+0x24>
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	bf00      	nop
 800633c:	20000108 	.word	0x20000108

08006340 <_malloc_r>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	1ccd      	adds	r5, r1, #3
 8006344:	f025 0503 	bic.w	r5, r5, #3
 8006348:	3508      	adds	r5, #8
 800634a:	2d0c      	cmp	r5, #12
 800634c:	bf38      	it	cc
 800634e:	250c      	movcc	r5, #12
 8006350:	2d00      	cmp	r5, #0
 8006352:	4606      	mov	r6, r0
 8006354:	db01      	blt.n	800635a <_malloc_r+0x1a>
 8006356:	42a9      	cmp	r1, r5
 8006358:	d903      	bls.n	8006362 <_malloc_r+0x22>
 800635a:	230c      	movs	r3, #12
 800635c:	6033      	str	r3, [r6, #0]
 800635e:	2000      	movs	r0, #0
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	f000 f87d 	bl	8006460 <__malloc_lock>
 8006366:	4a21      	ldr	r2, [pc, #132]	; (80063ec <_malloc_r+0xac>)
 8006368:	6814      	ldr	r4, [r2, #0]
 800636a:	4621      	mov	r1, r4
 800636c:	b991      	cbnz	r1, 8006394 <_malloc_r+0x54>
 800636e:	4c20      	ldr	r4, [pc, #128]	; (80063f0 <_malloc_r+0xb0>)
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	b91b      	cbnz	r3, 800637c <_malloc_r+0x3c>
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f863 	bl	8006440 <_sbrk_r>
 800637a:	6020      	str	r0, [r4, #0]
 800637c:	4629      	mov	r1, r5
 800637e:	4630      	mov	r0, r6
 8006380:	f000 f85e 	bl	8006440 <_sbrk_r>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d124      	bne.n	80063d2 <_malloc_r+0x92>
 8006388:	230c      	movs	r3, #12
 800638a:	4630      	mov	r0, r6
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	f000 f868 	bl	8006462 <__malloc_unlock>
 8006392:	e7e4      	b.n	800635e <_malloc_r+0x1e>
 8006394:	680b      	ldr	r3, [r1, #0]
 8006396:	1b5b      	subs	r3, r3, r5
 8006398:	d418      	bmi.n	80063cc <_malloc_r+0x8c>
 800639a:	2b0b      	cmp	r3, #11
 800639c:	d90f      	bls.n	80063be <_malloc_r+0x7e>
 800639e:	600b      	str	r3, [r1, #0]
 80063a0:	18cc      	adds	r4, r1, r3
 80063a2:	50cd      	str	r5, [r1, r3]
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f85c 	bl	8006462 <__malloc_unlock>
 80063aa:	f104 000b 	add.w	r0, r4, #11
 80063ae:	1d23      	adds	r3, r4, #4
 80063b0:	f020 0007 	bic.w	r0, r0, #7
 80063b4:	1ac3      	subs	r3, r0, r3
 80063b6:	d0d3      	beq.n	8006360 <_malloc_r+0x20>
 80063b8:	425a      	negs	r2, r3
 80063ba:	50e2      	str	r2, [r4, r3]
 80063bc:	e7d0      	b.n	8006360 <_malloc_r+0x20>
 80063be:	684b      	ldr	r3, [r1, #4]
 80063c0:	428c      	cmp	r4, r1
 80063c2:	bf16      	itet	ne
 80063c4:	6063      	strne	r3, [r4, #4]
 80063c6:	6013      	streq	r3, [r2, #0]
 80063c8:	460c      	movne	r4, r1
 80063ca:	e7eb      	b.n	80063a4 <_malloc_r+0x64>
 80063cc:	460c      	mov	r4, r1
 80063ce:	6849      	ldr	r1, [r1, #4]
 80063d0:	e7cc      	b.n	800636c <_malloc_r+0x2c>
 80063d2:	1cc4      	adds	r4, r0, #3
 80063d4:	f024 0403 	bic.w	r4, r4, #3
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d005      	beq.n	80063e8 <_malloc_r+0xa8>
 80063dc:	1a21      	subs	r1, r4, r0
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 f82e 	bl	8006440 <_sbrk_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d0cf      	beq.n	8006388 <_malloc_r+0x48>
 80063e8:	6025      	str	r5, [r4, #0]
 80063ea:	e7db      	b.n	80063a4 <_malloc_r+0x64>
 80063ec:	20000108 	.word	0x20000108
 80063f0:	2000010c 	.word	0x2000010c

080063f4 <_realloc_r>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	4607      	mov	r7, r0
 80063f8:	4614      	mov	r4, r2
 80063fa:	460e      	mov	r6, r1
 80063fc:	b921      	cbnz	r1, 8006408 <_realloc_r+0x14>
 80063fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006402:	4611      	mov	r1, r2
 8006404:	f7ff bf9c 	b.w	8006340 <_malloc_r>
 8006408:	b922      	cbnz	r2, 8006414 <_realloc_r+0x20>
 800640a:	f7ff ff4d 	bl	80062a8 <_free_r>
 800640e:	4625      	mov	r5, r4
 8006410:	4628      	mov	r0, r5
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006414:	f000 f826 	bl	8006464 <_malloc_usable_size_r>
 8006418:	42a0      	cmp	r0, r4
 800641a:	d20f      	bcs.n	800643c <_realloc_r+0x48>
 800641c:	4621      	mov	r1, r4
 800641e:	4638      	mov	r0, r7
 8006420:	f7ff ff8e 	bl	8006340 <_malloc_r>
 8006424:	4605      	mov	r5, r0
 8006426:	2800      	cmp	r0, #0
 8006428:	d0f2      	beq.n	8006410 <_realloc_r+0x1c>
 800642a:	4631      	mov	r1, r6
 800642c:	4622      	mov	r2, r4
 800642e:	f7ff ff17 	bl	8006260 <memcpy>
 8006432:	4631      	mov	r1, r6
 8006434:	4638      	mov	r0, r7
 8006436:	f7ff ff37 	bl	80062a8 <_free_r>
 800643a:	e7e9      	b.n	8006410 <_realloc_r+0x1c>
 800643c:	4635      	mov	r5, r6
 800643e:	e7e7      	b.n	8006410 <_realloc_r+0x1c>

08006440 <_sbrk_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	2300      	movs	r3, #0
 8006444:	4c05      	ldr	r4, [pc, #20]	; (800645c <_sbrk_r+0x1c>)
 8006446:	4605      	mov	r5, r0
 8006448:	4608      	mov	r0, r1
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	f7fb ffdc 	bl	8002408 <_sbrk>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_sbrk_r+0x1a>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	b103      	cbz	r3, 800645a <_sbrk_r+0x1a>
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20000360 	.word	0x20000360

08006460 <__malloc_lock>:
 8006460:	4770      	bx	lr

08006462 <__malloc_unlock>:
 8006462:	4770      	bx	lr

08006464 <_malloc_usable_size_r>:
 8006464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006468:	1f18      	subs	r0, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	bfbc      	itt	lt
 800646e:	580b      	ldrlt	r3, [r1, r0]
 8006470:	18c0      	addlt	r0, r0, r3
 8006472:	4770      	bx	lr

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

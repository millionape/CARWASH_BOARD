
i2c_test_c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b4  080068b4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080068b4  080068b4  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068b4  080068b4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080068bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200000a0  0800695c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800695c  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f98  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab7  00000000  00000000  00031061  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970a  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef05  00000000  00000000  0004f3da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fa44  00000000  00000000  0005e2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edd23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  000edda0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080064a4 	.word	0x080064a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080064a4 	.word	0x080064a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b55      	ldr	r3, [pc, #340]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a54      	ldr	r2, [pc, #336]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b52      	ldr	r3, [pc, #328]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b4f      	ldr	r3, [pc, #316]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a4e      	ldr	r2, [pc, #312]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b4c      	ldr	r3, [pc, #304]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b49      	ldr	r3, [pc, #292]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a48      	ldr	r2, [pc, #288]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b46      	ldr	r3, [pc, #280]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b43      	ldr	r3, [pc, #268]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a42      	ldr	r2, [pc, #264]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b40      	ldr	r3, [pc, #256]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	483d      	ldr	r0, [pc, #244]	; (80002cc <MX_GPIO_Init+0x170>)
 80001d8:	f002 fff7 	bl	80031ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 80001dc:	2200      	movs	r2, #0
 80001de:	f245 3103 	movw	r1, #21251	; 0x5303
 80001e2:	483b      	ldr	r0, [pc, #236]	; (80002d0 <MX_GPIO_Init+0x174>)
 80001e4:	f002 fff1 	bl	80031ca <HAL_GPIO_WritePin>
                          |OUT_PIN4_Pin|OUT_PIN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_PIN3_GPIO_Port, OUT_PIN3_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	4839      	ldr	r0, [pc, #228]	; (80002d4 <MX_GPIO_Init+0x178>)
 80001f0:	f002 ffeb 	bl	80031ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000202:	2301      	movs	r3, #1
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	482f      	ldr	r0, [pc, #188]	; (80002cc <MX_GPIO_Init+0x170>)
 800020e:	f002 fe6b 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = USER_SW2_Pin|FRONT_SW1_PIN_Pin|FRONT_SW2_PIN_Pin|FRONT_SW3_PIN_Pin
 8000212:	23fc      	movs	r3, #252	; 0xfc
 8000214:	613b      	str	r3, [r7, #16]
                          |FRONT_SW4_PIN_Pin|FRONT_SW5_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000216:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <MX_GPIO_Init+0x17c>)
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	482b      	ldr	r0, [pc, #172]	; (80002d4 <MX_GPIO_Init+0x178>)
 8000226:	f002 fe5f 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 800022a:	f245 3303 	movw	r3, #21251	; 0x5303
 800022e:	613b      	str	r3, [r7, #16]
                          |OUT_PIN4_Pin|OUT_PIN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000234:	2302      	movs	r3, #2
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	4823      	ldr	r0, [pc, #140]	; (80002d0 <MX_GPIO_Init+0x174>)
 8000244:	f002 fe50 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_PIN3_Pin;
 8000248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2302      	movs	r3, #2
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_PIN3_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_GPIO_Init+0x178>)
 8000262:	f002 fe41 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_SW3_Pin;
 8000266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_SW3_GPIO_Port, &GPIO_InitStruct);
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	4619      	mov	r1, r3
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <MX_GPIO_Init+0x178>)
 800027c:	f002 fe34 	bl	8002ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2105      	movs	r1, #5
 8000284:	2008      	movs	r0, #8
 8000286:	f002 fddc 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800028a:	2008      	movs	r0, #8
 800028c:	f002 fdf5 	bl	8002e7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	2105      	movs	r1, #5
 8000294:	2009      	movs	r0, #9
 8000296:	f002 fdd4 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800029a:	2009      	movs	r0, #9
 800029c:	f002 fded 	bl	8002e7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2105      	movs	r1, #5
 80002a4:	200a      	movs	r0, #10
 80002a6:	f002 fdcc 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002aa:	200a      	movs	r0, #10
 80002ac:	f002 fde5 	bl	8002e7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2105      	movs	r1, #5
 80002b4:	2017      	movs	r0, #23
 80002b6:	f002 fdc4 	bl	8002e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ba:	2017      	movs	r0, #23
 80002bc:	f002 fddd 	bl	8002e7a <HAL_NVIC_EnableIRQ>

}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40010800 	.word	0x40010800
 80002d8:	10110000 	.word	0x10110000

080002dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002e0:	f002 fbfc 	bl	8002adc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002e4:	f000 f888 	bl	80003f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002e8:	f7ff ff38 	bl	800015c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80002ec:	f002 faf4 	bl	80028d8 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80002f0:	f002 f8de 	bl	80024b0 <MX_TIM1_Init>
	MX_TIM2_Init();
 80002f4:	f002 f92e 	bl	8002554 <MX_TIM2_Init>
	MX_TIM3_Init();
 80002f8:	f002 f978 	bl	80025ec <MX_TIM3_Init>
	MX_TIM4_Init();
 80002fc:	f002 f9f2 	bl	80026e4 <MX_TIM4_Init>
	MX_SPI2_Init();
 8000300:	f001 ff5a 	bl	80021b8 <MX_SPI2_Init>
	MX_RTC_Init();
 8000304:	f001 feea 	bl	80020dc <MX_RTC_Init>
	MX_USART3_UART_Init();
 8000308:	f002 fb10 	bl	800292c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(400);
 800030c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000310:	f002 fc46 	bl	8002ba0 <HAL_Delay>
	read_settings_from_eeprom();
 8000314:	f000 f8ce 	bl	80004b4 <read_settings_from_eeprom>
	HAL_Delay(400);
 8000318:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800031c:	f002 fc40 	bl	8002ba0 <HAL_Delay>
	max7219_Init ( 7 );
 8000320:	2007      	movs	r0, #7
 8000322:	f001 fd65 	bl	8001df0 <max7219_Init>
	max7219_Decode_On ();
 8000326:	f001 fde9 	bl	8001efc <max7219_Decode_On>
	HAL_TIM_Base_Stop_IT(&htim2);
 800032a:	4827      	ldr	r0, [pc, #156]	; (80003c8 <main+0xec>)
 800032c:	f004 fbe4 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000330:	2100      	movs	r1, #0
 8000332:	4826      	ldr	r0, [pc, #152]	; (80003cc <main+0xf0>)
 8000334:	f004 fc66 	bl	8004c04 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000338:	2104      	movs	r1, #4
 800033a:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0xf0>)
 800033c:	f004 fc62 	bl	8004c04 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000340:	4821      	ldr	r0, [pc, #132]	; (80003c8 <main+0xec>)
 8000342:	f004 fb87 	bl	8004a54 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8000346:	4822      	ldr	r0, [pc, #136]	; (80003d0 <main+0xf4>)
 8000348:	f004 fbd6 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim1);
 800034c:	4821      	ldr	r0, [pc, #132]	; (80003d4 <main+0xf8>)
 800034e:	f004 fbd3 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <main+0xf8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f06f 0201 	mvn.w	r2, #1
 800035a:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xf8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
	DEV_ID =  HAL_GetDEVID();
 8000364:	f002 fc4a 	bl	8002bfc <HAL_GetDEVID>
 8000368:	4602      	mov	r2, r0
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <main+0xfc>)
 800036c:	601a      	str	r2, [r3, #0]
	REV_ID = HAL_GetREVID();
 800036e:	f002 fc39 	bl	8002be4 <HAL_GetREVID>
 8000372:	4602      	mov	r2, r0
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <main+0x100>)
 8000376:	601a      	str	r2, [r3, #0]

	sprintf(dev_id_buffer, "$DVID%d-%d&\r\n",(int)DEV_ID,(int)REV_ID);
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <main+0xfc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <main+0x100>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4917      	ldr	r1, [pc, #92]	; (80003e0 <main+0x104>)
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <main+0x108>)
 8000386:	f005 fc7b 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dev_id_buffer, strlen(dev_id_buffer), HAL_MAX_DELAY);
 800038a:	4816      	ldr	r0, [pc, #88]	; (80003e4 <main+0x108>)
 800038c:	f7ff fede 	bl	800014c <strlen>
 8000390:	4603      	mov	r3, r0
 8000392:	b29a      	uxth	r2, r3
 8000394:	f04f 33ff 	mov.w	r3, #4294967295
 8000398:	4912      	ldr	r1, [pc, #72]	; (80003e4 <main+0x108>)
 800039a:	4813      	ldr	r0, [pc, #76]	; (80003e8 <main+0x10c>)
 800039c:	f005 fad3 	bl	8005946 <HAL_UART_Transmit>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80003a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a4:	f002 fbfc 	bl	8002ba0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)){
 80003a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ac:	480f      	ldr	r0, [pc, #60]	; (80003ec <main+0x110>)
 80003ae:	f002 fef5 	bl	800319c <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0f3      	beq.n	80003a0 <main+0xc4>
			credit = 0;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <main+0x114>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
			system_function_start = false;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <main+0x118>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80003c4:	e7ec      	b.n	80003a0 <main+0xc4>
 80003c6:	bf00      	nop
 80003c8:	20000294 	.word	0x20000294
 80003cc:	20000204 	.word	0x20000204
 80003d0:	200001bc 	.word	0x200001bc
 80003d4:	2000024c 	.word	0x2000024c
 80003d8:	200000bc 	.word	0x200000bc
 80003dc:	200000c0 	.word	0x200000c0
 80003e0:	080064bc 	.word	0x080064bc
 80003e4:	20000110 	.word	0x20000110
 80003e8:	2000031c 	.word	0x2000031c
 80003ec:	40010800 	.word	0x40010800
 80003f0:	200000e4 	.word	0x200000e4
 80003f4:	200000f0 	.word	0x200000f0

080003f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f005 fc32 	bl	8005c70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000428:	2309      	movs	r3, #9
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	2301      	movs	r3, #1
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	2302      	movs	r3, #2
 8000440:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000446:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000448:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800044c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fef6 	bl	8003244 <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800045e:	f001 fcc1 	bl	8001de4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f003 f960 	bl	8003744 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800048a:	f001 fcab 	bl	8001de4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800048e:	2301      	movs	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000496:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f003 faee 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xb2>
	{
		Error_Handler();
 80004a6:	f001 fc9d 	bl	8001de4 <Error_Handler>
	}
}
 80004aa:	bf00      	nop
 80004ac:	3750      	adds	r7, #80	; 0x50
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <read_settings_from_eeprom>:

/* USER CODE BEGIN 4 */
void read_settings_from_eeprom(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
	F1_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80004ba:	2101      	movs	r1, #1
 80004bc:	4884      	ldr	r0, [pc, #528]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 80004be:	f003 fff7 	bl	80044b0 <HAL_RTCEx_BKUPRead>
 80004c2:	4603      	mov	r3, r0
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b83      	ldr	r3, [pc, #524]	; (80006d4 <read_settings_from_eeprom+0x220>)
 80004c8:	701a      	strb	r2, [r3, #0]
	F2_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80004ca:	2102      	movs	r1, #2
 80004cc:	4880      	ldr	r0, [pc, #512]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 80004ce:	f003 ffef 	bl	80044b0 <HAL_RTCEx_BKUPRead>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b80      	ldr	r3, [pc, #512]	; (80006d8 <read_settings_from_eeprom+0x224>)
 80004d8:	701a      	strb	r2, [r3, #0]
	F3_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80004da:	2103      	movs	r1, #3
 80004dc:	487c      	ldr	r0, [pc, #496]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 80004de:	f003 ffe7 	bl	80044b0 <HAL_RTCEx_BKUPRead>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b7d      	ldr	r3, [pc, #500]	; (80006dc <read_settings_from_eeprom+0x228>)
 80004e8:	701a      	strb	r2, [r3, #0]
	F4_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80004ea:	2104      	movs	r1, #4
 80004ec:	4878      	ldr	r0, [pc, #480]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 80004ee:	f003 ffdf 	bl	80044b0 <HAL_RTCEx_BKUPRead>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b7a      	ldr	r3, [pc, #488]	; (80006e0 <read_settings_from_eeprom+0x22c>)
 80004f8:	701a      	strb	r2, [r3, #0]
	F5_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 80004fa:	2105      	movs	r1, #5
 80004fc:	4874      	ldr	r0, [pc, #464]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 80004fe:	f003 ffd7 	bl	80044b0 <HAL_RTCEx_BKUPRead>
 8000502:	4603      	mov	r3, r0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b77      	ldr	r3, [pc, #476]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000508:	701a      	strb	r2, [r3, #0]
	credit = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 800050a:	2106      	movs	r1, #6
 800050c:	4870      	ldr	r0, [pc, #448]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 800050e:	f003 ffcf 	bl	80044b0 <HAL_RTCEx_BKUPRead>
 8000512:	4602      	mov	r2, r0
 8000514:	4b74      	ldr	r3, [pc, #464]	; (80006e8 <read_settings_from_eeprom+0x234>)
 8000516:	601a      	str	r2, [r3, #0]
	if(credit > 2){
 8000518:	4b73      	ldr	r3, [pc, #460]	; (80006e8 <read_settings_from_eeprom+0x234>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d903      	bls.n	8000528 <read_settings_from_eeprom+0x74>
		system_function_start = true;
 8000520:	4b72      	ldr	r3, [pc, #456]	; (80006ec <read_settings_from_eeprom+0x238>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e002      	b.n	800052e <read_settings_from_eeprom+0x7a>
	}else{
		credit = 0;
 8000528:	4b6f      	ldr	r3, [pc, #444]	; (80006e8 <read_settings_from_eeprom+0x234>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"eeprom read DURATION 1 is %d \r\n",F1_DURATION);
 800052e:	4b69      	ldr	r3, [pc, #420]	; (80006d4 <read_settings_from_eeprom+0x220>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	496d      	ldr	r1, [pc, #436]	; (80006f0 <read_settings_from_eeprom+0x23c>)
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fba0 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe02 	bl	800014c <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	4868      	ldr	r0, [pc, #416]	; (80006f4 <read_settings_from_eeprom+0x240>)
 8000554:	f005 f9f7 	bl	8005946 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 2 is %d \r\n",F2_DURATION);
 8000558:	4b5f      	ldr	r3, [pc, #380]	; (80006d8 <read_settings_from_eeprom+0x224>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4965      	ldr	r1, [pc, #404]	; (80006f8 <read_settings_from_eeprom+0x244>)
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fb8b 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fded 	bl	800014c <strlen>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	1d39      	adds	r1, r7, #4
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	485d      	ldr	r0, [pc, #372]	; (80006f4 <read_settings_from_eeprom+0x240>)
 800057e:	f005 f9e2 	bl	8005946 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 3 is %d \r\n",F3_DURATION);
 8000582:	4b56      	ldr	r3, [pc, #344]	; (80006dc <read_settings_from_eeprom+0x228>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	495b      	ldr	r1, [pc, #364]	; (80006fc <read_settings_from_eeprom+0x248>)
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fb76 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fdd8 	bl	800014c <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4853      	ldr	r0, [pc, #332]	; (80006f4 <read_settings_from_eeprom+0x240>)
 80005a8:	f005 f9cd 	bl	8005946 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 4 is %d \r\n",F4_DURATION);
 80005ac:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <read_settings_from_eeprom+0x22c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4952      	ldr	r1, [pc, #328]	; (8000700 <read_settings_from_eeprom+0x24c>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fb61 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fdc3 	bl	800014c <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	4848      	ldr	r0, [pc, #288]	; (80006f4 <read_settings_from_eeprom+0x240>)
 80005d2:	f005 f9b8 	bl	8005946 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 5 is %d \r\n",F5_DURATION);
 80005d6:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <read_settings_from_eeprom+0x230>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4948      	ldr	r1, [pc, #288]	; (8000704 <read_settings_from_eeprom+0x250>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fb4c 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdae 	bl	800014c <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	483e      	ldr	r0, [pc, #248]	; (80006f4 <read_settings_from_eeprom+0x240>)
 80005fc:	f005 f9a3 	bl	8005946 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read CREDIT is %d \r\n",(int)credit);
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <read_settings_from_eeprom+0x234>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	493f      	ldr	r1, [pc, #252]	; (8000708 <read_settings_from_eeprom+0x254>)
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fb38 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fd9a 	bl	800014c <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	4834      	ldr	r0, [pc, #208]	; (80006f4 <read_settings_from_eeprom+0x240>)
 8000624:	f005 f98f 	bl	8005946 <HAL_UART_Transmit>

	if(F1_DURATION == 0 || F2_DURATION == 0 || F3_DURATION == 0 || F4_DURATION == 0 || F5_DURATION == 0){
 8000628:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <read_settings_from_eeprom+0x220>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d013      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <read_settings_from_eeprom+0x224>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00e      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <read_settings_from_eeprom+0x228>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <read_settings_from_eeprom+0x22c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d136      	bne.n	80006c8 <read_settings_from_eeprom+0x214>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, default_credit_duration);
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <read_settings_from_eeprom+0x258>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	481b      	ldr	r0, [pc, #108]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 8000664:	f003 ff0a 	bl	800447c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, default_credit_duration);
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <read_settings_from_eeprom+0x258>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	2102      	movs	r1, #2
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 8000672:	f003 ff03 	bl	800447c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, default_credit_duration);
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <read_settings_from_eeprom+0x258>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	2103      	movs	r1, #3
 800067e:	4814      	ldr	r0, [pc, #80]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 8000680:	f003 fefc 	bl	800447c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, default_credit_duration);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <read_settings_from_eeprom+0x258>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2104      	movs	r1, #4
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 800068e:	f003 fef5 	bl	800447c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, default_credit_duration);
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <read_settings_from_eeprom+0x258>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	2105      	movs	r1, #5
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 800069c:	f003 feee 	bl	800447c <HAL_RTCEx_BKUPWrite>
		F1_DURATION = default_credit_duration;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <read_settings_from_eeprom+0x258>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <read_settings_from_eeprom+0x220>)
 80006a6:	701a      	strb	r2, [r3, #0]
		F2_DURATION = default_credit_duration;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <read_settings_from_eeprom+0x258>)
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <read_settings_from_eeprom+0x224>)
 80006ae:	701a      	strb	r2, [r3, #0]
		F3_DURATION = default_credit_duration;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <read_settings_from_eeprom+0x258>)
 80006b2:	781a      	ldrb	r2, [r3, #0]
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <read_settings_from_eeprom+0x228>)
 80006b6:	701a      	strb	r2, [r3, #0]
		F4_DURATION = default_credit_duration;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <read_settings_from_eeprom+0x258>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <read_settings_from_eeprom+0x22c>)
 80006be:	701a      	strb	r2, [r3, #0]
		F5_DURATION = default_credit_duration;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <read_settings_from_eeprom+0x258>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <read_settings_from_eeprom+0x230>)
 80006c6:	701a      	strb	r2, [r3, #0]
	}
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000150 	.word	0x20000150
 80006d4:	20000013 	.word	0x20000013
 80006d8:	20000014 	.word	0x20000014
 80006dc:	20000015 	.word	0x20000015
 80006e0:	20000016 	.word	0x20000016
 80006e4:	20000017 	.word	0x20000017
 80006e8:	200000e4 	.word	0x200000e4
 80006ec:	200000f0 	.word	0x200000f0
 80006f0:	080064cc 	.word	0x080064cc
 80006f4:	2000031c 	.word	0x2000031c
 80006f8:	080064ec 	.word	0x080064ec
 80006fc:	0800650c 	.word	0x0800650c
 8000700:	0800652c 	.word	0x0800652c
 8000704:	0800654c 	.word	0x0800654c
 8000708:	0800656c 	.word	0x0800656c
 800070c:	20000000 	.word	0x20000000

08000710 <reset_all_output>:
void reset_all_output(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // pin b0 --> out 1
 8000714:	2200      	movs	r2, #0
 8000716:	2101      	movs	r1, #1
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <reset_all_output+0x4c>)
 800071a:	f002 fd56 	bl	80031ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // pin b1 --> out 2
 800071e:	2200      	movs	r2, #0
 8000720:	2102      	movs	r1, #2
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <reset_all_output+0x4c>)
 8000724:	f002 fd51 	bl	80031ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // pin a8 --> out 3
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <reset_all_output+0x50>)
 8000730:	f002 fd4b 	bl	80031ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // pin b8 --> out 4
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <reset_all_output+0x4c>)
 800073c:	f002 fd45 	bl	80031ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // pin b9 --> out 5
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <reset_all_output+0x4c>)
 8000748:	f002 fd3f 	bl	80031ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // pin b12 --> out 6
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	4802      	ldr	r0, [pc, #8]	; (800075c <reset_all_output+0x4c>)
 8000754:	f002 fd39 	bl	80031ca <HAL_GPIO_WritePin>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40010c00 	.word	0x40010c00
 8000760:	40010800 	.word	0x40010800

08000764 <set_output_to>:
void set_output_to(uint8_t pin){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	switch(pin){
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3b03      	subs	r3, #3
 8000772:	2b04      	cmp	r3, #4
 8000774:	d82d      	bhi.n	80007d2 <set_output_to+0x6e>
 8000776:	a201      	add	r2, pc, #4	; (adr r2, 800077c <set_output_to+0x18>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	08000791 	.word	0x08000791
 8000780:	0800079d 	.word	0x0800079d
 8000784:	080007a9 	.word	0x080007a9
 8000788:	080007b7 	.word	0x080007b7
 800078c:	080007c5 	.word	0x080007c5
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // pin b0 --> out 1
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <set_output_to+0x80>)
 8000796:	f002 fd18 	bl	80031ca <HAL_GPIO_WritePin>
		break;
 800079a:	e01f      	b.n	80007dc <set_output_to+0x78>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // pin b1 --> out 2
 800079c:	2201      	movs	r2, #1
 800079e:	2102      	movs	r1, #2
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <set_output_to+0x80>)
 80007a2:	f002 fd12 	bl	80031ca <HAL_GPIO_WritePin>
		break;
 80007a6:	e019      	b.n	80007dc <set_output_to+0x78>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // pin a8 --> out 3
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <set_output_to+0x84>)
 80007b0:	f002 fd0b 	bl	80031ca <HAL_GPIO_WritePin>
		break;
 80007b4:	e012      	b.n	80007dc <set_output_to+0x78>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // pin b8 --> out 4
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <set_output_to+0x80>)
 80007be:	f002 fd04 	bl	80031ca <HAL_GPIO_WritePin>
		break;
 80007c2:	e00b      	b.n	80007dc <set_output_to+0x78>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // pin b9 --> out 5
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <set_output_to+0x80>)
 80007cc:	f002 fcfd 	bl	80031ca <HAL_GPIO_WritePin>
		break;
 80007d0:	e004      	b.n	80007dc <set_output_to+0x78>
	default:
		reset_all_output();
 80007d2:	f7ff ff9d 	bl	8000710 <reset_all_output>
		max7219_Turn_On();
 80007d6:	f001 fb81 	bl	8001edc <max7219_Turn_On>
		break;
 80007da:	bf00      	nop
	}

}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	40010800 	.word	0x40010800

080007ec <segment_display_int>:

void segment_display_int(int number){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	max7219_Decode_On();
 80007f4:	f001 fb82 	bl	8001efc <max7219_Decode_On>
	max7219_Clean ();
 80007f8:	f001 fb22 	bl	8001e40 <max7219_Clean>
	if(number < 10){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b09      	cmp	r3, #9
 8000800:	dc04      	bgt.n	800080c <segment_display_int+0x20>
		max7219_PrintItos (DIGIT_1, number );
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	2001      	movs	r0, #1
 8000806:	f001 fbe1 	bl	8001fcc <max7219_PrintItos>
	}else if(number >= 10 && number < 100){
		max7219_PrintItos (DIGIT_2, number );
	}else{
		max7219_PrintItos (DIGIT_3, number );
	}
}
 800080a:	e00e      	b.n	800082a <segment_display_int+0x3e>
	}else if(number >= 10 && number < 100){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b09      	cmp	r3, #9
 8000810:	dd07      	ble.n	8000822 <segment_display_int+0x36>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b63      	cmp	r3, #99	; 0x63
 8000816:	dc04      	bgt.n	8000822 <segment_display_int+0x36>
		max7219_PrintItos (DIGIT_2, number );
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	2002      	movs	r0, #2
 800081c:	f001 fbd6 	bl	8001fcc <max7219_PrintItos>
}
 8000820:	e003      	b.n	800082a <segment_display_int+0x3e>
		max7219_PrintItos (DIGIT_3, number );
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	2003      	movs	r0, #3
 8000826:	f001 fbd1 	bl	8001fcc <max7219_PrintItos>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <segment_display_function_settings>:
void segment_display_function_settings(int func_number,int value){
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
	max7219_Decode_On();
 800083c:	f001 fb5e 	bl	8001efc <max7219_Decode_On>
	max7219_Clean ();
 8000840:	f001 fafe 	bl	8001e40 <max7219_Clean>
	if(value < 10){
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2b09      	cmp	r3, #9
 8000848:	dc04      	bgt.n	8000854 <segment_display_function_settings+0x22>
		max7219_PrintItos (DIGIT_1, value );
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	2001      	movs	r0, #1
 800084e:	f001 fbbd 	bl	8001fcc <max7219_PrintItos>
 8000852:	e009      	b.n	8000868 <segment_display_function_settings+0x36>
	}else if(value >= 10 && value < 100){
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b09      	cmp	r3, #9
 8000858:	dd06      	ble.n	8000868 <segment_display_function_settings+0x36>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b63      	cmp	r3, #99	; 0x63
 800085e:	dc03      	bgt.n	8000868 <segment_display_function_settings+0x36>
		max7219_PrintItos (DIGIT_2, value );
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	2002      	movs	r0, #2
 8000864:	f001 fbb2 	bl	8001fcc <max7219_PrintItos>
	}
	max7219_PrintDigit(DIGIT_3,func_number,true);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2003      	movs	r0, #3
 8000872:	f001 fb53 	bl	8001f1c <max7219_PrintDigit>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <segment_display_standby>:
void segment_display_standby(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	max7219_Clean ();
 8000884:	f001 fadc 	bl	8001e40 <max7219_Clean>
	max7219_Decode_On();
 8000888:	f001 fb38 	bl	8001efc <max7219_Decode_On>
	max7219_Clean ();
 800088c:	f001 fad8 	bl	8001e40 <max7219_Clean>
	if(displayEnable == true){
 8000890:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <segment_display_standby+0x194>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 80a8 	beq.w	80009ec <segment_display_standby+0x16c>
		switch(standby_counter){
 800089c:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <segment_display_standby+0x198>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b06      	cmp	r3, #6
 80008a2:	f200 8081 	bhi.w	80009a8 <segment_display_standby+0x128>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <segment_display_standby+0x2c>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008c9 	.word	0x080008c9
 80008b0:	080008e9 	.word	0x080008e9
 80008b4:	08000909 	.word	0x08000909
 80008b8:	08000929 	.word	0x08000929
 80008bc:	08000949 	.word	0x08000949
 80008c0:	08000969 	.word	0x08000969
 80008c4:	08000989 	.word	0x08000989
		case 0:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80008c8:	2200      	movs	r2, #0
 80008ca:	210a      	movs	r1, #10
 80008cc:	2001      	movs	r0, #1
 80008ce:	f001 fb25 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	2002      	movs	r0, #2
 80008d8:	f001 fb20 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 80008dc:	2200      	movs	r2, #0
 80008de:	210f      	movs	r1, #15
 80008e0:	2003      	movs	r0, #3
 80008e2:	f001 fb1b 	bl	8001f1c <max7219_PrintDigit>
			break;
 80008e6:	e06f      	b.n	80009c8 <segment_display_standby+0x148>
		case 1:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 80008e8:	2200      	movs	r2, #0
 80008ea:	210f      	movs	r1, #15
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 fb15 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210a      	movs	r1, #10
 80008f6:	2002      	movs	r0, #2
 80008f8:	f001 fb10 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 80008fc:	2200      	movs	r2, #0
 80008fe:	210f      	movs	r1, #15
 8000900:	2003      	movs	r0, #3
 8000902:	f001 fb0b 	bl	8001f1c <max7219_PrintDigit>
			break;
 8000906:	e05f      	b.n	80009c8 <segment_display_standby+0x148>
		case 2:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000908:	2200      	movs	r2, #0
 800090a:	210f      	movs	r1, #15
 800090c:	2001      	movs	r0, #1
 800090e:	f001 fb05 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	2002      	movs	r0, #2
 8000918:	f001 fb00 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 800091c:	2200      	movs	r2, #0
 800091e:	210a      	movs	r1, #10
 8000920:	2003      	movs	r0, #3
 8000922:	f001 fafb 	bl	8001f1c <max7219_PrintDigit>
			break;
 8000926:	e04f      	b.n	80009c8 <segment_display_standby+0x148>
		case 3:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000928:	2200      	movs	r2, #0
 800092a:	210f      	movs	r1, #15
 800092c:	2001      	movs	r0, #1
 800092e:	f001 faf5 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 8000932:	2200      	movs	r2, #0
 8000934:	210a      	movs	r1, #10
 8000936:	2002      	movs	r0, #2
 8000938:	f001 faf0 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 800093c:	2200      	movs	r2, #0
 800093e:	210f      	movs	r1, #15
 8000940:	2003      	movs	r0, #3
 8000942:	f001 faeb 	bl	8001f1c <max7219_PrintDigit>
			break;
 8000946:	e03f      	b.n	80009c8 <segment_display_standby+0x148>
		case 4:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000948:	2200      	movs	r2, #0
 800094a:	210a      	movs	r1, #10
 800094c:	2001      	movs	r0, #1
 800094e:	f001 fae5 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	2002      	movs	r0, #2
 8000958:	f001 fae0 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 800095c:	2200      	movs	r2, #0
 800095e:	210f      	movs	r1, #15
 8000960:	2003      	movs	r0, #3
 8000962:	f001 fadb 	bl	8001f1c <max7219_PrintDigit>
			break;
 8000966:	e02f      	b.n	80009c8 <segment_display_standby+0x148>
		case 5:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000968:	2200      	movs	r2, #0
 800096a:	210a      	movs	r1, #10
 800096c:	2001      	movs	r0, #1
 800096e:	f001 fad5 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 8000972:	2200      	movs	r2, #0
 8000974:	210a      	movs	r1, #10
 8000976:	2002      	movs	r0, #2
 8000978:	f001 fad0 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 800097c:	2200      	movs	r2, #0
 800097e:	210a      	movs	r1, #10
 8000980:	2003      	movs	r0, #3
 8000982:	f001 facb 	bl	8001f1c <max7219_PrintDigit>
			break;
 8000986:	e01f      	b.n	80009c8 <segment_display_standby+0x148>
		case 6:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000988:	2200      	movs	r2, #0
 800098a:	210a      	movs	r1, #10
 800098c:	2001      	movs	r0, #1
 800098e:	f001 fac5 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 8000992:	2200      	movs	r2, #0
 8000994:	210a      	movs	r1, #10
 8000996:	2002      	movs	r0, #2
 8000998:	f001 fac0 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 800099c:	2200      	movs	r2, #0
 800099e:	210a      	movs	r1, #10
 80009a0:	2003      	movs	r0, #3
 80009a2:	f001 fabb 	bl	8001f1c <max7219_PrintDigit>
			break;
 80009a6:	e00f      	b.n	80009c8 <segment_display_standby+0x148>
		default:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80009a8:	2200      	movs	r2, #0
 80009aa:	210a      	movs	r1, #10
 80009ac:	2001      	movs	r0, #1
 80009ae:	f001 fab5 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210a      	movs	r1, #10
 80009b6:	2002      	movs	r0, #2
 80009b8:	f001 fab0 	bl	8001f1c <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 80009bc:	2200      	movs	r2, #0
 80009be:	210a      	movs	r1, #10
 80009c0:	2003      	movs	r0, #3
 80009c2:	f001 faab 	bl	8001f1c <max7219_PrintDigit>
			break;
 80009c6:	bf00      	nop
		}
		if(standby_counter >= 6){
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <segment_display_standby+0x198>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d903      	bls.n	80009d8 <segment_display_standby+0x158>
			standby_counter = 0;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <segment_display_standby+0x198>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e005      	b.n	80009e4 <segment_display_standby+0x164>
		}else{
			standby_counter += 1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <segment_display_standby+0x198>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <segment_display_standby+0x198>)
 80009e2:	701a      	strb	r2, [r3, #0]
		}
		//		max7219_PrintDigit(DIGIT_1,MINUS,false);
		//		max7219_PrintDigit(DIGIT_2,MINUS,false);
		//		max7219_PrintDigit(DIGIT_3,MINUS,false);
		displayEnable = false;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <segment_display_standby+0x194>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		max7219_PrintDigit(DIGIT_2,BLANK,false);
		max7219_PrintDigit(DIGIT_3,BLANK,false);
		displayEnable = true;
	}

}
 80009ea:	e011      	b.n	8000a10 <segment_display_standby+0x190>
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 80009ec:	2200      	movs	r2, #0
 80009ee:	210f      	movs	r1, #15
 80009f0:	2001      	movs	r0, #1
 80009f2:	f001 fa93 	bl	8001f1c <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	2002      	movs	r0, #2
 80009fc:	f001 fa8e 	bl	8001f1c <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000a00:	2200      	movs	r2, #0
 8000a02:	210f      	movs	r1, #15
 8000a04:	2003      	movs	r0, #3
 8000a06:	f001 fa89 	bl	8001f1c <max7219_PrintDigit>
		displayEnable = true;
 8000a0a:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <segment_display_standby+0x194>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	200000fc 	.word	0x200000fc

08000a1c <iot_send_inserted_credit>:
	max7219_PrintDigit(DIGIT_1,BLANK,false);
	max7219_PrintDigit(DIGIT_2,BLANK,false);
	max7219_PrintDigit(DIGIT_3,BLANK,false);
}

void iot_send_inserted_credit(uint16_t inst_credit){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	; 0x38
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cINST_%d_%d%c\r\n",0x02,(unsigned int)credit,(unsigned int)inst_credit,0x03);
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <iot_send_inserted_credit+0x64>)
 8000a28:	6819      	ldr	r1, [r3, #0]
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	f107 000c 	add.w	r0, r7, #12
 8000a30:	2203      	movs	r2, #3
 8000a32:	9201      	str	r2, [sp, #4]
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	460b      	mov	r3, r1
 8000a38:	2202      	movs	r2, #2
 8000a3a:	4912      	ldr	r1, [pc, #72]	; (8000a84 <iot_send_inserted_credit+0x68>)
 8000a3c:	f005 f920 	bl	8005c80 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fb81 	bl	800014c <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <iot_send_inserted_credit+0x6c>)
 8000a58:	f004 ff75 	bl	8005946 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fb73 	bl	800014c <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f107 010c 	add.w	r1, r7, #12
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <iot_send_inserted_credit+0x70>)
 8000a74:	f004 ff67 	bl	8005946 <HAL_UART_Transmit>
	}
}
 8000a78:	bf00      	nop
 8000a7a:	3730      	adds	r7, #48	; 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000e4 	.word	0x200000e4
 8000a84:	08006588 	.word	0x08006588
 8000a88:	2000031c 	.word	0x2000031c
 8000a8c:	200002dc 	.word	0x200002dc

08000a90 <iot_send_mode>:
void iot_send_mode(uint8_t mode){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cMODE_%d_%d%c\r\n",0x02,(unsigned int)credit,(unsigned int)mode,0x03);
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <iot_send_mode+0x64>)
 8000a9c:	6819      	ldr	r1, [r3, #0]
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f107 000c 	add.w	r0, r7, #12
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	9201      	str	r2, [sp, #4]
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	2202      	movs	r2, #2
 8000aae:	4912      	ldr	r1, [pc, #72]	; (8000af8 <iot_send_mode+0x68>)
 8000ab0:	f005 f8e6 	bl	8005c80 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb47 	bl	800014c <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f107 010c 	add.w	r1, r7, #12
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <iot_send_mode+0x6c>)
 8000acc:	f004 ff3b 	bl	8005946 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fb39 	bl	800014c <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <iot_send_mode+0x70>)
 8000ae8:	f004 ff2d 	bl	8005946 <HAL_UART_Transmit>
	}
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000e4 	.word	0x200000e4
 8000af8:	0800659c 	.word	0x0800659c
 8000afc:	2000031c 	.word	0x2000031c
 8000b00:	200002dc 	.word	0x200002dc

08000b04 <iot_send_status>:
void iot_send_status(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af02      	add	r7, sp, #8
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cSTAT_%d%c\r\n",0x02,(unsigned int)credit,0x03);
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <iot_send_status+0x54>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	1d38      	adds	r0, r7, #4
 8000b10:	2303      	movs	r3, #3
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4613      	mov	r3, r2
 8000b16:	2202      	movs	r2, #2
 8000b18:	4910      	ldr	r1, [pc, #64]	; (8000b5c <iot_send_status+0x58>)
 8000b1a:	f005 f8b1 	bl	8005c80 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb13 	bl	800014c <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	1d39      	adds	r1, r7, #4
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <iot_send_status+0x5c>)
 8000b32:	f004 ff08 	bl	8005946 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb07 	bl	800014c <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	1d39      	adds	r1, r7, #4
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <iot_send_status+0x60>)
 8000b4a:	f004 fefc 	bl	8005946 <HAL_UART_Transmit>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000e4 	.word	0x200000e4
 8000b5c:	080065b0 	.word	0x080065b0
 8000b60:	2000031c 	.word	0x2000031c
 8000b64:	200002dc 	.word	0x200002dc

08000b68 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b098      	sub	sp, #96	; 0x60
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { /// tick every 1s
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4aa7      	ldr	r2, [pc, #668]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	f040 80bc 	bne.w	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
		max7219_Turn_On();
 8000b7c:	f001 f9ae 	bl	8001edc <max7219_Turn_On>
		//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, 2);
		//		char tmp[25];
		//		uint8_t mapped_value = calculate_adc(adcBuffer[0]);
		if(clearButton == true){
 8000b80:	4ba5      	ldr	r3, [pc, #660]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d044      	beq.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0xaa>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	48a4      	ldr	r0, [pc, #656]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b8c:	f002 fb06 	bl	800319c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d112      	bne.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_UART_Transmit(&huart1, "---> CLEAR BTN >>PRESS<< !!!\r\n", 30, HAL_MAX_DELAY);
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	221e      	movs	r2, #30
 8000b9c:	49a0      	ldr	r1, [pc, #640]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b9e:	48a1      	ldr	r0, [pc, #644]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ba0:	f004 fed1 	bl	8005946 <HAL_UART_Transmit>
				selected_button = 0;
 8000ba4:	4ba0      	ldr	r3, [pc, #640]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000baa:	f7ff fdb1 	bl	8000710 <reset_all_output>
				clearButtonCounter += 1;
 8000bae:	4b9f      	ldr	r3, [pc, #636]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b9d      	ldr	r3, [pc, #628]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e008      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x66>
			}else{
				clearButton = false;
 8000bbc:	4b96      	ldr	r3, [pc, #600]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000bc2:	4b9a      	ldr	r3, [pc, #616]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000bc8:	4899      	ldr	r0, [pc, #612]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000bca:	f003 ff95 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
			}
			if(clearButtonCounter > 5){
 8000bce:	4b97      	ldr	r3, [pc, #604]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	d91d      	bls.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0xaa>
				HAL_UART_Transmit(&huart1, "---> CLEAR CREDITS !!!\r\n", 24, HAL_MAX_DELAY);
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	2218      	movs	r2, #24
 8000bdc:	4995      	ldr	r1, [pc, #596]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000bde:	4891      	ldr	r0, [pc, #580]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000be0:	f004 feb1 	bl	8005946 <HAL_UART_Transmit>
				clearButton = false;
 8000be4:	4b8c      	ldr	r3, [pc, #560]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000bea:	4b90      	ldr	r3, [pc, #576]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
				credit = 0;
 8000bf0:	4b91      	ldr	r3, [pc, #580]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
				system_function_start = false;
 8000bf6:	4b91      	ldr	r3, [pc, #580]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
				selected_button = 0;
 8000bfc:	4b8a      	ldr	r3, [pc, #552]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000c02:	f7ff fd85 	bl	8000710 <reset_all_output>
				clearButtonCounter = 0;
 8000c06:	4b89      	ldr	r3, [pc, #548]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000c0c:	4888      	ldr	r0, [pc, #544]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c0e:	f003 ff73 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (selected_menu > 0) {
 8000c12:	4b8b      	ldr	r3, [pc, #556]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d05c      	beq.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x16e>
			HAL_TIM_Base_Stop_IT(&htim2); //stop main program
 8000c1c:	4889      	ldr	r0, [pc, #548]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c1e:	f003 ff6b 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
			switch (selected_menu) {
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d862      	bhi.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000c2e:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c49 	.word	0x08000c49
 8000c38:	08000c61 	.word	0x08000c61
 8000c3c:	08000c79 	.word	0x08000c79
 8000c40:	08000c9b 	.word	0x08000c9b
 8000c44:	08000cbd 	.word	0x08000cbd
			case 1:
				//				max7219_PrintDigit(DIGIT_3,16,true);
				segment_display_function_settings(selected_menu,F1_DURATION);
 8000c48:	4b7d      	ldr	r3, [pc, #500]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b7d      	ldr	r3, [pc, #500]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	4610      	mov	r0, r2
 8000c5a:	f7ff fdea 	bl	8000832 <segment_display_function_settings>
				//				max7219_PrintDigit(DIGIT_2,NUM_1,false);
				//				memset(tmp, 0, sizeof tmp);
				//				sprintf(tmp, "F1 VALUE : %d \r\n", (unsigned int) mapped_value);
				//				HAL_UART_Transmit(&huart1, tmp, strlen(tmp), HAL_MAX_DELAY);
				//				F1_DURATION = mapped_value;
				break;
 8000c5e:	e049      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 2:
				segment_display_function_settings(selected_menu,F2_DURATION);
 8000c60:	4b77      	ldr	r3, [pc, #476]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b78      	ldr	r3, [pc, #480]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4610      	mov	r0, r2
 8000c72:	f7ff fdde 	bl	8000832 <segment_display_function_settings>
				break;
 8000c76:	e03d      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 3:
				max7219_PrintDigit(DIGIT_3,18,true);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2112      	movs	r1, #18
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f001 f94d 	bl	8001f1c <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F3_DURATION);
 8000c82:	4b6f      	ldr	r3, [pc, #444]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b71      	ldr	r3, [pc, #452]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	4610      	mov	r0, r2
 8000c94:	f7ff fdcd 	bl	8000832 <segment_display_function_settings>
				break;
 8000c98:	e02c      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 4:
				max7219_PrintDigit(DIGIT_3,19,true);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2113      	movs	r1, #19
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f001 f93c 	bl	8001f1c <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F4_DURATION);
 8000ca4:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	f7ff fdbc 	bl	8000832 <segment_display_function_settings>
				break;
 8000cba:	e01b      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 5:
				segment_display_function_settings(selected_menu,F5_DURATION);
 8000cbc:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4610      	mov	r0, r2
 8000cce:	f7ff fdb0 	bl	8000832 <segment_display_function_settings>
				break;
 8000cd2:	bf00      	nop
 8000cd4:	e00e      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
			}
		} else {
			max7219_Decode_On();
 8000cd6:	f001 f911 	bl	8001efc <max7219_Decode_On>
			HAL_TIM_Base_Start_IT(&htim2);
 8000cda:	485a      	ldr	r0, [pc, #360]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cdc:	f003 feba 	bl	8004a54 <HAL_TIM_Base_Start_IT>
			if(clearButton == false){
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x18c>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000cee:	4850      	ldr	r0, [pc, #320]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000cf0:	f003 ff02 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if (htim->Instance == TIM2) { /// tick every 1ms
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	f040 80d4 	bne.w	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x340>
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
		char credit_tmp_msg[55];
		if(last_credit_insert > 0){
 8000d00:	4b56      	ldr	r3, [pc, #344]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d01e      	beq.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x1de>
			sprintf(credit_tmp_msg,"last credit inserted: %d \r\n",(unsigned int)last_credit_insert);
 8000d08:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4953      	ldr	r1, [pc, #332]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 ffb3 	bl	8005c80 <siprintf>
			iot_send_inserted_credit(last_credit_insert);
 8000d1a:	4b50      	ldr	r3, [pc, #320]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe7c 	bl	8000a1c <iot_send_inserted_credit>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa0f 	bl	800014c <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	483a      	ldr	r0, [pc, #232]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d3c:	f004 fe03 	bl	8005946 <HAL_UART_Transmit>
			last_credit_insert = 0;
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	801a      	strh	r2, [r3, #0]
		}
		if(last_credit_insert_bank > 0){
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d01e      	beq.n	8000d8c <HAL_TIM_PeriodElapsedCallback+0x224>
			sprintf(credit_tmp_msg,"last bank credit inserted: %d \r\n",(unsigned int)last_credit_insert_bank);
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4943      	ldr	r1, [pc, #268]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 ff90 	bl	8005c80 <siprintf>
			iot_send_inserted_credit(last_credit_insert_bank);
 8000d60:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe59 	bl	8000a1c <iot_send_inserted_credit>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff f9ec 	bl	800014c <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f107 010c 	add.w	r1, r7, #12
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d80:	4828      	ldr	r0, [pc, #160]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d82:	f004 fde0 	bl	8005946 <HAL_UART_Transmit>
			last_credit_insert_bank = 0;
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	801a      	strh	r2, [r3, #0]
		}
		if(tim2_round_counter >= 10){
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b09      	cmp	r3, #9
 8000d92:	d91c      	bls.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x266>
			HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	220d      	movs	r2, #13
 8000d9a:	4935      	ldr	r1, [pc, #212]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000d9c:	4821      	ldr	r0, [pc, #132]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d9e:	f004 fdd2 	bl	8005946 <HAL_UART_Transmit>
			logic_runner();
 8000da2:	f000 fd9f 	bl	80018e4 <logic_runner>
			tim2_round_counter = 0;
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
			if(iot_round_counter > 30){
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b1e      	cmp	r3, #30
 8000db2:	d905      	bls.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x258>
				iot_send_status();
 8000db4:	f7ff fea6 	bl	8000b04 <iot_send_status>
				iot_round_counter = 0;
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e073      	b.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x340>
			}else{
				iot_round_counter += 1;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e06c      	b.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x340>
			}
		}else{
			if((tim2_round_counter%3) == 0){
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd8:	0859      	lsrs	r1, r3, #1
 8000dda:	460b      	mov	r3, r1
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	440b      	add	r3, r1
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d14d      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x31c>
				if (selected_button != 0) {
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d046      	beq.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x318>
					if(displayToggle){
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x2a0>
						max7219_Turn_On();
 8000dfc:	f001 f86e 	bl	8001edc <max7219_Turn_On>
						displayToggle = false;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e03d      	b.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x31c>
					}else{
						max7219_Turn_Off();
 8000e08:	f001 f870 	bl	8001eec <max7219_Turn_Off>
						displayToggle = true;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e037      	b.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8000e14:	40000800 	.word	0x40000800
 8000e18:	200000fd 	.word	0x200000fd
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	080065c0 	.word	0x080065c0
 8000e24:	2000031c 	.word	0x2000031c
 8000e28:	200000e8 	.word	0x200000e8
 8000e2c:	200000fe 	.word	0x200000fe
 8000e30:	200001bc 	.word	0x200001bc
 8000e34:	080065e0 	.word	0x080065e0
 8000e38:	200000e4 	.word	0x200000e4
 8000e3c:	200000f0 	.word	0x200000f0
 8000e40:	200000e1 	.word	0x200000e1
 8000e44:	20000294 	.word	0x20000294
 8000e48:	20000013 	.word	0x20000013
 8000e4c:	20000014 	.word	0x20000014
 8000e50:	20000015 	.word	0x20000015
 8000e54:	20000016 	.word	0x20000016
 8000e58:	20000017 	.word	0x20000017
 8000e5c:	200000f8 	.word	0x200000f8
 8000e60:	080065fc 	.word	0x080065fc
 8000e64:	200000fa 	.word	0x200000fa
 8000e68:	08006618 	.word	0x08006618
 8000e6c:	200000ff 	.word	0x200000ff
 8000e70:	0800663c 	.word	0x0800663c
 8000e74:	20000100 	.word	0x20000100
 8000e78:	aaaaaaab 	.word	0xaaaaaaab
 8000e7c:	2000000d 	.word	0x2000000d
					}
				}else{
					max7219_Turn_On();
 8000e80:	f001 f82c 	bl	8001edc <max7219_Turn_On>
				}
			}
			if(credit <= 0){
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d107      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x334>
				if((tim2_round_counter&2) == 0){
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x334>
					segment_display_standby();
 8000e98:	f7ff fcf2 	bl	8000880 <segment_display_standby>
				}
			}

			tim2_round_counter += 1;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000ea6:	701a      	strb	r2, [r3, #0]

		}
	}
	if (htim->Instance == TIM1) { /// tick every 1000ms
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d136      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		stop_and_clear_tim1();
 8000eb2:	f000 fdeb 	bl	8001a8c <stop_and_clear_tim1>
		//		enable_all_exti_it();
		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM SW DEBOUNCE TICK!\r\n", 23, HAL_MAX_DELAY);
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	2217      	movs	r2, #23
 8000ebc:	491d      	ldr	r1, [pc, #116]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000ebe:	481e      	ldr	r0, [pc, #120]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000ec0:	f004 fd41 	bl	8005946 <HAL_UART_Transmit>
		char tmp[25];
		sprintf(tmp, "selected mode %d \r\n", (unsigned int) selected_button);
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ed0:	491b      	ldr	r1, [pc, #108]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 fed4 	bl	8005c80 <siprintf>
		reset_all_output();
 8000ed8:	f7ff fc1a 	bl	8000710 <reset_all_output>
		set_output_to(selected_button);
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc3e 	bl	8000764 <set_output_to>
		iot_send_mode(selected_button);
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fdce 	bl	8000a90 <iot_send_mode>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp, strlen(tmp), HAL_MAX_DELAY);
 8000ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f927 	bl	800014c <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000f0c:	f004 fd1b 	bl	8005946 <HAL_UART_Transmit>
		if(selected_menu <= 0){
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x3b8>
			HAL_TIM_Base_Start_IT(&htim2);
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8000f1c:	f003 fd9a 	bl	8004a54 <HAL_TIM_Base_Start_IT>
		}

	}
}
 8000f20:	bf00      	nop
 8000f22:	3760      	adds	r7, #96	; 0x60
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000e4 	.word	0x200000e4
 8000f2c:	200000ff 	.word	0x200000ff
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	0800664c 	.word	0x0800664c
 8000f38:	2000031c 	.word	0x2000031c
 8000f3c:	200000e8 	.word	0x200000e8
 8000f40:	08006664 	.word	0x08006664
 8000f44:	200000e1 	.word	0x200000e1
 8000f48:	20000294 	.word	0x20000294

08000f4c <disable_all_exti_it>:
void disable_all_exti_it(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000f50:	2008      	movs	r0, #8
 8000f52:	f001 ffa0 	bl	8002e96 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f56:	2009      	movs	r0, #9
 8000f58:	f001 ff9d 	bl	8002e96 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 ff9a 	bl	8002e96 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000f62:	2017      	movs	r0, #23
 8000f64:	f001 ff97 	bl	8002e96 <HAL_NVIC_DisableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <enable_all_exti_it>:
void enable_all_exti_it(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000f70:	2008      	movs	r0, #8
 8000f72:	f001 ffaa 	bl	8002eca <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000f76:	2009      	movs	r0, #9
 8000f78:	f001 ffa7 	bl	8002eca <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f001 ffa4 	bl	8002eca <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000f82:	2017      	movs	r0, #23
 8000f84:	f001 ffa1 	bl	8002eca <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f88:	2008      	movs	r0, #8
 8000f8a:	f001 ff76 	bl	8002e7a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f8e:	2009      	movs	r0, #9
 8000f90:	f001 ff73 	bl	8002e7a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f001 ff70 	bl	8002e7a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f9a:	2017      	movs	r0, #23
 8000f9c:	f001 ff6d 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b0b0      	sub	sp, #192	; 0xc0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	disable_all_exti_it();
 8000fae:	f7ff ffcd 	bl	8000f4c <disable_all_exti_it>
	char message_sw2[] = "Switch [2] pressed!\r\n";
 8000fb2:	4bc0      	ldr	r3, [pc, #768]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x310>)
 8000fb4:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000fb8:	461d      	mov	r5, r3
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fc2:	6020      	str	r0, [r4, #0]
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	8021      	strh	r1, [r4, #0]
	char message_sw3[] = "FRONT SW [1] pressed!\r\n";
 8000fc8:	4bbb      	ldr	r3, [pc, #748]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x314>)
 8000fca:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000fce:	461d      	mov	r5, r3
 8000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fd8:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw4[] = "FRONT SW [2] pressed!\r\n";
 8000fdc:	4bb7      	ldr	r3, [pc, #732]	; (80012bc <HAL_GPIO_EXTI_Callback+0x318>)
 8000fde:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fec:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw5[] = "FRONT SW [3] pressed!\r\n";
 8000ff0:	4bb3      	ldr	r3, [pc, #716]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ff2:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001000:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw6[] = "FRONT SW [4] pressed!\r\n";
 8001004:	4baf      	ldr	r3, [pc, #700]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x320>)
 8001006:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800100a:	461d      	mov	r5, r3
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001014:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw7[] = "FRONT SW [5] pressed!\r\n";
 8001018:	4bab      	ldr	r3, [pc, #684]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x324>)
 800101a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800101e:	461d      	mov	r5, r3
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001024:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001028:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t tickstart = HAL_GetTick();
 800102c:	f001 fdae 	bl	8002b8c <HAL_GetTick>
 8001030:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	char tick_msg[35];
	sprintf(tick_msg,"---- sysTick : %d\r\n",tickstart);
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800103c:	49a3      	ldr	r1, [pc, #652]	; (80012cc <HAL_GPIO_EXTI_Callback+0x328>)
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fe1e 	bl	8005c80 <siprintf>
	if( (tickstart - lastTimePress)<=50){
 8001044:	4ba2      	ldr	r3, [pc, #648]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b32      	cmp	r3, #50	; 0x32
 8001050:	d809      	bhi.n	8001066 <HAL_GPIO_EXTI_Callback+0xc2>
		HAL_UART_Transmit(&huart1,"too many times press !!!!\r\n", 27,HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	221b      	movs	r2, #27
 8001058:	499e      	ldr	r1, [pc, #632]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x330>)
 800105a:	489f      	ldr	r0, [pc, #636]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 800105c:	f004 fc73 	bl	8005946 <HAL_UART_Transmit>
		enable_all_exti_it();
 8001060:	f7ff ff84 	bl	8000f6c <enable_all_exti_it>
 8001064:	e18a      	b.n	800137c <HAL_GPIO_EXTI_Callback+0x3d8>
		return;
	}else{
		lastTimePress = tickstart;
 8001066:	4a9a      	ldr	r2, [pc, #616]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800106c:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)tick_msg, strlen(tick_msg),
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f86a 	bl	800014c <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	b29a      	uxth	r2, r3
 800107c:	f107 0108 	add.w	r1, r7, #8
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	4894      	ldr	r0, [pc, #592]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 8001086:	f004 fc5e 	bl	8005946 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	if (GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d131      	bne.n	80010f4 <HAL_GPIO_EXTI_Callback+0x150>
 8001090:	2104      	movs	r1, #4
 8001092:	4892      	ldr	r0, [pc, #584]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 8001094:	f002 f882 	bl	800319c <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d12a      	bne.n	80010f4 <HAL_GPIO_EXTI_Callback+0x150>
		enable_all_exti_it();
 800109e:	f7ff ff65 	bl	8000f6c <enable_all_exti_it>
		HAL_TIM_Base_Stop_IT(&htim2);
 80010a2:	488f      	ldr	r0, [pc, #572]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x33c>)
 80010a4:	f003 fd28 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_sw2, strlen(message_sw2),
 80010a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f84d 	bl	800014c <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4886      	ldr	r0, [pc, #536]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 80010c0:	f004 fc41 	bl	8005946 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		selected_menu += 1;
 80010c4:	4b87      	ldr	r3, [pc, #540]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b85      	ldr	r3, [pc, #532]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 80010d0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 80010d2:	4885      	ldr	r0, [pc, #532]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x344>)
 80010d4:	f003 fcbe 	bl	8004a54 <HAL_TIM_Base_Start_IT>
		if (selected_menu > 5) {
 80010d8:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d908      	bls.n	80010f4 <HAL_GPIO_EXTI_Callback+0x150>
			selected_menu = 0;
 80010e2:	4b80      	ldr	r3, [pc, #512]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 80010e8:	487f      	ldr	r0, [pc, #508]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x344>)
 80010ea:	f003 fd05 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80010ee:	487c      	ldr	r0, [pc, #496]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x33c>)
 80010f0:	f003 fcb0 	bl	8004a54 <HAL_TIM_Base_Start_IT>
		}
	}
	if(selected_menu > 0){
 80010f4:	4b7b      	ldr	r3, [pc, #492]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01c      	beq.n	8001138 <HAL_GPIO_EXTI_Callback+0x194>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80010fe:	2108      	movs	r1, #8
 8001100:	4876      	ldr	r0, [pc, #472]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 8001102:	f002 f84b 	bl	800319c <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d106      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x176>
			set_add_duration_of_function(selected_menu);
 800110c:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f98e 	bl	8001434 <set_add_duration_of_function>
 8001118:	e12b      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 800111a:	2110      	movs	r1, #16
 800111c:	486f      	ldr	r0, [pc, #444]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 800111e:	f002 f83d 	bl	800319c <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 8124 	bne.w	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
			set_substract_duration_of_function(selected_menu);
 800112a:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x340>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fa15 	bl	8001560 <set_substract_duration_of_function>
 8001136:	e11c      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
		}
	}
	else if (system_function_start) {
 8001138:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <HAL_GPIO_EXTI_Callback+0x348>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8117 	beq.w	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001144:	4866      	ldr	r0, [pc, #408]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001146:	f003 fcd7 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 800114a:	4869      	ldr	r0, [pc, #420]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x34c>)
 800114c:	f003 fcd4 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001150:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x34c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001158:	4b61      	ldr	r3, [pc, #388]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x33c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
		displayToggle = true;
 8001160:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x350>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		max7219_Turn_On();
 8001166:	f000 feb9 	bl	8001edc <max7219_Turn_On>
		switch (GPIO_Pin) {
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	2b20      	cmp	r3, #32
 800116e:	d05a      	beq.n	8001226 <HAL_GPIO_EXTI_Callback+0x282>
 8001170:	2b20      	cmp	r3, #32
 8001172:	dc04      	bgt.n	800117e <HAL_GPIO_EXTI_Callback+0x1da>
 8001174:	2b08      	cmp	r3, #8
 8001176:	d008      	beq.n	800118a <HAL_GPIO_EXTI_Callback+0x1e6>
 8001178:	2b10      	cmp	r3, #16
 800117a:	d02d      	beq.n	80011d8 <HAL_GPIO_EXTI_Callback+0x234>
 800117c:	e0f9      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
 800117e:	2b40      	cmp	r3, #64	; 0x40
 8001180:	d078      	beq.n	8001274 <HAL_GPIO_EXTI_Callback+0x2d0>
 8001182:	2b80      	cmp	r3, #128	; 0x80
 8001184:	f000 80c0 	beq.w	8001308 <HAL_GPIO_EXTI_Callback+0x364>
 8001188:	e0f3      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
		case GPIO_PIN_3:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800118a:	2108      	movs	r1, #8
 800118c:	4853      	ldr	r0, [pc, #332]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 800118e:	f002 f805 	bl	800319c <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 80e3 	bne.w	8001360 <HAL_GPIO_EXTI_Callback+0x3bc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw3, strlen(message_sw3),
 800119a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800119e:	4618      	mov	r0, r3
 80011a0:	f7fe ffd4 	bl	800014c <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	4849      	ldr	r0, [pc, #292]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 80011b2:	f004 fbc8 	bl	8005946 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 3) {
 80011b6:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d105      	bne.n	80011cc <HAL_GPIO_EXTI_Callback+0x228>
					selected_button = 0;
 80011c0:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 80011c6:	f7ff faa3 	bl	8000710 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 3;
				}
			}
			break;
 80011ca:	e0c9      	b.n	8001360 <HAL_GPIO_EXTI_Callback+0x3bc>
					reset_all_output();
 80011cc:	f7ff faa0 	bl	8000710 <reset_all_output>
					selected_button = 3;
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	701a      	strb	r2, [r3, #0]
			break;
 80011d6:	e0c3      	b.n	8001360 <HAL_GPIO_EXTI_Callback+0x3bc>
		case GPIO_PIN_4:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 80011d8:	2110      	movs	r1, #16
 80011da:	4840      	ldr	r0, [pc, #256]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 80011dc:	f001 ffde 	bl	800319c <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	f040 80be 	bne.w	8001364 <HAL_GPIO_EXTI_Callback+0x3c0>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw4, strlen(message_sw3),
 80011e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7fe ffad 	bl	800014c <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	4836      	ldr	r0, [pc, #216]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 8001200:	f004 fba1 	bl	8005946 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 4) {
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b04      	cmp	r3, #4
 800120c:	d105      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x276>
					selected_button = 0;
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001214:	f7ff fa7c 	bl	8000710 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 4;
				}
			}
			break;
 8001218:	e0a4      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0x3c0>
					reset_all_output();
 800121a:	f7ff fa79 	bl	8000710 <reset_all_output>
					selected_button = 4;
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 8001220:	2204      	movs	r2, #4
 8001222:	701a      	strb	r2, [r3, #0]
			break;
 8001224:	e09e      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0x3c0>
		case GPIO_PIN_5:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 8001226:	2120      	movs	r1, #32
 8001228:	482c      	ldr	r0, [pc, #176]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 800122a:	f001 ffb7 	bl	800319c <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 8099 	bne.w	8001368 <HAL_GPIO_EXTI_Callback+0x3c4>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw5, strlen(message_sw3),
 8001236:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800123a:	4618      	mov	r0, r3
 800123c:	f7fe ff86 	bl	800014c <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	4822      	ldr	r0, [pc, #136]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 800124e:	f004 fb7a 	bl	8005946 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 5) {
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b05      	cmp	r3, #5
 800125a:	d105      	bne.n	8001268 <HAL_GPIO_EXTI_Callback+0x2c4>
					selected_button = 0;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001262:	f7ff fa55 	bl	8000710 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 5;
				}
			}
			break;
 8001266:	e07f      	b.n	8001368 <HAL_GPIO_EXTI_Callback+0x3c4>
					reset_all_output();
 8001268:	f7ff fa52 	bl	8000710 <reset_all_output>
					selected_button = 5;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 800126e:	2205      	movs	r2, #5
 8001270:	701a      	strb	r2, [r3, #0]
			break;
 8001272:	e079      	b.n	8001368 <HAL_GPIO_EXTI_Callback+0x3c4>
		case GPIO_PIN_6:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	4819      	ldr	r0, [pc, #100]	; (80012dc <HAL_GPIO_EXTI_Callback+0x338>)
 8001278:	f001 ff90 	bl	800319c <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d174      	bne.n	800136c <HAL_GPIO_EXTI_Callback+0x3c8>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw6, strlen(message_sw3),
 8001282:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ff60 	bl	800014c <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x334>)
 800129a:	f004 fb54 	bl	8005946 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 6) {
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d129      	bne.n	80012fc <HAL_GPIO_EXTI_Callback+0x358>
					reset_all_output();
 80012a8:	f7ff fa32 	bl	8000710 <reset_all_output>
					selected_button = 0;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x354>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
				} else {
					reset_all_output();
					selected_button = 6;
				}
			}
			break;
 80012b2:	e05b      	b.n	800136c <HAL_GPIO_EXTI_Callback+0x3c8>
 80012b4:	080066a8 	.word	0x080066a8
 80012b8:	080066c0 	.word	0x080066c0
 80012bc:	080066d8 	.word	0x080066d8
 80012c0:	080066f0 	.word	0x080066f0
 80012c4:	08006708 	.word	0x08006708
 80012c8:	08006720 	.word	0x08006720
 80012cc:	08006678 	.word	0x08006678
 80012d0:	200000f4 	.word	0x200000f4
 80012d4:	0800668c 	.word	0x0800668c
 80012d8:	2000031c 	.word	0x2000031c
 80012dc:	40010800 	.word	0x40010800
 80012e0:	20000294 	.word	0x20000294
 80012e4:	200000e1 	.word	0x200000e1
 80012e8:	200001bc 	.word	0x200001bc
 80012ec:	200000f0 	.word	0x200000f0
 80012f0:	2000024c 	.word	0x2000024c
 80012f4:	2000000d 	.word	0x2000000d
 80012f8:	200000e8 	.word	0x200000e8
					reset_all_output();
 80012fc:	f7ff fa08 	bl	8000710 <reset_all_output>
					selected_button = 6;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001302:	2206      	movs	r2, #6
 8001304:	701a      	strb	r2, [r3, #0]
			break;
 8001306:	e031      	b.n	800136c <HAL_GPIO_EXTI_Callback+0x3c8>
		case GPIO_PIN_7:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) {
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	481f      	ldr	r0, [pc, #124]	; (8001388 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800130c:	f001 ff46 	bl	800319c <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12c      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x3cc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw7, strlen(message_sw3),
 8001316:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff16 	bl	800014c <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <HAL_GPIO_EXTI_Callback+0x3e8>)
 800132e:	f004 fb0a 	bl	8005946 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 7) {
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b07      	cmp	r3, #7
 800133a:	d10b      	bne.n	8001354 <HAL_GPIO_EXTI_Callback+0x3b0>
					selected_button = 0;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_GPIO_EXTI_Callback+0x3e0>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001342:	f7ff f9e5 	bl	8000710 <reset_all_output>
					clearButton = true;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim4);
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <HAL_GPIO_EXTI_Callback+0x3f0>)
 800134e:	f003 fb81 	bl	8004a54 <HAL_TIM_Base_Start_IT>
				} else {
					reset_all_output();
					selected_button = 7;
				}
			}
			break;
 8001352:	e00d      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x3cc>
					reset_all_output();
 8001354:	f7ff f9dc 	bl	8000710 <reset_all_output>
					selected_button = 7;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_GPIO_EXTI_Callback+0x3e0>)
 800135a:	2207      	movs	r2, #7
 800135c:	701a      	strb	r2, [r3, #0]
			break;
 800135e:	e007      	b.n	8001370 <HAL_GPIO_EXTI_Callback+0x3cc>
			break;
 8001360:	bf00      	nop
 8001362:	e006      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001364:	bf00      	nop
 8001366:	e004      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001368:	bf00      	nop
 800136a:	e002      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 800136c:	bf00      	nop
 800136e:	e000      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001370:	bf00      	nop
	}
	//	uint32_t i = 100000;
	//	while (i-- > 0) {
	//		asm("nop");
	//	}
	enable_all_exti_it();
 8001372:	f7ff fdfb 	bl	8000f6c <enable_all_exti_it>
	HAL_TIM_Base_Start_IT(&htim1);
 8001376:	4808      	ldr	r0, [pc, #32]	; (8001398 <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001378:	f003 fb6c 	bl	8004a54 <HAL_TIM_Base_Start_IT>
}
 800137c:	37c0      	adds	r7, #192	; 0xc0
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	200000e8 	.word	0x200000e8
 8001388:	40010800 	.word	0x40010800
 800138c:	2000031c 	.word	0x2000031c
 8001390:	200000fd 	.word	0x200000fd
 8001394:	200001bc 	.word	0x200001bc
 8001398:	2000024c 	.word	0x2000024c

0800139c <eeprom_write>:
void eeprom_write(uint8_t addr, uint8_t data){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71bb      	strb	r3, [r7, #6]
	 *   0x05   |  F5_DURATION
	 *
	 *	 0x06   |  credit
	 *
	 * */
	switch(addr){
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d839      	bhi.n	8001428 <eeprom_write+0x8c>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <eeprom_write+0x20>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013e3 	.word	0x080013e3
 80013c4:	080013f1 	.word	0x080013f1
 80013c8:	080013ff 	.word	0x080013ff
 80013cc:	0800140d 	.word	0x0800140d
 80013d0:	0800141b 	.word	0x0800141b
	case 0x01:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	461a      	mov	r2, r3
 80013d8:	2101      	movs	r1, #1
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <eeprom_write+0x94>)
 80013dc:	f003 f84e 	bl	800447c <HAL_RTCEx_BKUPWrite>
		break;
 80013e0:	e022      	b.n	8001428 <eeprom_write+0x8c>
	case 0x02:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, data);
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2102      	movs	r1, #2
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <eeprom_write+0x94>)
 80013ea:	f003 f847 	bl	800447c <HAL_RTCEx_BKUPWrite>
		break;
 80013ee:	e01b      	b.n	8001428 <eeprom_write+0x8c>
	case 0x03:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, data);
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	461a      	mov	r2, r3
 80013f4:	2103      	movs	r1, #3
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <eeprom_write+0x94>)
 80013f8:	f003 f840 	bl	800447c <HAL_RTCEx_BKUPWrite>
		break;
 80013fc:	e014      	b.n	8001428 <eeprom_write+0x8c>
	case 0x04:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	461a      	mov	r2, r3
 8001402:	2104      	movs	r1, #4
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <eeprom_write+0x94>)
 8001406:	f003 f839 	bl	800447c <HAL_RTCEx_BKUPWrite>
		break;
 800140a:	e00d      	b.n	8001428 <eeprom_write+0x8c>
	case 0x05:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, data);
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	461a      	mov	r2, r3
 8001410:	2105      	movs	r1, #5
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <eeprom_write+0x94>)
 8001414:	f003 f832 	bl	800447c <HAL_RTCEx_BKUPWrite>
		break;
 8001418:	e006      	b.n	8001428 <eeprom_write+0x8c>
	case 0x06:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, data);
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	461a      	mov	r2, r3
 800141e:	2106      	movs	r1, #6
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <eeprom_write+0x94>)
 8001422:	f003 f82b 	bl	800447c <HAL_RTCEx_BKUPWrite>
		break;
 8001426:	bf00      	nop
	}

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000150 	.word	0x20000150

08001434 <set_add_duration_of_function>:
//uint8_t eeprom_read(uint8_t addr){
//	uint8_t recv_data;
//	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 0xFF, &recv_data, 1, HAL_MAX_DELAY);
//}
void set_add_duration_of_function(uint8_t _selected_menu){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d07e      	beq.n	8001542 <set_add_duration_of_function+0x10e>
		switch (_selected_menu) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3b01      	subs	r3, #1
 8001448:	2b04      	cmp	r3, #4
 800144a:	d87a      	bhi.n	8001542 <set_add_duration_of_function+0x10e>
 800144c:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <set_add_duration_of_function+0x20>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001469 	.word	0x08001469
 8001458:	08001491 	.word	0x08001491
 800145c:	080014b9 	.word	0x080014b9
 8001460:	080014e1 	.word	0x080014e1
 8001464:	08001509 	.word	0x08001509
		case 1:
			if(F1_DURATION < 99){
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <set_add_duration_of_function+0x118>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b62      	cmp	r3, #98	; 0x62
 8001470:	d85e      	bhi.n	8001530 <set_add_duration_of_function+0xfc>
				F1_DURATION += 1;
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <set_add_duration_of_function+0x118>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <set_add_duration_of_function+0x118>)
 800147e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <set_add_duration_of_function+0x118>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff ff87 	bl	800139c <eeprom_write>
			}
			break;
 800148e:	e04f      	b.n	8001530 <set_add_duration_of_function+0xfc>
		case 2:
			if(F2_DURATION < 99){
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <set_add_duration_of_function+0x11c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b62      	cmp	r3, #98	; 0x62
 8001498:	d84c      	bhi.n	8001534 <set_add_duration_of_function+0x100>
				F2_DURATION += 1;
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <set_add_duration_of_function+0x11c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <set_add_duration_of_function+0x11c>)
 80014a6:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <set_add_duration_of_function+0x11c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff ff73 	bl	800139c <eeprom_write>
			}
			break;
 80014b6:	e03d      	b.n	8001534 <set_add_duration_of_function+0x100>
		case 3:
			if(F3_DURATION < 99){
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <set_add_duration_of_function+0x120>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b62      	cmp	r3, #98	; 0x62
 80014c0:	d83a      	bhi.n	8001538 <set_add_duration_of_function+0x104>
				F3_DURATION += 1;
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <set_add_duration_of_function+0x120>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <set_add_duration_of_function+0x120>)
 80014ce:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <set_add_duration_of_function+0x120>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	2003      	movs	r0, #3
 80014da:	f7ff ff5f 	bl	800139c <eeprom_write>
			}
			break;
 80014de:	e02b      	b.n	8001538 <set_add_duration_of_function+0x104>
		case 4:
			if(F4_DURATION < 99){
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <set_add_duration_of_function+0x124>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b62      	cmp	r3, #98	; 0x62
 80014e8:	d828      	bhi.n	800153c <set_add_duration_of_function+0x108>
				F4_DURATION += 1;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <set_add_duration_of_function+0x124>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <set_add_duration_of_function+0x124>)
 80014f6:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <set_add_duration_of_function+0x124>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	2004      	movs	r0, #4
 8001502:	f7ff ff4b 	bl	800139c <eeprom_write>
			}
			break;
 8001506:	e019      	b.n	800153c <set_add_duration_of_function+0x108>
		case 5:
			if(F5_DURATION < 99){
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <set_add_duration_of_function+0x128>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b62      	cmp	r3, #98	; 0x62
 8001510:	d816      	bhi.n	8001540 <set_add_duration_of_function+0x10c>
				F5_DURATION += 1;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <set_add_duration_of_function+0x128>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <set_add_duration_of_function+0x128>)
 800151e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <set_add_duration_of_function+0x128>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	2005      	movs	r0, #5
 800152a:	f7ff ff37 	bl	800139c <eeprom_write>
			}
			break;
 800152e:	e007      	b.n	8001540 <set_add_duration_of_function+0x10c>
			break;
 8001530:	bf00      	nop
 8001532:	e006      	b.n	8001542 <set_add_duration_of_function+0x10e>
			break;
 8001534:	bf00      	nop
 8001536:	e004      	b.n	8001542 <set_add_duration_of_function+0x10e>
			break;
 8001538:	bf00      	nop
 800153a:	e002      	b.n	8001542 <set_add_duration_of_function+0x10e>
			break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <set_add_duration_of_function+0x10e>
			break;
 8001540:	bf00      	nop
		}
	}
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000013 	.word	0x20000013
 8001550:	20000014 	.word	0x20000014
 8001554:	20000015 	.word	0x20000015
 8001558:	20000016 	.word	0x20000016
 800155c:	20000017 	.word	0x20000017

08001560 <set_substract_duration_of_function>:

void set_substract_duration_of_function(uint8_t _selected_menu){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d07e      	beq.n	800166e <set_substract_duration_of_function+0x10e>
		switch (_selected_menu) {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	3b01      	subs	r3, #1
 8001574:	2b04      	cmp	r3, #4
 8001576:	d87a      	bhi.n	800166e <set_substract_duration_of_function+0x10e>
 8001578:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <set_substract_duration_of_function+0x20>)
 800157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157e:	bf00      	nop
 8001580:	08001595 	.word	0x08001595
 8001584:	080015bd 	.word	0x080015bd
 8001588:	080015e5 	.word	0x080015e5
 800158c:	0800160d 	.word	0x0800160d
 8001590:	08001635 	.word	0x08001635
		case 1:
			if(F1_DURATION >0){
 8001594:	4b38      	ldr	r3, [pc, #224]	; (8001678 <set_substract_duration_of_function+0x118>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d05e      	beq.n	800165c <set_substract_duration_of_function+0xfc>
				F1_DURATION -= 1;
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <set_substract_duration_of_function+0x118>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <set_substract_duration_of_function+0x118>)
 80015aa:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <set_substract_duration_of_function+0x118>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff fef1 	bl	800139c <eeprom_write>
			}
			break;
 80015ba:	e04f      	b.n	800165c <set_substract_duration_of_function+0xfc>
		case 2:
			if(F2_DURATION >0){
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <set_substract_duration_of_function+0x11c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d04c      	beq.n	8001660 <set_substract_duration_of_function+0x100>
				F2_DURATION -= 1;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <set_substract_duration_of_function+0x11c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <set_substract_duration_of_function+0x11c>)
 80015d2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <set_substract_duration_of_function+0x11c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff fedd 	bl	800139c <eeprom_write>
			}
			break;
 80015e2:	e03d      	b.n	8001660 <set_substract_duration_of_function+0x100>
		case 3:
			if(F3_DURATION >0){
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <set_substract_duration_of_function+0x120>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03a      	beq.n	8001664 <set_substract_duration_of_function+0x104>
				F3_DURATION -= 1;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <set_substract_duration_of_function+0x120>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <set_substract_duration_of_function+0x120>)
 80015fa:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <set_substract_duration_of_function+0x120>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	2003      	movs	r0, #3
 8001606:	f7ff fec9 	bl	800139c <eeprom_write>
			}
			break;
 800160a:	e02b      	b.n	8001664 <set_substract_duration_of_function+0x104>
		case 4:
			if(F4_DURATION >0){
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <set_substract_duration_of_function+0x124>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d028      	beq.n	8001668 <set_substract_duration_of_function+0x108>
				F4_DURATION -= 1;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <set_substract_duration_of_function+0x124>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <set_substract_duration_of_function+0x124>)
 8001622:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <set_substract_duration_of_function+0x124>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	2004      	movs	r0, #4
 800162e:	f7ff feb5 	bl	800139c <eeprom_write>
			}
			break;
 8001632:	e019      	b.n	8001668 <set_substract_duration_of_function+0x108>
		case 5:
			if(F5_DURATION >0){
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <set_substract_duration_of_function+0x128>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d016      	beq.n	800166c <set_substract_duration_of_function+0x10c>
				F5_DURATION -= 1;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <set_substract_duration_of_function+0x128>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <set_substract_duration_of_function+0x128>)
 800164a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <set_substract_duration_of_function+0x128>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	2005      	movs	r0, #5
 8001656:	f7ff fea1 	bl	800139c <eeprom_write>
			}
			break;
 800165a:	e007      	b.n	800166c <set_substract_duration_of_function+0x10c>
			break;
 800165c:	bf00      	nop
 800165e:	e006      	b.n	800166e <set_substract_duration_of_function+0x10e>
			break;
 8001660:	bf00      	nop
 8001662:	e004      	b.n	800166e <set_substract_duration_of_function+0x10e>
			break;
 8001664:	bf00      	nop
 8001666:	e002      	b.n	800166e <set_substract_duration_of_function+0x10e>
			break;
 8001668:	bf00      	nop
 800166a:	e000      	b.n	800166e <set_substract_duration_of_function+0x10e>
			break;
 800166c:	bf00      	nop
		}
	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000013 	.word	0x20000013
 800167c:	20000014 	.word	0x20000014
 8001680:	20000015 	.word	0x20000015
 8001684:	20000016 	.word	0x20000016
 8001688:	20000017 	.word	0x20000017

0800168c <add_coin_credit>:
void add_coin_credit(uint32_t pulse_width) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	if (pulse_width <= (coin_acceptor_pulse_width + creditPulseOffset)
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <add_coin_credit+0xec>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <add_coin_credit+0xf0>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d84b      	bhi.n	8001742 <add_coin_credit+0xb6>
			&& (pulse_width
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <add_coin_credit+0xec>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <add_coin_credit+0xf0>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	461a      	mov	r2, r3
			&& (pulse_width
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d340      	bcc.n	8001742 <add_coin_credit+0xb6>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <add_coin_credit+0xf4>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	492d      	ldr	r1, [pc, #180]	; (8001784 <add_coin_credit+0xf8>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fad6 	bl	8005c80 <siprintf>
				(int)coin_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd37 	bl	800014c <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f107 0108 	add.w	r1, r7, #8
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	4827      	ldr	r0, [pc, #156]	; (8001788 <add_coin_credit+0xfc>)
 80016ec:	f004 f92b 	bl	8005946 <HAL_UART_Transmit>
		credit += coin_credit_per_pulse;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <add_coin_credit+0xf4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <add_coin_credit+0x100>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <add_coin_credit+0x100>)
 8001700:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <add_coin_credit+0x100>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f240 32e6 	movw	r2, #998	; 0x3e6
 800170a:	4293      	cmp	r3, r2
 800170c:	d903      	bls.n	8001716 <add_coin_credit+0x8a>
			credit = 999;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <add_coin_credit+0x100>)
 8001710:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001714:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <add_coin_credit+0x100>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f866 	bl	80007ec <segment_display_int>

		if (credit >= minimum_credit_to_start) {
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <add_coin_credit+0x100>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <add_coin_credit+0x104>)
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4293      	cmp	r3, r2
 800172a:	d320      	bcc.n	800176e <add_coin_credit+0xe2>
			system_function_start = true;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <add_coin_credit+0x108>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2219      	movs	r2, #25
 8001738:	4917      	ldr	r1, [pc, #92]	; (8001798 <add_coin_credit+0x10c>)
 800173a:	4813      	ldr	r0, [pc, #76]	; (8001788 <add_coin_credit+0xfc>)
 800173c:	f004 f903 	bl	8005946 <HAL_UART_Transmit>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 8001740:	e015      	b.n	800176e <add_coin_credit+0xe2>
					HAL_MAX_DELAY);
		}
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001748:	4914      	ldr	r1, [pc, #80]	; (800179c <add_coin_credit+0x110>)
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fa98 	bl	8005c80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 8001750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fcf9 	bl	800014c <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <add_coin_credit+0xfc>)
 8001768:	f004 f8ed 	bl	8005946 <HAL_UART_Transmit>
	}
}
 800176c:	e000      	b.n	8001770 <add_coin_credit+0xe4>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 800176e:	bf00      	nop
}
 8001770:	bf00      	nop
 8001772:	3750      	adds	r7, #80	; 0x50
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000000f 	.word	0x2000000f
 800177c:	20000010 	.word	0x20000010
 8001780:	20000012 	.word	0x20000012
 8001784:	08006738 	.word	0x08006738
 8001788:	2000031c 	.word	0x2000031c
 800178c:	200000e4 	.word	0x200000e4
 8001790:	20000004 	.word	0x20000004
 8001794:	200000f0 	.word	0x200000f0
 8001798:	08006750 	.word	0x08006750
 800179c:	0800676c 	.word	0x0800676c

080017a0 <add_bank_note_credit>:
void add_bank_note_credit(uint32_t pulse_width) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09e      	sub	sp, #120	; 0x78
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	if (pulse_width <= bank_acceptor_pulse_width + creditPulseOffset
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <add_bank_note_credit+0x118>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <add_bank_note_credit+0x11c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d862      	bhi.n	8001884 <add_bank_note_credit+0xe4>
			&& pulse_width
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 80017be:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <add_bank_note_credit+0x118>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <add_bank_note_credit+0x11c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	461a      	mov	r2, r3
			&& pulse_width
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d357      	bcc.n	8001884 <add_bank_note_credit+0xe4>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <add_bank_note_credit+0x120>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e0:	4938      	ldr	r1, [pc, #224]	; (80018c4 <add_bank_note_credit+0x124>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fa4c 	bl	8005c80 <siprintf>
				bank_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80017e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcad 	bl	800014c <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	4832      	ldr	r0, [pc, #200]	; (80018c8 <add_bank_note_credit+0x128>)
 8001800:	f004 f8a1 	bl	8005946 <HAL_UART_Transmit>
		credit += bank_credit_per_pulse;
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <add_bank_note_credit+0x120>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <add_bank_note_credit+0x12c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <add_bank_note_credit+0x12c>)
 8001814:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <add_bank_note_credit+0x12c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800181e:	4293      	cmp	r3, r2
 8001820:	d903      	bls.n	800182a <add_bank_note_credit+0x8a>
			credit = 999;
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <add_bank_note_credit+0x12c>)
 8001824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001828:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <add_bank_note_credit+0x12c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe ffdc 	bl	80007ec <segment_display_int>
		if (credit >= minimum_credit_to_start) {
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <add_bank_note_credit+0x12c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <add_bank_note_credit+0x130>)
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4293      	cmp	r3, r2
 800183e:	d309      	bcc.n	8001854 <add_bank_note_credit+0xb4>
			system_function_start = true;
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <add_bank_note_credit+0x134>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	2219      	movs	r2, #25
 800184c:	4922      	ldr	r1, [pc, #136]	; (80018d8 <add_bank_note_credit+0x138>)
 800184e:	481e      	ldr	r0, [pc, #120]	; (80018c8 <add_bank_note_credit+0x128>)
 8001850:	f004 f879 	bl	8005946 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		char tmp_msg2[35];
		sprintf(tmp_msg2, "current credit : %d \r\n", (int)credit);
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <add_bank_note_credit+0x12c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <add_bank_note_credit+0x13c>)
 8001860:	4618      	mov	r0, r3
 8001862:	f004 fa0d 	bl	8005c80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg2, strlen(tmp_msg2),
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fc6e 	bl	800014c <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <add_bank_note_credit+0x128>)
 800187e:	f004 f862 	bl	8005946 <HAL_UART_Transmit>
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 8001882:	e014      	b.n	80018ae <add_bank_note_credit+0x10e>
				HAL_MAX_DELAY);
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <add_bank_note_credit+0x140>)
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f9f7 	bl	8005c80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 8001892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fc58 	bl	800014c <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	4807      	ldr	r0, [pc, #28]	; (80018c8 <add_bank_note_credit+0x128>)
 80018aa:	f004 f84c 	bl	8005946 <HAL_UART_Transmit>
	}
}
 80018ae:	bf00      	nop
 80018b0:	3778      	adds	r7, #120	; 0x78
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000000e 	.word	0x2000000e
 80018bc:	20000010 	.word	0x20000010
 80018c0:	20000011 	.word	0x20000011
 80018c4:	08006738 	.word	0x08006738
 80018c8:	2000031c 	.word	0x2000031c
 80018cc:	200000e4 	.word	0x200000e4
 80018d0:	20000004 	.word	0x20000004
 80018d4:	200000f0 	.word	0x200000f0
 80018d8:	08006750 	.word	0x08006750
 80018dc:	0800678c 	.word	0x0800678c
 80018e0:	0800676c 	.word	0x0800676c

080018e4 <logic_runner>:

void logic_runner() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	eeprom_write(0x06,credit);
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <logic_runner+0x12c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	2006      	movs	r0, #6
 80018f2:	f7ff fd53 	bl	800139c <eeprom_write>
	if (selected_button != 0) {
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <logic_runner+0x130>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <logic_runner+0x26>
		logic_runner_round_counter += 1;
 8001900:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <logic_runner+0x134>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a44      	ldr	r2, [pc, #272]	; (8001a18 <logic_runner+0x134>)
 8001908:	6013      	str	r3, [r2, #0]
	}
	switch(selected_button){
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <logic_runner+0x130>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3b03      	subs	r3, #3
 8001912:	2b04      	cmp	r3, #4
 8001914:	d82f      	bhi.n	8001976 <logic_runner+0x92>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <logic_runner+0x38>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001931 	.word	0x08001931
 8001920:	0800193f 	.word	0x0800193f
 8001924:	0800194d 	.word	0x0800194d
 8001928:	0800195b 	.word	0x0800195b
 800192c:	08001969 	.word	0x08001969
	case 3:
		duration_per_1credit = F1_DURATION;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <logic_runner+0x138>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <logic_runner+0x13c>)
 800193a:	601a      	str	r2, [r3, #0]
		break;
 800193c:	e01f      	b.n	800197e <logic_runner+0x9a>
	case 4:
		duration_per_1credit = F2_DURATION;
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <logic_runner+0x140>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <logic_runner+0x13c>)
 8001948:	601a      	str	r2, [r3, #0]
		break;
 800194a:	e018      	b.n	800197e <logic_runner+0x9a>
	case 5:
		duration_per_1credit = F3_DURATION;
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <logic_runner+0x144>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <logic_runner+0x13c>)
 8001956:	601a      	str	r2, [r3, #0]
		break;
 8001958:	e011      	b.n	800197e <logic_runner+0x9a>
	case 6:
		duration_per_1credit = F4_DURATION;
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <logic_runner+0x148>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <logic_runner+0x13c>)
 8001964:	601a      	str	r2, [r3, #0]
		break;
 8001966:	e00a      	b.n	800197e <logic_runner+0x9a>
	case 7:
		duration_per_1credit = F5_DURATION;
 8001968:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <logic_runner+0x14c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <logic_runner+0x13c>)
 8001972:	601a      	str	r2, [r3, #0]
		break;
 8001974:	e003      	b.n	800197e <logic_runner+0x9a>
	default:
		duration_per_1credit = 10;
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <logic_runner+0x13c>)
 8001978:	220a      	movs	r2, #10
 800197a:	601a      	str	r2, [r3, #0]
		break;
 800197c:	bf00      	nop
	}
	if(duration_per_1credit != 0){
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <logic_runner+0x13c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d025      	beq.n	80019d2 <logic_runner+0xee>
		if (logic_runner_round_counter >= duration_per_1credit && credit > 0) {
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <logic_runner+0x134>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <logic_runner+0x13c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	db1f      	blt.n	80019d2 <logic_runner+0xee>
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <logic_runner+0x12c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01b      	beq.n	80019d2 <logic_runner+0xee>
			logic_runner_round_counter = 0;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <logic_runner+0x134>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"took 1 credit\r\n", 15, HAL_MAX_DELAY);
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	220f      	movs	r2, #15
 80019a6:	4923      	ldr	r1, [pc, #140]	; (8001a34 <logic_runner+0x150>)
 80019a8:	4823      	ldr	r0, [pc, #140]	; (8001a38 <logic_runner+0x154>)
 80019aa:	f003 ffcc 	bl	8005946 <HAL_UART_Transmit>
			credit -= 1;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <logic_runner+0x12c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <logic_runner+0x12c>)
 80019b6:	6013      	str	r3, [r2, #0]
			if(credit < 255){
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <logic_runner+0x12c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2bfe      	cmp	r3, #254	; 0xfe
 80019be:	d806      	bhi.n	80019ce <logic_runner+0xea>
				//			eeprom_write(0x06,credit);
				HAL_UART_Transmit(&huart1, (uint8_t *)"writing credit value\r\n", 22,
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	2216      	movs	r2, #22
 80019c6:	491d      	ldr	r1, [pc, #116]	; (8001a3c <logic_runner+0x158>)
 80019c8:	481b      	ldr	r0, [pc, #108]	; (8001a38 <logic_runner+0x154>)
 80019ca:	f003 ffbc 	bl	8005946 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
			}
			serial_display_credit();
 80019ce:	f000 f83b 	bl	8001a48 <serial_display_credit>
		}
	}

	if (credit <= 0) {
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <logic_runner+0x12c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d112      	bne.n	8001a00 <logic_runner+0x11c>
		//		segment_display_standby();
		reset_all_output();
 80019da:	f7fe fe99 	bl	8000710 <reset_all_output>
		HAL_UART_Transmit(&huart1, (uint8_t *)"time up !, disable all functions\r\n", 34,
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	2222      	movs	r2, #34	; 0x22
 80019e4:	4916      	ldr	r1, [pc, #88]	; (8001a40 <logic_runner+0x15c>)
 80019e6:	4814      	ldr	r0, [pc, #80]	; (8001a38 <logic_runner+0x154>)
 80019e8:	f003 ffad 	bl	8005946 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		credit = 0;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <logic_runner+0x12c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
		//		eeprom_write(0x06,0);
		system_function_start = false;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <logic_runner+0x160>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
		selected_button = 0;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <logic_runner+0x130>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	}else{
		segment_display_int(credit);
	}
}
 80019fe:	e004      	b.n	8001a0a <logic_runner+0x126>
		segment_display_int(credit);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <logic_runner+0x12c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fef1 	bl	80007ec <segment_display_int>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000e4 	.word	0x200000e4
 8001a14:	200000e8 	.word	0x200000e8
 8001a18:	200000ec 	.word	0x200000ec
 8001a1c:	20000013 	.word	0x20000013
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000014 	.word	0x20000014
 8001a28:	20000015 	.word	0x20000015
 8001a2c:	20000016 	.word	0x20000016
 8001a30:	20000017 	.word	0x20000017
 8001a34:	080067a4 	.word	0x080067a4
 8001a38:	2000031c 	.word	0x2000031c
 8001a3c:	080067b4 	.word	0x080067b4
 8001a40:	080067cc 	.word	0x080067cc
 8001a44:	200000f0 	.word	0x200000f0

08001a48 <serial_display_credit>:

void serial_display_credit() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
	char buffer[35];
	sprintf(buffer, "current credit : %d \r\n", (int)credit);
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <serial_display_credit+0x38>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	490b      	ldr	r1, [pc, #44]	; (8001a84 <serial_display_credit+0x3c>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 f911 	bl	8005c80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fb73 	bl	800014c <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	1d39      	adds	r1, r7, #4
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <serial_display_credit+0x40>)
 8001a72:	f003 ff68 	bl	8005946 <HAL_UART_Transmit>
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200000e4 	.word	0x200000e4
 8001a84:	0800678c 	.word	0x0800678c
 8001a88:	2000031c 	.word	0x2000031c

08001a8c <stop_and_clear_tim1>:
void stop_and_clear_tim1() {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <stop_and_clear_tim1+0x20>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop_IT(&htim1);
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <stop_and_clear_tim1+0x20>)
 8001a9a:	f003 f82d 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001a9e:	4b03      	ldr	r3, [pc, #12]	; (8001aac <stop_and_clear_tim1+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0201 	mvn.w	r2, #1
 8001aa6:	611a      	str	r2, [r3, #16]
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000024c 	.word	0x2000024c

08001ab0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	//	HAL_UART_Transmit(&huart2, message3, strlen(message3), HAL_MAX_DELAY);
	//	stop_and_clear_tim1();
	max7219_Turn_On();
 8001ab8:	f000 fa10 	bl	8001edc <max7219_Turn_On>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001abc:	4884      	ldr	r0, [pc, #528]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001abe:	f003 f81b 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f06f 0201 	mvn.w	r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Stop_IT(&htim1);
 8001ad4:	487f      	ldr	r0, [pc, #508]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001ad6:	f003 f80f 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ada:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0201 	mvn.w	r2, #1
 8001aea:	611a      	str	r2, [r3, #16]


	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	f040 8095 	bne.w	8001c22 <HAL_TIM_IC_CaptureCallback+0x172>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7f1b      	ldrb	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8090 	bne.w	8001c22 <HAL_TIM_IC_CaptureCallback+0x172>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH1 INT\r\n", 9, HAL_MAX_DELAY);
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	2209      	movs	r2, #9
 8001b08:	4974      	ldr	r1, [pc, #464]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001b0a:	4875      	ldr	r0, [pc, #468]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b0c:	f003 ff1b 	bl	8005946 <HAL_UART_Transmit>
		if (Is_First_Captured == 0) // if the first value is not captured
 8001b10:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11a      	bne.n	8001b50 <HAL_TIM_IC_CaptureCallback+0xa0>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f003 fbcb 	bl	80052b8 <HAL_TIM_ReadCapturedValue>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b26:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001b28:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
			 (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\
				 ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\
				 ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) :\
				 ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))*/

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a1a      	ldr	r2, [r3, #32]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 020a 	bic.w	r2, r2, #10
 8001b3c:	621a      	str	r2, [r3, #32]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a1a      	ldr	r2, [r3, #32]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0202 	orr.w	r2, r2, #2
 8001b4c:	621a      	str	r2, [r3, #32]
 8001b4e:	e068      	b.n	8001c22 <HAL_TIM_IC_CaptureCallback+0x172>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d163      	bne.n	8001c22 <HAL_TIM_IC_CaptureCallback+0x172>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f003 fbab 	bl	80052b8 <HAL_TIM_ReadCapturedValue>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b66:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
			//			burst_bank_credit += bank_credit_per_pulse;
			//			burst_counter = 0;
			//			start_debounce_counter = true;
			if (IC_Val2 > IC_Val1) {
 8001b70:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d907      	bls.n	8001b8c <HAL_TIM_IC_CaptureCallback+0xdc>
				Difference = IC_Val2 - IC_Val1;
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00f      	b.n	8001bac <HAL_TIM_IC_CaptureCallback+0xfc>
			}

			else if (IC_Val1 > IC_Val2) {
 8001b8c:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d909      	bls.n	8001bac <HAL_TIM_IC_CaptureCallback+0xfc>
				Difference = ((uint16_t) 0xffff - IC_Val1) + IC_Val2;
 8001b98:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ba6:	33ff      	adds	r3, #255	; 0xff
 8001ba8:	4a51      	ldr	r2, [pc, #324]	; (8001cf0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001baa:	6013      	str	r3, [r2, #0]
			}
			Is_First_Captured = 0; // set it back to false
 8001bac:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 020a 	bic.w	r2, r2, #10
 8001bc0:	621a      	str	r2, [r3, #32]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a12      	ldr	r2, [r2, #32]
 8001bcc:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);

			add_bank_note_credit(Difference/1000);
 8001bce:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fde0 	bl	80017a0 <add_bank_note_credit>
			last_credit_insert_bank += bank_credit_per_pulse;
 8001be0:	4b45      	ldr	r3, [pc, #276]	; (8001cf8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bf2:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH1:captured val : %d \r\n",(int)Difference);
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4940      	ldr	r1, [pc, #256]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 f83d 	bl	8005c80 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fa9e 	bl	800014c <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f107 010c 	add.w	r1, r7, #12
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	4830      	ldr	r0, [pc, #192]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c1e:	f003 fe92 	bl	8005946 <HAL_UART_Transmit>
			//			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
			//			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
	if (htim->Instance == TIM3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	f040 80c0 	bne.w	8001dae <HAL_TIM_IC_CaptureCallback+0x2fe>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if the interrupt source is channel1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7f1b      	ldrb	r3, [r3, #28]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	f040 80bb 	bne.w	8001dae <HAL_TIM_IC_CaptureCallback+0x2fe>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH2 INT\r\n", 9, HAL_MAX_DELAY);
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	4931      	ldr	r1, [pc, #196]	; (8001d04 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001c40:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c42:	f003 fe80 	bl	8005946 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001c46:	4822      	ldr	r0, [pc, #136]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001c48:	f002 ff56 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 8001c4c:	4821      	ldr	r0, [pc, #132]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001c4e:	f002 ff53 	bl	8004af8 <HAL_TIM_Base_Stop_IT>
		if (coin_Is_First_Captured == 0) // if the first value is not captured
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11a      	bne.n	8001c92 <HAL_TIM_IC_CaptureCallback+0x1e2>
		{
			coin_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f003 fb2a 	bl	80052b8 <HAL_TIM_ReadCapturedValue>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c68:	601a      	str	r2, [r3, #0]
			coin_Is_First_Captured = 1;  // set the first captured as true
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c7e:	621a      	str	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0220 	orr.w	r2, r2, #32
 8001c8e:	621a      	str	r2, [r3, #32]
 8001c90:	e08d      	b.n	8001dae <HAL_TIM_IC_CaptureCallback+0x2fe>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (coin_Is_First_Captured == 1) // if the first is already captured
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	f040 8088 	bne.w	8001dae <HAL_TIM_IC_CaptureCallback+0x2fe>
		{
			coin_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f003 fb09 	bl	80052b8 <HAL_TIM_ReadCapturedValue>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001caa:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
			if (coin_IC_Val2 > coin_IC_Val1) {
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d92b      	bls.n	8001d18 <HAL_TIM_IC_CaptureCallback+0x268>
				coin_Difference = coin_IC_Val2 - coin_IC_Val1;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e033      	b.n	8001d38 <HAL_TIM_IC_CaptureCallback+0x288>
 8001cd0:	20000294 	.word	0x20000294
 8001cd4:	2000024c 	.word	0x2000024c
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	080067f0 	.word	0x080067f0
 8001ce0:	2000031c 	.word	0x2000031c
 8001ce4:	200000d0 	.word	0x200000d0
 8001ce8:	200000c4 	.word	0x200000c4
 8001cec:	200000c8 	.word	0x200000c8
 8001cf0:	200000cc 	.word	0x200000cc
 8001cf4:	10624dd3 	.word	0x10624dd3
 8001cf8:	20000011 	.word	0x20000011
 8001cfc:	200000fa 	.word	0x200000fa
 8001d00:	080067fc 	.word	0x080067fc
 8001d04:	08006818 	.word	0x08006818
 8001d08:	200000e0 	.word	0x200000e0
 8001d0c:	200000d4 	.word	0x200000d4
 8001d10:	200000d8 	.word	0x200000d8
 8001d14:	200000dc 	.word	0x200000dc
			}

			else if (coin_IC_Val1 > coin_IC_Val2) {
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d909      	bls.n	8001d38 <HAL_TIM_IC_CaptureCallback+0x288>
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
																																																																																																												+ coin_IC_Val2;
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d32:	33ff      	adds	r3, #255	; 0xff
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
 8001d34:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001d36:	6013      	str	r3, [r2, #0]
			}
			coin_Is_First_Captured = 0; // set it back to false
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d4c:	621a      	str	r2, [r3, #32]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a12      	ldr	r2, [r2, #32]
 8001d58:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			add_coin_credit(coin_Difference/1000);
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fc90 	bl	800168c <add_coin_credit>
			last_credit_insert += coin_credit_per_pulse;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001d7e:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH2:captured val : %d \r\n",(int)coin_Difference);
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4913      	ldr	r1, [pc, #76]	; (8001dd8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 ff77 	bl	8005c80 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe f9d8 	bl	800014c <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f107 010c 	add.w	r1, r7, #12
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001daa:	f003 fdcc 	bl	8005946 <HAL_UART_Transmit>
			// set polarity to rising edge
			//			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
			//			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8001dae:	480c      	ldr	r0, [pc, #48]	; (8001de0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001db0:	f002 fe50 	bl	8004a54 <HAL_TIM_Base_Start_IT>
}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200000d4 	.word	0x200000d4
 8001dc0:	200000d8 	.word	0x200000d8
 8001dc4:	200000dc 	.word	0x200000dc
 8001dc8:	200000e0 	.word	0x200000e0
 8001dcc:	10624dd3 	.word	0x10624dd3
 8001dd0:	20000012 	.word	0x20000012
 8001dd4:	200000f8 	.word	0x200000f8
 8001dd8:	08006824 	.word	0x08006824
 8001ddc:	2000031c 	.word	0x2000031c
 8001de0:	20000294 	.word	0x20000294

08001de4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_On();
 8001dfa:	f000 f86f 	bl	8001edc <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8001dfe:	2107      	movs	r1, #7
 8001e00:	200b      	movs	r0, #11
 8001e02:	f000 f841 	bl	8001e88 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f806 	bl	8001e1a <max7219_SetIntensivity>
	max7219_Clean();
 8001e0e:	f000 f817 	bl	8001e40 <max7219_Clean>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	d805      	bhi.n	8001e36 <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f000 f82a 	bl	8001e88 <max7219_SendData>
 8001e34:	e000      	b.n	8001e38 <max7219_SetIntensivity+0x1e>
		return;
 8001e36:	bf00      	nop
}
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <max7219_Clean>:

void max7219_Clean()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <max7219_Clean+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d101      	bne.n	8001e56 <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001e52:	230f      	movs	r3, #15
 8001e54:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	e00b      	b.n	8001e74 <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	79fa      	ldrb	r2, [r7, #7]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f80d 	bl	8001e88 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b07      	cmp	r3, #7
 8001e78:	ddf0      	ble.n	8001e5c <max7219_Clean+0x1c>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000101 	.word	0x20000101

08001e88 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460a      	mov	r2, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <max7219_SendData+0x4c>)
 8001ea0:	f001 f993 	bl	80031ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001ea4:	1df9      	adds	r1, r7, #7
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	2201      	movs	r2, #1
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <max7219_SendData+0x50>)
 8001eae:	f002 fb9f 	bl	80045f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001eb2:	1db9      	adds	r1, r7, #6
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <max7219_SendData+0x50>)
 8001ebc:	f002 fb98 	bl	80045f0 <HAL_SPI_Transmit>
	CS_RESET();
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <max7219_SendData+0x4c>)
 8001ec8:	f001 f97f 	bl	80031ca <HAL_GPIO_WritePin>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	20000164 	.word	0x20000164

08001edc <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	200c      	movs	r0, #12
 8001ee4:	f7ff ffd0 	bl	8001e88 <max7219_SendData>
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <max7219_Turn_Off>:

void max7219_Turn_Off(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x00);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	200c      	movs	r0, #12
 8001ef4:	f7ff ffc8 	bl	8001e88 <max7219_SendData>
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <max7219_Decode_On>:

void max7219_Decode_On(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <max7219_Decode_On+0x1c>)
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <max7219_Decode_On+0x1c>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2009      	movs	r0, #9
 8001f0e:	f7ff ffbb 	bl	8001e88 <max7219_SendData>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000101 	.word	0x20000101

08001f1c <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	460b      	mov	r3, r1
 8001f28:	71bb      	strb	r3, [r7, #6]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	717b      	strb	r3, [r7, #5]
	if(position > NUMBER_OF_DIGITS)
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d844      	bhi.n	8001fbe <max7219_PrintDigit+0xa2>
	{
		return;
	}

	if(point)
 8001f34:	797b      	ldrb	r3, [r7, #5]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <max7219_PrintDigit+0x60>
	{
		if(decodeMode == 0x00)
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <max7219_PrintDigit+0xac>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10e      	bne.n	8001f60 <max7219_PrintDigit+0x44>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f8b9 	bl	80020bc <getSymbol>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff95 	bl	8001e88 <max7219_SendData>
 8001f5e:	e02f      	b.n	8001fc0 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <max7219_PrintDigit+0xac>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2bff      	cmp	r3, #255	; 0xff
 8001f66:	d12b      	bne.n	8001fc0 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff87 	bl	8001e88 <max7219_SendData>
 8001f7a:	e021      	b.n	8001fc0 <max7219_PrintDigit+0xa4>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <max7219_PrintDigit+0xac>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10e      	bne.n	8001fa2 <max7219_PrintDigit+0x86>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f898 	bl	80020bc <getSymbol>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff74 	bl	8001e88 <max7219_SendData>
 8001fa0:	e00e      	b.n	8001fc0 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <max7219_PrintDigit+0xac>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d10a      	bne.n	8001fc0 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff66 	bl	8001e88 <max7219_SendData>
 8001fbc:	e000      	b.n	8001fc0 <max7219_PrintDigit+0xa4>
		return;
 8001fbe:	bf00      	nop
		}
	}
}
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000101 	.word	0x20000101

08001fcc <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8001fd8:	21ff      	movs	r1, #255	; 0xff
 8001fda:	2009      	movs	r0, #9
 8001fdc:	f7ff ff54 	bl	8001e88 <max7219_SendData>

	int32_t i;

	if (value < 0)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da0d      	bge.n	8002002 <max7219_PrintItos+0x36>
	{
		if(position > 0)
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <max7219_PrintItos+0x30>
		{
			max7219_SendData(position, MINUS);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	210a      	movs	r1, #10
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff49 	bl	8001e88 <max7219_SendData>
			position--;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	425b      	negs	r3, r3
 8002000:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 8002006:	e005      	b.n	8002014 <max7219_PrintItos+0x48>
	{
		i *= 10;
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	fb92 f3f3 	sdiv	r3, r2, r3
 800201c:	2b09      	cmp	r3, #9
 800201e:	dcf3      	bgt.n	8002008 <max7219_PrintItos+0x3c>
	}

	if(position > 0)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <max7219_PrintItos+0x74>
	{
		max7219_SendData(position, value/i);
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	fb92 f3f3 	sdiv	r3, r2, r3
 800202e:	b2da      	uxtb	r2, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff27 	bl	8001e88 <max7219_SendData>
		position--;
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	3b01      	subs	r3, #1
 800203e:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <max7219_PrintItos+0xe8>)
 8002044:	fb82 1203 	smull	r1, r2, r2, r3
 8002048:	1092      	asrs	r2, r2, #2
 800204a:	17db      	asrs	r3, r3, #31
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 8002050:	e022      	b.n	8002098 <max7219_PrintItos+0xcc>
	{
		if(position > 0)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <max7219_PrintItos+0xbc>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	461a      	mov	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	fb93 f1f2 	sdiv	r1, r3, r2
 800206a:	fb02 f201 	mul.w	r2, r2, r1
 800206e:	1a9a      	subs	r2, r3, r2
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	fb92 f3f3 	sdiv	r3, r2, r3
 8002076:	b2da      	uxtb	r2, r3
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff03 	bl	8001e88 <max7219_SendData>
			position--;
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	3b01      	subs	r3, #1
 8002086:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <max7219_PrintItos+0xe8>)
 800208c:	fb82 1203 	smull	r1, r2, r2, r3
 8002090:	1092      	asrs	r2, r2, #2
 8002092:	17db      	asrs	r3, r3, #31
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	dcd9      	bgt.n	8002052 <max7219_PrintItos+0x86>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <max7219_PrintItos+0xec>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	2009      	movs	r0, #9
 80020a6:	f7ff feef 	bl	8001e88 <max7219_SendData>

	return position;
 80020aa:	79fb      	ldrb	r3, [r7, #7]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	66666667 	.word	0x66666667
 80020b8:	20000101 	.word	0x20000101

080020bc <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <getSymbol+0x1c>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	b29b      	uxth	r3, r3
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20000018 	.word	0x20000018

080020dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2100      	movs	r1, #0
 80020e6:	460a      	mov	r2, r1
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	460a      	mov	r2, r1
 80020ec:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <MX_RTC_Init+0x8c>)
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <MX_RTC_Init+0x90>)
 80020f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <MX_RTC_Init+0x8c>)
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <MX_RTC_Init+0x8c>)
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002108:	4817      	ldr	r0, [pc, #92]	; (8002168 <MX_RTC_Init+0x8c>)
 800210a:	f001 fe29 	bl	8003d60 <HAL_RTC_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002114:	f7ff fe66 	bl	8001de4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002118:	2300      	movs	r3, #0
 800211a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002120:	2300      	movs	r3, #0
 8002122:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2201      	movs	r2, #1
 8002128:	4619      	mov	r1, r3
 800212a:	480f      	ldr	r0, [pc, #60]	; (8002168 <MX_RTC_Init+0x8c>)
 800212c:	f001 feae 	bl	8003e8c <HAL_RTC_SetTime>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002136:	f7ff fe55 	bl	8001de4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800213a:	2301      	movs	r3, #1
 800213c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800213e:	2301      	movs	r3, #1
 8002140:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002142:	2301      	movs	r3, #1
 8002144:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002146:	2300      	movs	r3, #0
 8002148:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800214a:	463b      	mov	r3, r7
 800214c:	2201      	movs	r2, #1
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_RTC_Init+0x8c>)
 8002152:	f001 ff33 	bl	8003fbc <HAL_RTC_SetDate>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800215c:	f7ff fe42 	bl	8001de4 <Error_Handler>
  }

}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000150 	.word	0x20000150
 800216c:	40002800 	.word	0x40002800

08002170 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <HAL_RTC_MspInit+0x3c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d110      	bne.n	80021a4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002182:	f001 f853 	bl	800322c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RTC_MspInit+0x40>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RTC_MspInit+0x40>)
 800218c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RTC_MspInit+0x40>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RTC_MspInit+0x44>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40002800 	.word	0x40002800
 80021b0:	40021000 	.word	0x40021000
 80021b4:	4242043c 	.word	0x4242043c

080021b8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <MX_SPI2_Init+0x64>)
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <MX_SPI2_Init+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_SPI2_Init+0x64>)
 80021c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_SPI2_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <MX_SPI2_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_SPI2_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_SPI2_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_SPI2_Init+0x64>)
 80021e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_SPI2_Init+0x64>)
 80021ec:	2208      	movs	r2, #8
 80021ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_SPI2_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <MX_SPI2_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_SPI2_Init+0x64>)
 8002204:	220a      	movs	r2, #10
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <MX_SPI2_Init+0x64>)
 800220a:	f002 f96d 	bl	80044e8 <HAL_SPI_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002214:	f7ff fde6 	bl	8001de4 <Error_Handler>
  }

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000164 	.word	0x20000164
 8002220:	40003800 	.word	0x40003800

08002224 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <HAL_SPI_MspInit+0x74>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d124      	bne.n	800228e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_SPI_MspInit+0x78>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_SPI_MspInit+0x78>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224e:	61d3      	str	r3, [r2, #28]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_SPI_MspInit+0x78>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_SPI_MspInit+0x78>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_SPI_MspInit+0x78>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_SPI_MspInit+0x78>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002274:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_SPI_MspInit+0x7c>)
 800228a:	f000 fe2d 	bl	8002ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800228e:	bf00      	nop
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40003800 	.word	0x40003800
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010c00 	.word	0x40010c00

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_MspInit+0xa4>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_MspInit+0xa4>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6193      	str	r3, [r2, #24]
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_MspInit+0xa4>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_MspInit+0xa4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a20      	ldr	r2, [pc, #128]	; (8002348 <HAL_MspInit+0xa4>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_MspInit+0xa4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2101      	movs	r1, #1
 80022de:	f06f 000b 	mvn.w	r0, #11
 80022e2:	f000 fdae 	bl	8002e42 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	f06f 000a 	mvn.w	r0, #10
 80022ee:	f000 fda8 	bl	8002e42 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2101      	movs	r1, #1
 80022f6:	f06f 0009 	mvn.w	r0, #9
 80022fa:	f000 fda2 	bl	8002e42 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2101      	movs	r1, #1
 8002302:	f06f 0004 	mvn.w	r0, #4
 8002306:	f000 fd9c 	bl	8002e42 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2101      	movs	r1, #1
 800230e:	f06f 0003 	mvn.w	r0, #3
 8002312:	f000 fd96 	bl	8002e42 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2101      	movs	r1, #1
 800231a:	f06f 0001 	mvn.w	r0, #1
 800231e:	f000 fd90 	bl	8002e42 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_MspInit+0xa8>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_MspInit+0xa8>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <HardFault_Handler+0x4>

08002362 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <MemManage_Handler+0x4>

08002368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <BusFault_Handler+0x4>

0800236e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <UsageFault_Handler+0x4>

08002374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f000 fbe4 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023a8:	2004      	movs	r0, #4
 80023aa:	f000 ff27 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80023b6:	2008      	movs	r0, #8
 80023b8:	f000 ff20 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023c4:	2010      	movs	r0, #16
 80023c6:	f000 ff19 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80023d2:	2020      	movs	r0, #32
 80023d4:	f000 ff12 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80023d8:	2040      	movs	r0, #64	; 0x40
 80023da:	f000 ff0f 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80023de:	2080      	movs	r0, #128	; 0x80
 80023e0:	f000 ff0c 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM1_UP_IRQHandler+0x10>)
 80023ee:	f002 fd0f 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000024c 	.word	0x2000024c

080023fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <TIM2_IRQHandler+0x10>)
 8002402:	f002 fd05 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000294 	.word	0x20000294

08002410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM3_IRQHandler+0x10>)
 8002416:	f002 fcfb 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000204 	.word	0x20000204

08002424 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM4_IRQHandler+0x10>)
 800242a:	f002 fcf1 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200001bc 	.word	0x200001bc

08002438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <_sbrk+0x5c>)
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <_sbrk+0x60>)
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <_sbrk+0x64>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <_sbrk+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	429a      	cmp	r2, r3
 8002466:	d207      	bcs.n	8002478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002468:	f003 fbd8 	bl	8005c1c <__errno>
 800246c:	4602      	mov	r2, r0
 800246e:	230c      	movs	r3, #12
 8002470:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	e009      	b.n	800248c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <_sbrk+0x64>)
 8002488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20005000 	.word	0x20005000
 8002498:	00000400 	.word	0x00000400
 800249c:	20000104 	.word	0x20000104
 80024a0:	20000368 	.word	0x20000368

080024a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	463b      	mov	r3, r7
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <MX_TIM1_Init+0x9c>)
 80024ce:	4a20      	ldr	r2, [pc, #128]	; (8002550 <MX_TIM1_Init+0xa0>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 524;
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <MX_TIM1_Init+0x9c>)
 80024d4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80024d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <MX_TIM1_Init+0x9c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_TIM1_Init+0x9c>)
 80024e2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80024e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MX_TIM1_Init+0x9c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <MX_TIM1_Init+0x9c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <MX_TIM1_Init+0x9c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024fa:	4814      	ldr	r0, [pc, #80]	; (800254c <MX_TIM1_Init+0x9c>)
 80024fc:	f002 fa5a 	bl	80049b4 <HAL_TIM_Base_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002506:	f7ff fc6d 	bl	8001de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002510:	f107 0308 	add.w	r3, r7, #8
 8002514:	4619      	mov	r1, r3
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <MX_TIM1_Init+0x9c>)
 8002518:	f002 fe16 	bl	8005148 <HAL_TIM_ConfigClockSource>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002522:	f7ff fc5f 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_TIM1_Init+0x9c>)
 8002534:	f003 f94a 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800253e:	f7ff fc51 	bl	8001de4 <Error_Handler>
  }

}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000024c 	.word	0x2000024c
 8002550:	40012c00 	.word	0x40012c00

08002554 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002568:	463b      	mov	r3, r7
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <MX_TIM2_Init+0x94>)
 8002572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 74;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <MX_TIM2_Init+0x94>)
 800257a:	224a      	movs	r2, #74	; 0x4a
 800257c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <MX_TIM2_Init+0x94>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <MX_TIM2_Init+0x94>)
 8002586:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800258a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <MX_TIM2_Init+0x94>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <MX_TIM2_Init+0x94>)
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002598:	4813      	ldr	r0, [pc, #76]	; (80025e8 <MX_TIM2_Init+0x94>)
 800259a:	f002 fa0b 	bl	80049b4 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025a4:	f7ff fc1e 	bl	8001de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <MX_TIM2_Init+0x94>)
 80025b6:	f002 fdc7 	bl	8005148 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025c0:	f7ff fc10 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM2_Init+0x94>)
 80025d2:	f003 f8fb 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025dc:	f7ff fc02 	bl	8001de4 <Error_Handler>
  }

}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000294 	.word	0x20000294

080025ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0318 	add.w	r3, r7, #24
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800260a:	463b      	mov	r3, r7
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <MX_TIM3_Init+0xf0>)
 8002618:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <MX_TIM3_Init+0xf4>)
 800261a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <MX_TIM3_Init+0xf0>)
 800261e:	2247      	movs	r2, #71	; 0x47
 8002620:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <MX_TIM3_Init+0xf0>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <MX_TIM3_Init+0xf0>)
 800262a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800262e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <MX_TIM3_Init+0xf0>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <MX_TIM3_Init+0xf0>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800263c:	4827      	ldr	r0, [pc, #156]	; (80026dc <MX_TIM3_Init+0xf0>)
 800263e:	f002 f9b9 	bl	80049b4 <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002648:	f7ff fbcc 	bl	8001de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002650:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	4619      	mov	r1, r3
 8002658:	4820      	ldr	r0, [pc, #128]	; (80026dc <MX_TIM3_Init+0xf0>)
 800265a:	f002 fd75 	bl	8005148 <HAL_TIM_ConfigClockSource>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002664:	f7ff fbbe 	bl	8001de4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002668:	481c      	ldr	r0, [pc, #112]	; (80026dc <MX_TIM3_Init+0xf0>)
 800266a:	f002 fa73 	bl	8004b54 <HAL_TIM_IC_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002674:	f7ff fbb6 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	4619      	mov	r1, r3
 8002686:	4815      	ldr	r0, [pc, #84]	; (80026dc <MX_TIM3_Init+0xf0>)
 8002688:	f003 f8a0 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002692:	f7ff fba7 	bl	8001de4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002696:	2300      	movs	r3, #0
 8002698:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800269a:	2301      	movs	r3, #1
 800269c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 80026a2:	2305      	movs	r3, #5
 80026a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026a6:	463b      	mov	r3, r7
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <MX_TIM3_Init+0xf0>)
 80026ae:	f002 fcb7 	bl	8005020 <HAL_TIM_IC_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80026b8:	f7ff fb94 	bl	8001de4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026bc:	463b      	mov	r3, r7
 80026be:	2204      	movs	r2, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <MX_TIM3_Init+0xf0>)
 80026c4:	f002 fcac 	bl	8005020 <HAL_TIM_IC_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80026ce:	f7ff fb89 	bl	8001de4 <Error_Handler>
  }

}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000204 	.word	0x20000204
 80026e0:	40000400 	.word	0x40000400

080026e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	463b      	mov	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <MX_TIM4_Init+0x94>)
 8002702:	4a1e      	ldr	r2, [pc, #120]	; (800277c <MX_TIM4_Init+0x98>)
 8002704:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1124;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_TIM4_Init+0x94>)
 8002708:	f240 4264 	movw	r2, #1124	; 0x464
 800270c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_TIM4_Init+0x94>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_TIM4_Init+0x94>)
 8002716:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800271a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_TIM4_Init+0x94>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_TIM4_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002728:	4813      	ldr	r0, [pc, #76]	; (8002778 <MX_TIM4_Init+0x94>)
 800272a:	f002 f943 	bl	80049b4 <HAL_TIM_Base_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002734:	f7ff fb56 	bl	8001de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4619      	mov	r1, r3
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <MX_TIM4_Init+0x94>)
 8002746:	f002 fcff 	bl	8005148 <HAL_TIM_ConfigClockSource>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002750:	f7ff fb48 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_TIM4_Init+0x94>)
 8002762:	f003 f833 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800276c:	f7ff fb3a 	bl	8001de4 <Error_Handler>
  }

}
 8002770:	bf00      	nop
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200001bc 	.word	0x200001bc
 800277c:	40000800 	.word	0x40000800

08002780 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a49      	ldr	r2, [pc, #292]	; (80028c0 <HAL_TIM_Base_MspInit+0x140>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d114      	bne.n	80027ca <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 80027a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2103      	movs	r1, #3
 80027bc:	2019      	movs	r0, #25
 80027be:	f000 fb40 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027c2:	2019      	movs	r0, #25
 80027c4:	f000 fb59 	bl	8002e7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027c8:	e076      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d114      	bne.n	80027fe <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	61d3      	str	r3, [r2, #28]
 80027e0:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2104      	movs	r1, #4
 80027f0:	201c      	movs	r0, #28
 80027f2:	f000 fb26 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027f6:	201c      	movs	r0, #28
 80027f8:	f000 fb3f 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 80027fc:	e05c      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_TIM_Base_MspInit+0x148>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d13e      	bne.n	8002886 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002808:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	61d3      	str	r3, [r2, #28]
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002838:	2330      	movs	r3, #48	; 0x30
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002840:	2302      	movs	r3, #2
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4820      	ldr	r0, [pc, #128]	; (80028cc <HAL_TIM_Base_MspInit+0x14c>)
 800284c:	f000 fb4c 	bl	8002ee8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_TIM_Base_MspInit+0x150>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_TIM_Base_MspInit+0x150>)
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2101      	movs	r1, #1
 8002878:	201d      	movs	r0, #29
 800287a:	f000 fae2 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800287e:	201d      	movs	r0, #29
 8002880:	f000 fafb 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 8002884:	e018      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM4)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_TIM_Base_MspInit+0x154>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d113      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	61d3      	str	r3, [r2, #28]
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_TIM_Base_MspInit+0x144>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2103      	movs	r1, #3
 80028ac:	201e      	movs	r0, #30
 80028ae:	f000 fac8 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028b2:	201e      	movs	r0, #30
 80028b4:	f000 fae1 	bl	8002e7a <HAL_NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3730      	adds	r7, #48	; 0x30
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40010c00 	.word	0x40010c00
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40000800 	.word	0x40000800

080028d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <MX_USART1_UART_Init+0x50>)
 80028e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 80028e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 80028fe:	220c      	movs	r2, #12
 8002900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_USART1_UART_Init+0x4c>)
 8002910:	f002 ffcc 	bl	80058ac <HAL_UART_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800291a:	f7ff fa63 	bl	8001de4 <Error_Handler>
  }

}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000031c 	.word	0x2000031c
 8002928:	40013800 	.word	0x40013800

0800292c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <MX_USART3_UART_Init+0x50>)
 8002934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800293c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002952:	220c      	movs	r2, #12
 8002954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	; (8002978 <MX_USART3_UART_Init+0x4c>)
 8002964:	f002 ffa2 	bl	80058ac <HAL_UART_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800296e:	f7ff fa39 	bl	8001de4 <Error_Handler>
  }

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200002dc 	.word	0x200002dc
 800297c:	40004800 	.word	0x40004800

08002980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_UART_MspInit+0xfc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d132      	bne.n	8002a06 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a0:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_UART_MspInit+0x100>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a36      	ldr	r2, [pc, #216]	; (8002a80 <HAL_UART_MspInit+0x100>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_UART_MspInit+0x100>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_UART_MspInit+0x100>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_UART_MspInit+0x100>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_UART_MspInit+0x100>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0318 	add.w	r3, r7, #24
 80029e2:	4619      	mov	r1, r3
 80029e4:	4827      	ldr	r0, [pc, #156]	; (8002a84 <HAL_UART_MspInit+0x104>)
 80029e6:	f000 fa7f 	bl	8002ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	4619      	mov	r1, r3
 80029fe:	4821      	ldr	r0, [pc, #132]	; (8002a84 <HAL_UART_MspInit+0x104>)
 8002a00:	f000 fa72 	bl	8002ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a04:	e036      	b.n	8002a74 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_UART_MspInit+0x108>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d131      	bne.n	8002a74 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_UART_MspInit+0x100>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_UART_MspInit+0x100>)
 8002a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0x100>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_UART_MspInit+0x100>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_UART_MspInit+0x100>)
 8002a2e:	f043 0308 	orr.w	r3, r3, #8
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_UART_MspInit+0x100>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	f107 0318 	add.w	r3, r7, #24
 8002a52:	4619      	mov	r1, r3
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <HAL_UART_MspInit+0x10c>)
 8002a56:	f000 fa47 	bl	8002ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 0318 	add.w	r3, r7, #24
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4807      	ldr	r0, [pc, #28]	; (8002a8c <HAL_UART_MspInit+0x10c>)
 8002a70:	f000 fa3a 	bl	8002ee8 <HAL_GPIO_Init>
}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010800 	.word	0x40010800
 8002a88:	40004800 	.word	0x40004800
 8002a8c:	40010c00 	.word	0x40010c00

08002a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a92:	e003      	b.n	8002a9c <LoopCopyDataInit>

08002a94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a9a:	3104      	adds	r1, #4

08002a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a9c:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002aa0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002aa2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002aa4:	d3f6      	bcc.n	8002a94 <CopyDataInit>
  ldr r2, =_sbss
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002aa8:	e002      	b.n	8002ab0 <LoopFillZerobss>

08002aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002aac:	f842 3b04 	str.w	r3, [r2], #4

08002ab0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ab2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ab4:	d3f9      	bcc.n	8002aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ab6:	f7ff fcf5 	bl	80024a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aba:	f003 f8b5 	bl	8005c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002abe:	f7fd fc0d 	bl	80002dc <main>
  bx lr
 8002ac2:	4770      	bx	lr
  ldr r3, =_sidata
 8002ac4:	080068bc 	.word	0x080068bc
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002acc:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 8002ad0:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 8002ad4:	20000364 	.word	0x20000364

08002ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC1_2_IRQHandler>
	...

08002adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_Init+0x28>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_Init+0x28>)
 8002ae6:	f043 0310 	orr.w	r3, r3, #16
 8002aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 f99d 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 f808 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7ff fbd4 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x54>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9c3 	bl	8002eb2 <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f000 f97d 	bl	8002e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x5c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000030 	.word	0x20000030
 8002b60:	20000038 	.word	0x20000038
 8002b64:	20000034 	.word	0x20000034

08002b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_IncTick+0x1c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_IncTick+0x20>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_IncTick+0x20>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000038 	.word	0x20000038
 8002b88:	2000035c 	.word	0x2000035c

08002b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <HAL_GetTick+0x10>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	2000035c 	.word	0x2000035c

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d005      	beq.n	8002bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_Delay+0x40>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc6:	bf00      	nop
 8002bc8:	f7ff ffe0 	bl	8002b8c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f7      	bhi.n	8002bc8 <HAL_Delay+0x28>
  {
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000038 	.word	0x20000038

08002be4 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetREVID+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0c1b      	lsrs	r3, r3, #16
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e0042000 	.word	0xe0042000

08002bfc <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_GetDEVID+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	e0042000 	.word	0xe0042000

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <__NVIC_EnableIRQ+0x34>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db10      	blt.n	8002ce4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <__NVIC_DisableIRQ+0x40>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	3320      	adds	r3, #32
 8002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ce0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0c      	blt.n	8002d20 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <__NVIC_ClearPendingIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	3360      	adds	r3, #96	; 0x60
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f7ff ff90 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff feed 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e54:	f7ff ff02 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f7ff ff90 	bl	8002d84 <NVIC_EncodePriority>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff5f 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fef5 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff03 	bl	8002cb0 <__NVIC_DisableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff94 	bl	8002de8 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff0b 	bl	8002cf4 <__NVIC_ClearPendingIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b08b      	sub	sp, #44	; 0x2c
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efa:	e127      	b.n	800314c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002efc:	2201      	movs	r2, #1
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f040 8116 	bne.w	8003146 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b12      	cmp	r3, #18
 8002f20:	d034      	beq.n	8002f8c <HAL_GPIO_Init+0xa4>
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d80d      	bhi.n	8002f42 <HAL_GPIO_Init+0x5a>
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d02b      	beq.n	8002f82 <HAL_GPIO_Init+0x9a>
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d804      	bhi.n	8002f38 <HAL_GPIO_Init+0x50>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d031      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d01c      	beq.n	8002f70 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f36:	e048      	b.n	8002fca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d043      	beq.n	8002fc4 <HAL_GPIO_Init+0xdc>
 8002f3c:	2b11      	cmp	r3, #17
 8002f3e:	d01b      	beq.n	8002f78 <HAL_GPIO_Init+0x90>
          break;
 8002f40:	e043      	b.n	8002fca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f42:	4a89      	ldr	r2, [pc, #548]	; (8003168 <HAL_GPIO_Init+0x280>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d026      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
 8002f48:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_GPIO_Init+0x280>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d806      	bhi.n	8002f5c <HAL_GPIO_Init+0x74>
 8002f4e:	4a87      	ldr	r2, [pc, #540]	; (800316c <HAL_GPIO_Init+0x284>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d020      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
 8002f54:	4a86      	ldr	r2, [pc, #536]	; (8003170 <HAL_GPIO_Init+0x288>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01d      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
          break;
 8002f5a:	e036      	b.n	8002fca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f5c:	4a85      	ldr	r2, [pc, #532]	; (8003174 <HAL_GPIO_Init+0x28c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
 8002f62:	4a85      	ldr	r2, [pc, #532]	; (8003178 <HAL_GPIO_Init+0x290>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d016      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
 8002f68:	4a84      	ldr	r2, [pc, #528]	; (800317c <HAL_GPIO_Init+0x294>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0xae>
          break;
 8002f6e:	e02c      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	623b      	str	r3, [r7, #32]
          break;
 8002f76:	e028      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	623b      	str	r3, [r7, #32]
          break;
 8002f80:	e023      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	3308      	adds	r3, #8
 8002f88:	623b      	str	r3, [r7, #32]
          break;
 8002f8a:	e01e      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	330c      	adds	r3, #12
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e019      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	623b      	str	r3, [r7, #32]
          break;
 8002fa2:	e012      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fac:	2308      	movs	r3, #8
 8002fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	611a      	str	r2, [r3, #16]
          break;
 8002fb6:	e008      	b.n	8002fca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	615a      	str	r2, [r3, #20]
          break;
 8002fc2:	e002      	b.n	8002fca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
          break;
 8002fc8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2bff      	cmp	r3, #255	; 0xff
 8002fce:	d801      	bhi.n	8002fd4 <HAL_GPIO_Init+0xec>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	e001      	b.n	8002fd8 <HAL_GPIO_Init+0xf0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2bff      	cmp	r3, #255	; 0xff
 8002fde:	d802      	bhi.n	8002fe6 <HAL_GPIO_Init+0xfe>
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	e002      	b.n	8002fec <HAL_GPIO_Init+0x104>
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	3b08      	subs	r3, #8
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	6a39      	ldr	r1, [r7, #32]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8096 	beq.w	8003146 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_GPIO_Init+0x298>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_GPIO_Init+0x298>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6193      	str	r3, [r2, #24]
 8003026:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_GPIO_Init+0x298>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003032:	4a54      	ldr	r2, [pc, #336]	; (8003184 <HAL_GPIO_Init+0x29c>)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	3302      	adds	r3, #2
 800303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	220f      	movs	r2, #15
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4013      	ands	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4b      	ldr	r2, [pc, #300]	; (8003188 <HAL_GPIO_Init+0x2a0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_Init+0x19e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4a      	ldr	r2, [pc, #296]	; (800318c <HAL_GPIO_Init+0x2a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_Init+0x19a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <HAL_GPIO_Init+0x2a8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_Init+0x196>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a48      	ldr	r2, [pc, #288]	; (8003194 <HAL_GPIO_Init+0x2ac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_Init+0x192>
 8003076:	2303      	movs	r3, #3
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x1a0>
 800307a:	2304      	movs	r3, #4
 800307c:	e004      	b.n	8003088 <HAL_GPIO_Init+0x1a0>
 800307e:	2302      	movs	r3, #2
 8003080:	e002      	b.n	8003088 <HAL_GPIO_Init+0x1a0>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_GPIO_Init+0x1a0>
 8003086:	2300      	movs	r3, #0
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	f002 0203 	and.w	r2, r2, #3
 800308e:	0092      	lsls	r2, r2, #2
 8003090:	4093      	lsls	r3, r2
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003098:	493a      	ldr	r1, [pc, #232]	; (8003184 <HAL_GPIO_Init+0x29c>)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	3302      	adds	r3, #2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030b2:	4b39      	ldr	r3, [pc, #228]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4938      	ldr	r1, [pc, #224]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
 80030be:	e006      	b.n	80030ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4933      	ldr	r1, [pc, #204]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	492e      	ldr	r1, [pc, #184]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 80030e6:	e006      	b.n	80030f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4929      	ldr	r1, [pc, #164]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	4924      	ldr	r1, [pc, #144]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
 800310e:	e006      	b.n	800311e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	43db      	mvns	r3, r3
 8003118:	491f      	ldr	r1, [pc, #124]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 800311a:	4013      	ands	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	491a      	ldr	r1, [pc, #104]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	60cb      	str	r3, [r1, #12]
 8003136:	e006      	b.n	8003146 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	43db      	mvns	r3, r3
 8003140:	4915      	ldr	r1, [pc, #84]	; (8003198 <HAL_GPIO_Init+0x2b0>)
 8003142:	4013      	ands	r3, r2
 8003144:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	3301      	adds	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f aed0 	bne.w	8002efc <HAL_GPIO_Init+0x14>
  }
}
 800315c:	bf00      	nop
 800315e:	372c      	adds	r7, #44	; 0x2c
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	10210000 	.word	0x10210000
 800316c:	10110000 	.word	0x10110000
 8003170:	10120000 	.word	0x10120000
 8003174:	10310000 	.word	0x10310000
 8003178:	10320000 	.word	0x10320000
 800317c:	10220000 	.word	0x10220000
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000
 8003188:	40010800 	.word	0x40010800
 800318c:	40010c00 	.word	0x40010c00
 8003190:	40011000 	.word	0x40011000
 8003194:	40011400 	.word	0x40011400
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	807b      	strh	r3, [r7, #2]
 80031d6:	4613      	mov	r3, r2
 80031d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031da:	787b      	ldrb	r3, [r7, #1]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031e6:	e003      	b.n	80031f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	041a      	lsls	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	611a      	str	r2, [r3, #16]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d006      	beq.n	8003220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fec2 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	420e0020 	.word	0x420e0020

08003244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e26c      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8087 	beq.w	8003372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003264:	4b92      	ldr	r3, [pc, #584]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b04      	cmp	r3, #4
 800326e:	d00c      	beq.n	800328a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003270:	4b8f      	ldr	r3, [pc, #572]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d112      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5e>
 800327c:	4b8c      	ldr	r3, [pc, #560]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d10b      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328a:	4b89      	ldr	r3, [pc, #548]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06c      	beq.n	8003370 <HAL_RCC_OscConfig+0x12c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d168      	bne.n	8003370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e246      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x76>
 80032ac:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a7f      	ldr	r2, [pc, #508]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e02e      	b.n	8003318 <HAL_RCC_OscConfig+0xd4>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x98>
 80032c2:	4b7b      	ldr	r3, [pc, #492]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7a      	ldr	r2, [pc, #488]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a77      	ldr	r2, [pc, #476]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xd4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0xbc>
 80032e6:	4b72      	ldr	r3, [pc, #456]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a71      	ldr	r2, [pc, #452]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6e      	ldr	r2, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xd4>
 8003300:	4b6b      	ldr	r3, [pc, #428]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b68      	ldr	r3, [pc, #416]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a67      	ldr	r2, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fc34 	bl	8002b8c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7ff fc30 	bl	8002b8c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1fa      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xe4>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7ff fc20 	bl	8002b8c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7ff fc1c 	bl	8002b8c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1e6      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x10c>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800338a:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x18c>
 8003396:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x176>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1ba      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4939      	ldr	r1, [pc, #228]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e03a      	b.n	8003446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7ff fbd5 	bl	8002b8c <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e6:	f7ff fbd1 	bl	8002b8c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e19b      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4927      	ldr	r1, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7ff fbb4 	bl	8002b8c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7ff fbb0 	bl	8002b8c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e17a      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03a      	beq.n	80034c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d019      	beq.n	800348e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_RCC_OscConfig+0x274>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff fb94 	bl	8002b8c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7ff fb90 	bl	8002b8c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e15a      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003486:	2001      	movs	r0, #1
 8003488:	f000 fada 	bl	8003a40 <RCC_Delay>
 800348c:	e01c      	b.n	80034c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_OscConfig+0x274>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7ff fb7a 	bl	8002b8c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7ff fb76 	bl	8002b8c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d908      	bls.n	80034bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e140      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	42420000 	.word	0x42420000
 80034b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	4b9e      	ldr	r3, [pc, #632]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e9      	bne.n	800349c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a6 	beq.w	8003622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b97      	ldr	r3, [pc, #604]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	4b94      	ldr	r3, [pc, #592]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4a93      	ldr	r2, [pc, #588]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f0:	61d3      	str	r3, [r2, #28]
 80034f2:	4b91      	ldr	r3, [pc, #580]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b8e      	ldr	r3, [pc, #568]	; (800373c <HAL_RCC_OscConfig+0x4f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b8b      	ldr	r3, [pc, #556]	; (800373c <HAL_RCC_OscConfig+0x4f8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a8a      	ldr	r2, [pc, #552]	; (800373c <HAL_RCC_OscConfig+0x4f8>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7ff fb37 	bl	8002b8c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7ff fb33 	bl	8002b8c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0fd      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCC_OscConfig+0x4f8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x312>
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4a7a      	ldr	r2, [pc, #488]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6213      	str	r3, [r2, #32]
 8003554:	e02d      	b.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x334>
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a75      	ldr	r2, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	4b73      	ldr	r3, [pc, #460]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a72      	ldr	r2, [pc, #456]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x356>
 8003580:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a6c      	ldr	r2, [pc, #432]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6213      	str	r3, [r2, #32]
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x36e>
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4a66      	ldr	r2, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6213      	str	r3, [r2, #32]
 80035a6:	4b64      	ldr	r3, [pc, #400]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a63      	ldr	r2, [pc, #396]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7ff fae7 	bl	8002b8c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7ff fae3 	bl	8002b8c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0ab      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ee      	beq.n	80035c2 <HAL_RCC_OscConfig+0x37e>
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7ff fad1 	bl	8002b8c <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7ff facd 	bl	8002b8c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e095      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a47      	ldr	r2, [pc, #284]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8081 	beq.w	800372e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d061      	beq.n	80036fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d146      	bne.n	80036ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_RCC_OscConfig+0x4fc>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7ff faa1 	bl	8002b8c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7ff fa9d 	bl	8002b8c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e067      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d108      	bne.n	8003688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003676:	4b30      	ldr	r3, [pc, #192]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	492d      	ldr	r1, [pc, #180]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a19      	ldr	r1, [r3, #32]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	430b      	orrs	r3, r1
 800369a:	4927      	ldr	r1, [pc, #156]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x4fc>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7ff fa71 	bl	8002b8c <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7ff fa6d 	bl	8002b8c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e037      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x46a>
 80036cc:	e02f      	b.n	800372e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_RCC_OscConfig+0x4fc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7ff fa5a 	bl	8002b8c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7ff fa56 	bl	8002b8c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e020      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x498>
 80036fa:	e018      	b.n	800372e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e013      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	429a      	cmp	r2, r3
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d001      	beq.n	800372e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	42420060 	.word	0x42420060

08003744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0d0      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d910      	bls.n	8003788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b67      	ldr	r3, [pc, #412]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4965      	ldr	r1, [pc, #404]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b8:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	494d      	ldr	r1, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d040      	beq.n	8003864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d115      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	4b41      	ldr	r3, [pc, #260]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e073      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06b      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4936      	ldr	r1, [pc, #216]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003834:	f7ff f9aa 	bl	8002b8c <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7ff f9a6 	bl	8002b8c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e053      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d210      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4922      	ldr	r1, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4916      	ldr	r1, [pc, #88]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038d2:	f000 f821 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d6:	4601      	mov	r1, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ea:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1cc>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff f908 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40022000 	.word	0x40022000
 8003908:	40021000 	.word	0x40021000
 800390c:	08006868 	.word	0x08006868
 8003910:	20000030 	.word	0x20000030
 8003914:	20000034 	.word	0x20000034

08003918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b490      	push	{r4, r7}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800391e:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003920:	1d3c      	adds	r4, r7, #4
 8003922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b04      	cmp	r3, #4
 8003950:	d002      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x40>
 8003952:	2b08      	cmp	r3, #8
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0x46>
 8003956:	e02d      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800395a:	623b      	str	r3, [r7, #32]
      break;
 800395c:	e02d      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	0c9b      	lsrs	r3, r3, #18
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800396a:	4413      	add	r3, r2
 800396c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003970:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c5b      	lsrs	r3, r3, #17
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800398a:	4413      	add	r3, r2
 800398c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003990:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003996:	fb02 f203 	mul.w	r2, r2, r3
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	e004      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	623b      	str	r3, [r7, #32]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b6:	623b      	str	r3, [r7, #32]
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	6a3b      	ldr	r3, [r7, #32]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc90      	pop	{r4, r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	08006840 	.word	0x08006840
 80039cc:	08006850 	.word	0x08006850
 80039d0:	40021000 	.word	0x40021000
 80039d4:	007a1200 	.word	0x007a1200
 80039d8:	003d0900 	.word	0x003d0900

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b02      	ldr	r3, [pc, #8]	; (80039ec <HAL_RCC_GetHCLKFreq+0x10>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	20000030 	.word	0x20000030

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f4:	f7ff fff2 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039f8:	4601      	mov	r1, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4a03      	ldr	r2, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08006878 	.word	0x08006878

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a1c:	f7ff ffde 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a20:	4601      	mov	r1, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0adb      	lsrs	r3, r3, #11
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08006878 	.word	0x08006878

08003a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <RCC_Delay+0x34>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <RCC_Delay+0x38>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a5b      	lsrs	r3, r3, #9
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a5c:	bf00      	nop
  }
  while (Delay --);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	60fa      	str	r2, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f9      	bne.n	8003a5c <RCC_Delay+0x1c>
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000030 	.word	0x20000030
 8003a78:	10624dd3 	.word	0x10624dd3

08003a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d07d      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a4b      	ldr	r2, [pc, #300]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
 8003ab4:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d118      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a42      	ldr	r2, [pc, #264]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003adc:	f7ff f856 	bl	8002b8c <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	e008      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7ff f852 	bl	8002b8c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e06d      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d02e      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d027      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b20:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b30:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d014      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7ff f821 	bl	8002b8c <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7ff f81d 	bl	8002b8c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e036      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ee      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4917      	ldr	r1, [pc, #92]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	490b      	ldr	r1, [pc, #44]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40007000 	.word	0x40007000
 8003be4:	42420440 	.word	0x42420440

08003be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b08d      	sub	sp, #52	; 0x34
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bf0:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bf2:	f107 040c 	add.w	r4, r7, #12
 8003bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	2300      	movs	r3, #0
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	2300      	movs	r3, #0
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d07f      	beq.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d002      	beq.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d048      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c24:	e08b      	b.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d07f      	beq.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	0c9b      	lsrs	r3, r3, #18
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c44:	4413      	add	r3, r2
 8003c46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c4a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c56:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0c5b      	lsrs	r3, r3, #17
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c64:	4413      	add	r3, r2
 8003c66:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c76:	4a37      	ldr	r2, [pc, #220]	; (8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c86:	e004      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ca4:	e048      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cb4:	e040      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d108      	bne.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd8:	e01f      	b.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003cf2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf8:	e00f      	b.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d04:	d11a      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003d12:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d18:	e010      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d1c:	f7ff fe7c 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	0b9b      	lsrs	r3, r3, #14
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d3c:	bf00      	nop
    }
  }
  return (frequency);
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3734      	adds	r7, #52	; 0x34
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd90      	pop	{r4, r7, pc}
 8003d48:	08006854 	.word	0x08006854
 8003d4c:	08006864 	.word	0x08006864
 8003d50:	40021000 	.word	0x40021000
 8003d54:	007a1200 	.word	0x007a1200
 8003d58:	003d0900 	.word	0x003d0900
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab

08003d60 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e084      	b.n	8003e80 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7c5b      	ldrb	r3, [r3, #17]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe f9f2 	bl	8002170 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f9c8 	bl	8004128 <HAL_RTC_WaitForSynchro>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2204      	movs	r2, #4
 8003da2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e06b      	b.n	8003e80 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa81 	bl	80042b0 <RTC_EnterInitMode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e060      	b.n	8003e80 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0207 	bic.w	r2, r2, #7
 8003dcc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_RTC_Init+0x128>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <HAL_RTC_Init+0x128>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003de2:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <HAL_RTC_Init+0x128>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4926      	ldr	r1, [pc, #152]	; (8003e88 <HAL_RTC_Init+0x128>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d003      	beq.n	8003e06 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e00e      	b.n	8003e24 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7ff feee 	bl	8003be8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e0c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2204      	movs	r2, #4
 8003e18:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e030      	b.n	8003e80 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 010f 	bic.w	r1, r3, #15
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0c1a      	lsrs	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	b291      	uxth	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fa55 	bl	8004300 <RTC_ExitInitMode>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00c      	b.n	8003e80 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40006c00 	.word	0x40006c00

08003e8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_RTC_SetTime+0x20>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e080      	b.n	8003fb2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	7c1b      	ldrb	r3, [r3, #16]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_RTC_SetTime+0x30>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e07a      	b.n	8003fb2 <HAL_RTC_SetTime+0x126>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d113      	bne.n	8003ef6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ed8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a5b      	subs	r3, r3, r1
 8003ee8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003eea:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ef0:	4413      	add	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e01e      	b.n	8003f34 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fa28 	bl	8004350 <RTC_Bcd2ToByte>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f08:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa1d 	bl	8004350 <RTC_Bcd2ToByte>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f22:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	789b      	ldrb	r3, [r3, #2]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fa11 	bl	8004350 <RTC_Bcd2ToByte>
 8003f2e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f30:	4423      	add	r3, r4
 8003f32:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f953 	bl	80041e2 <RTC_WriteTimeCounter>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2204      	movs	r2, #4
 8003f46:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e02f      	b.n	8003fb2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0205 	bic.w	r2, r2, #5
 8003f60:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f964 	bl	8004230 <RTC_ReadAlarmCounter>
 8003f68:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d018      	beq.n	8003fa4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d214      	bcs.n	8003fa4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003f80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f84:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f86:	6939      	ldr	r1, [r7, #16]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f96a 	bl	8004262 <RTC_WriteAlarmCounter>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2204      	movs	r2, #4
 8003f98:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e006      	b.n	8003fb2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}
	...

08003fbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RTC_SetDate+0x24>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e097      	b.n	8004114 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	7c1b      	ldrb	r3, [r3, #16]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_RTC_SetDate+0x34>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e091      	b.n	8004114 <HAL_RTC_SetDate+0x158>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	78da      	ldrb	r2, [r3, #3]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	785a      	ldrb	r2, [r3, #1]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	789a      	ldrb	r2, [r3, #2]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	739a      	strb	r2, [r3, #14]
 800401a:	e01a      	b.n	8004052 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	78db      	ldrb	r3, [r3, #3]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f995 	bl	8004350 <RTC_Bcd2ToByte>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f98c 	bl	8004350 <RTC_Bcd2ToByte>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	789b      	ldrb	r3, [r3, #2]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 f983 	bl	8004350 <RTC_Bcd2ToByte>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	7bdb      	ldrb	r3, [r3, #15]
 8004056:	4618      	mov	r0, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	7b59      	ldrb	r1, [r3, #13]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	7b9b      	ldrb	r3, [r3, #14]
 8004060:	461a      	mov	r2, r3
 8004062:	f000 f993 	bl	800438c <RTC_WeekDayNum>
 8004066:	4603      	mov	r3, r0
 8004068:	461a      	mov	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	7b1a      	ldrb	r2, [r3, #12]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f883 	bl	8004182 <RTC_ReadTimeCounter>
 800407c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <HAL_RTC_SetDate+0x160>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0adb      	lsrs	r3, r3, #11
 8004088:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b18      	cmp	r3, #24
 800408e:	d93a      	bls.n	8004106 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4a23      	ldr	r2, [pc, #140]	; (8004120 <HAL_RTC_SetDate+0x164>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	4a22      	ldr	r2, [pc, #136]	; (8004124 <HAL_RTC_SetDate+0x168>)
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80040a6:	69f9      	ldr	r1, [r7, #28]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f89a 	bl	80041e2 <RTC_WriteTimeCounter>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2204      	movs	r2, #4
 80040b8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e027      	b.n	8004114 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f8b3 	bl	8004230 <RTC_ReadAlarmCounter>
 80040ca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d018      	beq.n	8004106 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d214      	bcs.n	8004106 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040e6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8b9 	bl	8004262 <RTC_WriteAlarmCounter>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2204      	movs	r2, #4
 80040fa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e006      	b.n	8004114 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	91a2b3c5 	.word	0x91a2b3c5
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	00015180 	.word	0x00015180

08004128 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e01d      	b.n	800417a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0208 	bic.w	r2, r2, #8
 800414c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800414e:	f7fe fd1d 	bl	8002b8c <HAL_GetTick>
 8004152:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004154:	e009      	b.n	800416a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004156:	f7fe fd19 	bl	8002b8c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004164:	d901      	bls.n	800416a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e007      	b.n	800417a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ee      	beq.n	8004156 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004182:	b480      	push	{r7}
 8004184:	b087      	sub	sp, #28
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	827b      	strh	r3, [r7, #18]
 800418e:	2300      	movs	r3, #0
 8004190:	823b      	strh	r3, [r7, #16]
 8004192:	2300      	movs	r3, #0
 8004194:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80041b2:	8a7a      	ldrh	r2, [r7, #18]
 80041b4:	8a3b      	ldrh	r3, [r7, #16]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d008      	beq.n	80041cc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80041ba:	8a3b      	ldrh	r3, [r7, #16]
 80041bc:	041a      	lsls	r2, r3, #16
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e004      	b.n	80041d6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80041cc:	8a7b      	ldrh	r3, [r7, #18]
 80041ce:	041a      	lsls	r2, r3, #16
 80041d0:	89fb      	ldrh	r3, [r7, #14]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80041d6:	697b      	ldr	r3, [r7, #20]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f85d 	bl	80042b0 <RTC_EnterInitMode>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e011      	b.n	8004226 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	0c12      	lsrs	r2, r2, #16
 800420a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b292      	uxth	r2, r2
 8004214:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f872 	bl	8004300 <RTC_ExitInitMode>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	81fb      	strh	r3, [r7, #14]
 800423c:	2300      	movs	r3, #0
 800423e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	041a      	lsls	r2, r3, #16
 8004254:	89bb      	ldrh	r3, [r7, #12]
 8004256:	4313      	orrs	r3, r2
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f81d 	bl	80042b0 <RTC_EnterInitMode>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
 8004280:	e011      	b.n	80042a6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	0c12      	lsrs	r2, r2, #16
 800428a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b292      	uxth	r2, r2
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f832 	bl	8004300 <RTC_ExitInitMode>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80042bc:	f7fe fc66 	bl	8002b8c <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042c2:	e009      	b.n	80042d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042c4:	f7fe fc62 	bl	8002b8c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d2:	d901      	bls.n	80042d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e00f      	b.n	80042f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ee      	beq.n	80042c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0210 	orr.w	r2, r2, #16
 80042f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0210 	bic.w	r2, r2, #16
 800431a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800431c:	f7fe fc36 	bl	8002b8c <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004322:	e009      	b.n	8004338 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004324:	f7fe fc32 	bl	8002b8c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004332:	d901      	bls.n	8004338 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e007      	b.n	8004348 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ee      	beq.n	8004324 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	4413      	add	r3, r2
 800437e:	b2db      	uxtb	r3, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
	...

0800438c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
 8004398:	4613      	mov	r3, r2
 800439a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80043aa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d82d      	bhi.n	800440e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <RTC_WeekDayNum+0xe4>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	085a      	lsrs	r2, r3, #1
 80043c6:	78bb      	ldrb	r3, [r7, #2]
 80043c8:	441a      	add	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	441a      	add	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3b01      	subs	r3, #1
 80043da:	4926      	ldr	r1, [pc, #152]	; (8004474 <RTC_WeekDayNum+0xe8>)
 80043dc:	fba1 1303 	umull	r1, r3, r1, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	4922      	ldr	r1, [pc, #136]	; (8004474 <RTC_WeekDayNum+0xe8>)
 80043ea:	fba1 1303 	umull	r1, r3, r1, r3
 80043ee:	09db      	lsrs	r3, r3, #7
 80043f0:	4413      	add	r3, r2
 80043f2:	1d1a      	adds	r2, r3, #4
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <RTC_WeekDayNum+0xec>)
 80043f6:	fba3 1302 	umull	r1, r3, r3, r2
 80043fa:	1ad1      	subs	r1, r2, r3
 80043fc:	0849      	lsrs	r1, r1, #1
 80043fe:	440b      	add	r3, r1
 8004400:	0899      	lsrs	r1, r3, #2
 8004402:	460b      	mov	r3, r1
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e029      	b.n	8004462 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	4a15      	ldr	r2, [pc, #84]	; (8004470 <RTC_WeekDayNum+0xe4>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	085a      	lsrs	r2, r3, #1
 8004422:	78bb      	ldrb	r3, [r7, #2]
 8004424:	441a      	add	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	441a      	add	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4910      	ldr	r1, [pc, #64]	; (8004474 <RTC_WeekDayNum+0xe8>)
 8004434:	fba1 1303 	umull	r1, r3, r1, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	490d      	ldr	r1, [pc, #52]	; (8004474 <RTC_WeekDayNum+0xe8>)
 8004440:	fba1 1303 	umull	r1, r3, r1, r3
 8004444:	09db      	lsrs	r3, r3, #7
 8004446:	4413      	add	r3, r2
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <RTC_WeekDayNum+0xec>)
 800444c:	fba3 1302 	umull	r1, r3, r3, r2
 8004450:	1ad1      	subs	r1, r2, r3
 8004452:	0849      	lsrs	r1, r1, #1
 8004454:	440b      	add	r3, r1
 8004456:	0899      	lsrs	r1, r3, #2
 8004458:	460b      	mov	r3, r1
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a5b      	subs	r3, r3, r1
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	b2db      	uxtb	r3, r3
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	38e38e39 	.word	0x38e38e39
 8004474:	51eb851f 	.word	0x51eb851f
 8004478:	24924925 	.word	0x24924925

0800447c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <HAL_RTCEx_BKUPWrite+0x30>)
 800448e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4413      	add	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	b292      	uxth	r2, r2
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40006c00 	.word	0x40006c00

080044b0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RTCEx_BKUPRead+0x34>)
 80044c4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80044d8:	68bb      	ldr	r3, [r7, #8]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40006c00 	.word	0x40006c00

080044e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e076      	b.n	80045e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450a:	d009      	beq.n	8004520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	61da      	str	r2, [r3, #28]
 8004512:	e005      	b.n	8004520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd fe72 	bl	8002224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	ea42 0103 	orr.w	r1, r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	0c1a      	lsrs	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f002 0204 	and.w	r2, r2, #4
 80045c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Transmit+0x22>
 800460e:	2302      	movs	r3, #2
 8004610:	e126      	b.n	8004860 <HAL_SPI_Transmit+0x270>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800461a:	f7fe fab7 	bl	8002b8c <HAL_GetTick>
 800461e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004630:	2302      	movs	r3, #2
 8004632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004634:	e10b      	b.n	800484e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Transmit+0x52>
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004646:	e102      	b.n	800484e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2203      	movs	r2, #3
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d10f      	bne.n	80046b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d007      	beq.n	80046ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d14b      	bne.n	8004770 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_SPI_Transmit+0xf6>
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d13e      	bne.n	8004764 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800470a:	e02b      	b.n	8004764 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d112      	bne.n	8004740 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	; 0x36
 800473e:	e011      	b.n	8004764 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004740:	f7fe fa24 	bl	8002b8c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d803      	bhi.n	8004758 <HAL_SPI_Transmit+0x168>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d102      	bne.n	800475e <HAL_SPI_Transmit+0x16e>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004762:	e074      	b.n	800484e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ce      	bne.n	800470c <HAL_SPI_Transmit+0x11c>
 800476e:	e04c      	b.n	800480a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_SPI_Transmit+0x18e>
 8004778:	8afb      	ldrh	r3, [r7, #22]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d140      	bne.n	8004800 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047a4:	e02c      	b.n	8004800 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d113      	bne.n	80047dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	7812      	ldrb	r2, [r2, #0]
 80047c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80047da:	e011      	b.n	8004800 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047dc:	f7fe f9d6 	bl	8002b8c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d803      	bhi.n	80047f4 <HAL_SPI_Transmit+0x204>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_Transmit+0x20a>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047fe:	e026      	b.n	800484e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1cd      	bne.n	80047a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f8b2 	bl	8004978 <SPI_EndRxTxTransaction>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e000      	b.n	800484e <HAL_SPI_Transmit+0x25e>
  }

error:
 800484c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800485e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004878:	f7fe f988 	bl	8002b8c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	4413      	add	r3, r2
 8004886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004888:	f7fe f980 	bl	8002b8c <HAL_GetTick>
 800488c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800488e:	4b39      	ldr	r3, [pc, #228]	; (8004974 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	015b      	lsls	r3, r3, #5
 8004894:	0d1b      	lsrs	r3, r3, #20
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	fb02 f303 	mul.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800489e:	e054      	b.n	800494a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d050      	beq.n	800494a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048a8:	f7fe f970 	bl	8002b8c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d902      	bls.n	80048be <SPI_WaitFlagStateUntilTimeout+0x56>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d13d      	bne.n	800493a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d6:	d111      	bne.n	80048fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e0:	d004      	beq.n	80048ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ea:	d107      	bne.n	80048fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004904:	d10f      	bne.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e017      	b.n	800496a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3b01      	subs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d19b      	bne.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000030 	.word	0x20000030

08004978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff ff6a 	bl	8004868 <SPI_WaitFlagStateUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e000      	b.n	80049ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e041      	b.n	8004a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fd fed0 	bl	8002780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f000 fcc0 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e03a      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_TIM_Base_Start_IT+0x98>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x58>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x58>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x58>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d111      	bne.n	8004ad0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d010      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	e007      	b.n	8004ae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800

08004af8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10f      	bne.n	8004b40 <HAL_TIM_Base_Stop_IT+0x48>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	f240 4344 	movw	r3, #1092	; 0x444
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_Base_Stop_IT+0x48>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f839 	bl	8004bf2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fbf0 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_IC_Start_IT+0x1a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e013      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x42>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_IC_Start_IT+0x2a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x42>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_IC_Start_IT+0x3a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	e003      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x42>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_TIM_IC_Start_IT+0x54>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	e013      	b.n	8004c80 <HAL_TIM_IC_Start_IT+0x7c>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d104      	bne.n	8004c68 <HAL_TIM_IC_Start_IT+0x64>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e00b      	b.n	8004c80 <HAL_TIM_IC_Start_IT+0x7c>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d104      	bne.n	8004c78 <HAL_TIM_IC_Start_IT+0x74>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e003      	b.n	8004c80 <HAL_TIM_IC_Start_IT+0x7c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d102      	bne.n	8004c8e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c88:	7bbb      	ldrb	r3, [r7, #14]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d001      	beq.n	8004c92 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0b3      	b.n	8004dfa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_IC_Start_IT+0x9e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	e013      	b.n	8004cca <HAL_TIM_IC_Start_IT+0xc6>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_IC_Start_IT+0xae>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb0:	e00b      	b.n	8004cca <HAL_TIM_IC_Start_IT+0xc6>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_IC_Start_IT+0xbe>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc0:	e003      	b.n	8004cca <HAL_TIM_IC_Start_IT+0xc6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_IC_Start_IT+0xd6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cd8:	e013      	b.n	8004d02 <HAL_TIM_IC_Start_IT+0xfe>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_IC_Start_IT+0xe6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce8:	e00b      	b.n	8004d02 <HAL_TIM_IC_Start_IT+0xfe>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_IC_Start_IT+0xf6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	e003      	b.n	8004d02 <HAL_TIM_IC_Start_IT+0xfe>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d841      	bhi.n	8004d8c <HAL_TIM_IC_Start_IT+0x188>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <HAL_TIM_IC_Start_IT+0x10c>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d8d 	.word	0x08004d8d
 8004d18:	08004d8d 	.word	0x08004d8d
 8004d1c:	08004d8d 	.word	0x08004d8d
 8004d20:	08004d57 	.word	0x08004d57
 8004d24:	08004d8d 	.word	0x08004d8d
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004d8d 	.word	0x08004d8d
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d8d 	.word	0x08004d8d
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004d8d 	.word	0x08004d8d
 8004d40:	08004d7b 	.word	0x08004d7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0202 	orr.w	r2, r2, #2
 8004d52:	60da      	str	r2, [r3, #12]
      break;
 8004d54:	e01b      	b.n	8004d8e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0204 	orr.w	r2, r2, #4
 8004d64:	60da      	str	r2, [r3, #12]
      break;
 8004d66:	e012      	b.n	8004d8e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0208 	orr.w	r2, r2, #8
 8004d76:	60da      	str	r2, [r3, #12]
      break;
 8004d78:	e009      	b.n	8004d8e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0210 	orr.w	r2, r2, #16
 8004d88:	60da      	str	r2, [r3, #12]
      break;
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004d8c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2201      	movs	r2, #1
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fcf3 	bl	8005782 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_TIM_IC_Start_IT+0x200>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <HAL_TIM_IC_Start_IT+0x204>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <HAL_TIM_IC_Start_IT+0x208>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d111      	bne.n	8004de8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d010      	beq.n	8004df8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	e007      	b.n	8004df8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800

08004e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d122      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11b      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0202 	mvn.w	r2, #2
 8004e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fe2c 	bl	8001ab0 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa70 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa76 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d122      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0204 	mvn.w	r2, #4
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc fe02 	bl	8001ab0 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa46 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa4c 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0208 	mvn.w	r2, #8
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc fdd8 	bl	8001ab0 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa1c 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa22 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0210 	mvn.w	r2, #16
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fdae 	bl	8001ab0 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f9f2 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9f8 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0201 	mvn.w	r2, #1
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb fdea 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fc6d 	bl	800589a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9bc 	bl	8005364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0220 	mvn.w	r2, #32
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fc38 	bl	8005888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005036:	2302      	movs	r3, #2
 8005038:	e082      	b.n	8005140 <HAL_TIM_IC_ConfigChannel+0x120>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f000 f9f0 	bl	800543c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 020c 	bic.w	r2, r2, #12
 800506a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6999      	ldr	r1, [r3, #24]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	619a      	str	r2, [r3, #24]
 800507e:	e05a      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b04      	cmp	r3, #4
 8005084:	d11c      	bne.n	80050c0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f000 fa59 	bl	800554c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6999      	ldr	r1, [r3, #24]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	021a      	lsls	r2, r3, #8
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	619a      	str	r2, [r3, #24]
 80050be:	e03a      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d11b      	bne.n	80050fe <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f000 faa4 	bl	8005622 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 020c 	bic.w	r2, r2, #12
 80050e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	61da      	str	r2, [r3, #28]
 80050fc:	e01b      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f000 fac3 	bl	8005698 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005120:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	021a      	lsls	r2, r3, #8
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIM_ConfigClockSource+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e0a6      	b.n	80052ae <HAL_TIM_ConfigClockSource+0x166>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800517e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d067      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0x120>
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d80b      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x6c>
 800519c:	2b10      	cmp	r3, #16
 800519e:	d073      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x140>
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d802      	bhi.n	80051aa <HAL_TIM_ConfigClockSource+0x62>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d06f      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051a8:	e078      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d06c      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x140>
 80051ae:	2b30      	cmp	r3, #48	; 0x30
 80051b0:	d06a      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80051b2:	e073      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80051b4:	2b70      	cmp	r3, #112	; 0x70
 80051b6:	d00d      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0x8c>
 80051b8:	2b70      	cmp	r3, #112	; 0x70
 80051ba:	d804      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x7e>
 80051bc:	2b50      	cmp	r3, #80	; 0x50
 80051be:	d033      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0xe0>
 80051c0:	2b60      	cmp	r3, #96	; 0x60
 80051c2:	d041      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80051c4:	e06a      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d066      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x152>
 80051cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d0:	d017      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80051d2:	e063      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f000 faae 	bl	8005744 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	609a      	str	r2, [r3, #8]
      break;
 8005200:	e04c      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f000 fa97 	bl	8005744 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005224:	609a      	str	r2, [r3, #8]
      break;
 8005226:	e039      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	461a      	mov	r2, r3
 8005236:	f000 f95b 	bl	80054f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2150      	movs	r1, #80	; 0x50
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fa65 	bl	8005710 <TIM_ITRx_SetConfig>
      break;
 8005246:	e029      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	461a      	mov	r2, r3
 8005256:	f000 f9b5 	bl	80055c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2160      	movs	r1, #96	; 0x60
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fa55 	bl	8005710 <TIM_ITRx_SetConfig>
      break;
 8005266:	e019      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	461a      	mov	r2, r3
 8005276:	f000 f93b 	bl	80054f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2140      	movs	r1, #64	; 0x40
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fa45 	bl	8005710 <TIM_ITRx_SetConfig>
      break;
 8005286:	e009      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f000 fa3c 	bl	8005710 <TIM_ITRx_SetConfig>
        break;
 8005298:	e000      	b.n	800529c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800529a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d831      	bhi.n	8005330 <HAL_TIM_ReadCapturedValue+0x78>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	08005309 	.word	0x08005309
 80052d8:	08005331 	.word	0x08005331
 80052dc:	08005331 	.word	0x08005331
 80052e0:	08005331 	.word	0x08005331
 80052e4:	08005313 	.word	0x08005313
 80052e8:	08005331 	.word	0x08005331
 80052ec:	08005331 	.word	0x08005331
 80052f0:	08005331 	.word	0x08005331
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005331 	.word	0x08005331
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005331 	.word	0x08005331
 8005304:	08005327 	.word	0x08005327
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	60fb      	str	r3, [r7, #12]

      break;
 8005310:	e00f      	b.n	8005332 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	60fb      	str	r3, [r7, #12]

      break;
 800531a:	e00a      	b.n	8005332 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	60fb      	str	r3, [r7, #12]

      break;
 8005324:	e005      	b.n	8005332 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	60fb      	str	r3, [r7, #12]

      break;
 800532e:	e000      	b.n	8005332 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005330:	bf00      	nop
  }

  return tmpreg;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a29      	ldr	r2, [pc, #164]	; (8005430 <TIM_Base_SetConfig+0xb8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0x30>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0x30>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a26      	ldr	r2, [pc, #152]	; (8005434 <TIM_Base_SetConfig+0xbc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0x30>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a25      	ldr	r2, [pc, #148]	; (8005438 <TIM_Base_SetConfig+0xc0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d108      	bne.n	80053ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <TIM_Base_SetConfig+0xb8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0x62>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0x62>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <TIM_Base_SetConfig+0xbc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0x62>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a18      	ldr	r2, [pc, #96]	; (8005438 <TIM_Base_SetConfig+0xc0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a07      	ldr	r2, [pc, #28]	; (8005430 <TIM_Base_SetConfig+0xb8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	615a      	str	r2, [r3, #20]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800

0800543c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0201 	bic.w	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <TIM_TI1_SetConfig+0xa8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00b      	beq.n	8005482 <TIM_TI1_SetConfig+0x46>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d007      	beq.n	8005482 <TIM_TI1_SetConfig+0x46>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <TIM_TI1_SetConfig+0xac>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_TI1_SetConfig+0x46>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <TIM_TI1_SetConfig+0xb0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <TIM_TI1_SetConfig+0x4a>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <TIM_TI1_SetConfig+0x4c>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e003      	b.n	80054a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f023 030a 	bic.w	r3, r3, #10
 80054c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 030a 	and.w	r3, r3, #10
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0210 	bic.w	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800558a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	031b      	lsls	r3, r3, #12
 8005590:	b29b      	uxth	r3, r3
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800559e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f023 0210 	bic.w	r2, r3, #16
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	031b      	lsls	r3, r3, #12
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	621a      	str	r2, [r3, #32]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0303 	bic.w	r3, r3, #3
 800564e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	b2db      	uxtb	r3, r3
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005672:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	031b      	lsls	r3, r3, #12
 80056dc:	b29b      	uxth	r3, r3
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	031b      	lsls	r3, r3, #12
 80056f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	f043 0307 	orr.w	r3, r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	2201      	movs	r2, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1a      	ldr	r2, [r3, #32]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	43db      	mvns	r3, r3
 80057a4:	401a      	ands	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e046      	b.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d009      	beq.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a12      	ldr	r2, [pc, #72]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a10      	ldr	r2, [pc, #64]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d10c      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4313      	orrs	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800

08005888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e03f      	b.n	800593e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fd f854 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f905 	bl	8005b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b08a      	sub	sp, #40	; 0x28
 800594a:	af02      	add	r7, sp, #8
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b20      	cmp	r3, #32
 8005964:	d17c      	bne.n	8005a60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_UART_Transmit+0x2c>
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e075      	b.n	8005a62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_UART_Transmit+0x3e>
 8005980:	2302      	movs	r3, #2
 8005982:	e06e      	b.n	8005a62 <HAL_UART_Transmit+0x11c>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2221      	movs	r2, #33	; 0x21
 8005996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800599a:	f7fd f8f7 	bl	8002b8c <HAL_GetTick>
 800599e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b4:	d108      	bne.n	80059c8 <HAL_UART_Transmit+0x82>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e003      	b.n	80059d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059d8:	e02a      	b.n	8005a30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f840 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e036      	b.n	8005a62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	e007      	b.n	8005a22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1cf      	bne.n	80059da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2200      	movs	r2, #0
 8005a42:	2140      	movs	r1, #64	; 0x40
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f810 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e006      	b.n	8005a62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7a:	e02c      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d028      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8a:	f7fd f87f 	bl	8002b8c <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d21d      	bcs.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aa8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e00f      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d0c3      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b3a:	f023 030c 	bic.w	r3, r3, #12
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	430b      	orrs	r3, r1
 8005b46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2c      	ldr	r2, [pc, #176]	; (8005c14 <UART_SetConfig+0x114>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b68:	f7fd ff56 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	e002      	b.n	8005b76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fd ff3e 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8005b74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009a      	lsls	r2, r3, #2
 8005b80:	441a      	add	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <UART_SetConfig+0x118>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	0119      	lsls	r1, r3, #4
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009a      	lsls	r2, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <UART_SetConfig+0x118>)
 8005bae:	fba3 0302 	umull	r0, r3, r3, r2
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	2064      	movs	r0, #100	; 0x64
 8005bb6:	fb00 f303 	mul.w	r3, r0, r3
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	3332      	adds	r3, #50	; 0x32
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <UART_SetConfig+0x118>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bcc:	4419      	add	r1, r3
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009a      	lsls	r2, r3, #2
 8005bd8:	441a      	add	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <UART_SetConfig+0x118>)
 8005be6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2064      	movs	r0, #100	; 0x64
 8005bee:	fb00 f303 	mul.w	r3, r0, r3
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	3332      	adds	r3, #50	; 0x32
 8005bf8:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <UART_SetConfig+0x118>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	440a      	add	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40013800 	.word	0x40013800
 8005c18:	51eb851f 	.word	0x51eb851f

08005c1c <__errno>:
 8005c1c:	4b01      	ldr	r3, [pc, #4]	; (8005c24 <__errno+0x8>)
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2000003c 	.word	0x2000003c

08005c28 <__libc_init_array>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	4e0c      	ldr	r6, [pc, #48]	; (8005c60 <__libc_init_array+0x38>)
 8005c2e:	4c0d      	ldr	r4, [pc, #52]	; (8005c64 <__libc_init_array+0x3c>)
 8005c30:	1ba4      	subs	r4, r4, r6
 8005c32:	10a4      	asrs	r4, r4, #2
 8005c34:	42a5      	cmp	r5, r4
 8005c36:	d109      	bne.n	8005c4c <__libc_init_array+0x24>
 8005c38:	f000 fc34 	bl	80064a4 <_init>
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	4e0a      	ldr	r6, [pc, #40]	; (8005c68 <__libc_init_array+0x40>)
 8005c40:	4c0a      	ldr	r4, [pc, #40]	; (8005c6c <__libc_init_array+0x44>)
 8005c42:	1ba4      	subs	r4, r4, r6
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	42a5      	cmp	r5, r4
 8005c48:	d105      	bne.n	8005c56 <__libc_init_array+0x2e>
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c50:	4798      	blx	r3
 8005c52:	3501      	adds	r5, #1
 8005c54:	e7ee      	b.n	8005c34 <__libc_init_array+0xc>
 8005c56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c5a:	4798      	blx	r3
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	e7f2      	b.n	8005c46 <__libc_init_array+0x1e>
 8005c60:	080068b4 	.word	0x080068b4
 8005c64:	080068b4 	.word	0x080068b4
 8005c68:	080068b4 	.word	0x080068b4
 8005c6c:	080068b8 	.word	0x080068b8

08005c70 <memset>:
 8005c70:	4603      	mov	r3, r0
 8005c72:	4402      	add	r2, r0
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d100      	bne.n	8005c7a <memset+0xa>
 8005c78:	4770      	bx	lr
 8005c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7e:	e7f9      	b.n	8005c74 <memset+0x4>

08005c80 <siprintf>:
 8005c80:	b40e      	push	{r1, r2, r3}
 8005c82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c86:	b500      	push	{lr}
 8005c88:	b09c      	sub	sp, #112	; 0x70
 8005c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c8c:	9002      	str	r0, [sp, #8]
 8005c8e:	9006      	str	r0, [sp, #24]
 8005c90:	9107      	str	r1, [sp, #28]
 8005c92:	9104      	str	r1, [sp, #16]
 8005c94:	4808      	ldr	r0, [pc, #32]	; (8005cb8 <siprintf+0x38>)
 8005c96:	4909      	ldr	r1, [pc, #36]	; (8005cbc <siprintf+0x3c>)
 8005c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9c:	9105      	str	r1, [sp, #20]
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	a902      	add	r1, sp, #8
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	f000 f866 	bl	8005d74 <_svfiprintf_r>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	b01c      	add	sp, #112	; 0x70
 8005cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cb4:	b003      	add	sp, #12
 8005cb6:	4770      	bx	lr
 8005cb8:	2000003c 	.word	0x2000003c
 8005cbc:	ffff0208 	.word	0xffff0208

08005cc0 <__ssputs_r>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	688e      	ldr	r6, [r1, #8]
 8005cc6:	4682      	mov	sl, r0
 8005cc8:	429e      	cmp	r6, r3
 8005cca:	460c      	mov	r4, r1
 8005ccc:	4690      	mov	r8, r2
 8005cce:	4699      	mov	r9, r3
 8005cd0:	d837      	bhi.n	8005d42 <__ssputs_r+0x82>
 8005cd2:	898a      	ldrh	r2, [r1, #12]
 8005cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cd8:	d031      	beq.n	8005d3e <__ssputs_r+0x7e>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	6909      	ldr	r1, [r1, #16]
 8005ce0:	1a6f      	subs	r7, r5, r1
 8005ce2:	6965      	ldr	r5, [r4, #20]
 8005ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ce8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cec:	f109 0301 	add.w	r3, r9, #1
 8005cf0:	443b      	add	r3, r7
 8005cf2:	429d      	cmp	r5, r3
 8005cf4:	bf38      	it	cc
 8005cf6:	461d      	movcc	r5, r3
 8005cf8:	0553      	lsls	r3, r2, #21
 8005cfa:	d530      	bpl.n	8005d5e <__ssputs_r+0x9e>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f000 fb37 	bl	8006370 <_malloc_r>
 8005d02:	4606      	mov	r6, r0
 8005d04:	b950      	cbnz	r0, 8005d1c <__ssputs_r+0x5c>
 8005d06:	230c      	movs	r3, #12
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	f8ca 3000 	str.w	r3, [sl]
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	6921      	ldr	r1, [r4, #16]
 8005d20:	f000 fab6 	bl	8006290 <memcpy>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	6126      	str	r6, [r4, #16]
 8005d32:	443e      	add	r6, r7
 8005d34:	6026      	str	r6, [r4, #0]
 8005d36:	464e      	mov	r6, r9
 8005d38:	6165      	str	r5, [r4, #20]
 8005d3a:	1bed      	subs	r5, r5, r7
 8005d3c:	60a5      	str	r5, [r4, #8]
 8005d3e:	454e      	cmp	r6, r9
 8005d40:	d900      	bls.n	8005d44 <__ssputs_r+0x84>
 8005d42:	464e      	mov	r6, r9
 8005d44:	4632      	mov	r2, r6
 8005d46:	4641      	mov	r1, r8
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	f000 faac 	bl	80062a6 <memmove>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	2000      	movs	r0, #0
 8005d52:	1b9b      	subs	r3, r3, r6
 8005d54:	60a3      	str	r3, [r4, #8]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	441e      	add	r6, r3
 8005d5a:	6026      	str	r6, [r4, #0]
 8005d5c:	e7dc      	b.n	8005d18 <__ssputs_r+0x58>
 8005d5e:	462a      	mov	r2, r5
 8005d60:	f000 fb60 	bl	8006424 <_realloc_r>
 8005d64:	4606      	mov	r6, r0
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1e2      	bne.n	8005d30 <__ssputs_r+0x70>
 8005d6a:	6921      	ldr	r1, [r4, #16]
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	f000 fab3 	bl	80062d8 <_free_r>
 8005d72:	e7c8      	b.n	8005d06 <__ssputs_r+0x46>

08005d74 <_svfiprintf_r>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	461d      	mov	r5, r3
 8005d7a:	898b      	ldrh	r3, [r1, #12]
 8005d7c:	b09d      	sub	sp, #116	; 0x74
 8005d7e:	061f      	lsls	r7, r3, #24
 8005d80:	4680      	mov	r8, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4616      	mov	r6, r2
 8005d86:	d50f      	bpl.n	8005da8 <_svfiprintf_r+0x34>
 8005d88:	690b      	ldr	r3, [r1, #16]
 8005d8a:	b96b      	cbnz	r3, 8005da8 <_svfiprintf_r+0x34>
 8005d8c:	2140      	movs	r1, #64	; 0x40
 8005d8e:	f000 faef 	bl	8006370 <_malloc_r>
 8005d92:	6020      	str	r0, [r4, #0]
 8005d94:	6120      	str	r0, [r4, #16]
 8005d96:	b928      	cbnz	r0, 8005da4 <_svfiprintf_r+0x30>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	f8c8 3000 	str.w	r3, [r8]
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	e0c8      	b.n	8005f36 <_svfiprintf_r+0x1c2>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	6163      	str	r3, [r4, #20]
 8005da8:	2300      	movs	r3, #0
 8005daa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dac:	2320      	movs	r3, #32
 8005dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db2:	2330      	movs	r3, #48	; 0x30
 8005db4:	f04f 0b01 	mov.w	fp, #1
 8005db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dbc:	9503      	str	r5, [sp, #12]
 8005dbe:	4637      	mov	r7, r6
 8005dc0:	463d      	mov	r5, r7
 8005dc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dc6:	b10b      	cbz	r3, 8005dcc <_svfiprintf_r+0x58>
 8005dc8:	2b25      	cmp	r3, #37	; 0x25
 8005dca:	d13e      	bne.n	8005e4a <_svfiprintf_r+0xd6>
 8005dcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005dd0:	d00b      	beq.n	8005dea <_svfiprintf_r+0x76>
 8005dd2:	4653      	mov	r3, sl
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4640      	mov	r0, r8
 8005dda:	f7ff ff71 	bl	8005cc0 <__ssputs_r>
 8005dde:	3001      	adds	r0, #1
 8005de0:	f000 80a4 	beq.w	8005f2c <_svfiprintf_r+0x1b8>
 8005de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de6:	4453      	add	r3, sl
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	783b      	ldrb	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 809d 	beq.w	8005f2c <_svfiprintf_r+0x1b8>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	9307      	str	r3, [sp, #28]
 8005e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e04:	931a      	str	r3, [sp, #104]	; 0x68
 8005e06:	462f      	mov	r7, r5
 8005e08:	2205      	movs	r2, #5
 8005e0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e0e:	4850      	ldr	r0, [pc, #320]	; (8005f50 <_svfiprintf_r+0x1dc>)
 8005e10:	f000 fa30 	bl	8006274 <memchr>
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	b9d0      	cbnz	r0, 8005e4e <_svfiprintf_r+0xda>
 8005e18:	06d9      	lsls	r1, r3, #27
 8005e1a:	bf44      	itt	mi
 8005e1c:	2220      	movmi	r2, #32
 8005e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e22:	071a      	lsls	r2, r3, #28
 8005e24:	bf44      	itt	mi
 8005e26:	222b      	movmi	r2, #43	; 0x2b
 8005e28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e2c:	782a      	ldrb	r2, [r5, #0]
 8005e2e:	2a2a      	cmp	r2, #42	; 0x2a
 8005e30:	d015      	beq.n	8005e5e <_svfiprintf_r+0xea>
 8005e32:	462f      	mov	r7, r5
 8005e34:	2000      	movs	r0, #0
 8005e36:	250a      	movs	r5, #10
 8005e38:	9a07      	ldr	r2, [sp, #28]
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e40:	3b30      	subs	r3, #48	; 0x30
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d94d      	bls.n	8005ee2 <_svfiprintf_r+0x16e>
 8005e46:	b1b8      	cbz	r0, 8005e78 <_svfiprintf_r+0x104>
 8005e48:	e00f      	b.n	8005e6a <_svfiprintf_r+0xf6>
 8005e4a:	462f      	mov	r7, r5
 8005e4c:	e7b8      	b.n	8005dc0 <_svfiprintf_r+0x4c>
 8005e4e:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <_svfiprintf_r+0x1dc>)
 8005e50:	463d      	mov	r5, r7
 8005e52:	1a80      	subs	r0, r0, r2
 8005e54:	fa0b f000 	lsl.w	r0, fp, r0
 8005e58:	4318      	orrs	r0, r3
 8005e5a:	9004      	str	r0, [sp, #16]
 8005e5c:	e7d3      	b.n	8005e06 <_svfiprintf_r+0x92>
 8005e5e:	9a03      	ldr	r2, [sp, #12]
 8005e60:	1d11      	adds	r1, r2, #4
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	9103      	str	r1, [sp, #12]
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	db01      	blt.n	8005e6e <_svfiprintf_r+0xfa>
 8005e6a:	9207      	str	r2, [sp, #28]
 8005e6c:	e004      	b.n	8005e78 <_svfiprintf_r+0x104>
 8005e6e:	4252      	negs	r2, r2
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	9207      	str	r2, [sp, #28]
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	783b      	ldrb	r3, [r7, #0]
 8005e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7c:	d10c      	bne.n	8005e98 <_svfiprintf_r+0x124>
 8005e7e:	787b      	ldrb	r3, [r7, #1]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d133      	bne.n	8005eec <_svfiprintf_r+0x178>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	3702      	adds	r7, #2
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	9203      	str	r2, [sp, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfb8      	it	lt
 8005e92:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	4d2e      	ldr	r5, [pc, #184]	; (8005f54 <_svfiprintf_r+0x1e0>)
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	7839      	ldrb	r1, [r7, #0]
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 f9e8 	bl	8006274 <memchr>
 8005ea4:	b138      	cbz	r0, 8005eb6 <_svfiprintf_r+0x142>
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	1b40      	subs	r0, r0, r5
 8005eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	3701      	adds	r7, #1
 8005eb2:	4303      	orrs	r3, r0
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	7839      	ldrb	r1, [r7, #0]
 8005eb8:	2206      	movs	r2, #6
 8005eba:	4827      	ldr	r0, [pc, #156]	; (8005f58 <_svfiprintf_r+0x1e4>)
 8005ebc:	1c7e      	adds	r6, r7, #1
 8005ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ec2:	f000 f9d7 	bl	8006274 <memchr>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d038      	beq.n	8005f3c <_svfiprintf_r+0x1c8>
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <_svfiprintf_r+0x1e8>)
 8005ecc:	bb13      	cbnz	r3, 8005f14 <_svfiprintf_r+0x1a0>
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	444b      	add	r3, r9
 8005ede:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee0:	e76d      	b.n	8005dbe <_svfiprintf_r+0x4a>
 8005ee2:	fb05 3202 	mla	r2, r5, r2, r3
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	460f      	mov	r7, r1
 8005eea:	e7a6      	b.n	8005e3a <_svfiprintf_r+0xc6>
 8005eec:	2300      	movs	r3, #0
 8005eee:	250a      	movs	r5, #10
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	3701      	adds	r7, #1
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005efc:	3a30      	subs	r2, #48	; 0x30
 8005efe:	2a09      	cmp	r2, #9
 8005f00:	d903      	bls.n	8005f0a <_svfiprintf_r+0x196>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0c8      	beq.n	8005e98 <_svfiprintf_r+0x124>
 8005f06:	9105      	str	r1, [sp, #20]
 8005f08:	e7c6      	b.n	8005e98 <_svfiprintf_r+0x124>
 8005f0a:	fb05 2101 	mla	r1, r5, r1, r2
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4607      	mov	r7, r0
 8005f12:	e7f0      	b.n	8005ef6 <_svfiprintf_r+0x182>
 8005f14:	ab03      	add	r3, sp, #12
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4622      	mov	r2, r4
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <_svfiprintf_r+0x1ec>)
 8005f1c:	a904      	add	r1, sp, #16
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f3af 8000 	nop.w
 8005f24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f28:	4681      	mov	r9, r0
 8005f2a:	d1d6      	bne.n	8005eda <_svfiprintf_r+0x166>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	065b      	lsls	r3, r3, #25
 8005f30:	f53f af35 	bmi.w	8005d9e <_svfiprintf_r+0x2a>
 8005f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f36:	b01d      	add	sp, #116	; 0x74
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4622      	mov	r2, r4
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <_svfiprintf_r+0x1ec>)
 8005f44:	a904      	add	r1, sp, #16
 8005f46:	4640      	mov	r0, r8
 8005f48:	f000 f882 	bl	8006050 <_printf_i>
 8005f4c:	e7ea      	b.n	8005f24 <_svfiprintf_r+0x1b0>
 8005f4e:	bf00      	nop
 8005f50:	08006880 	.word	0x08006880
 8005f54:	08006886 	.word	0x08006886
 8005f58:	0800688a 	.word	0x0800688a
 8005f5c:	00000000 	.word	0x00000000
 8005f60:	08005cc1 	.word	0x08005cc1

08005f64 <_printf_common>:
 8005f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f68:	4691      	mov	r9, r2
 8005f6a:	461f      	mov	r7, r3
 8005f6c:	688a      	ldr	r2, [r1, #8]
 8005f6e:	690b      	ldr	r3, [r1, #16]
 8005f70:	4606      	mov	r6, r0
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bfb8      	it	lt
 8005f76:	4613      	movlt	r3, r2
 8005f78:	f8c9 3000 	str.w	r3, [r9]
 8005f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f80:	460c      	mov	r4, r1
 8005f82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f86:	b112      	cbz	r2, 8005f8e <_printf_common+0x2a>
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f8c9 3000 	str.w	r3, [r9]
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	0699      	lsls	r1, r3, #26
 8005f92:	bf42      	ittt	mi
 8005f94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f98:	3302      	addmi	r3, #2
 8005f9a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	f015 0506 	ands.w	r5, r5, #6
 8005fa4:	d107      	bne.n	8005fb6 <_printf_common+0x52>
 8005fa6:	f104 0a19 	add.w	sl, r4, #25
 8005faa:	68e3      	ldr	r3, [r4, #12]
 8005fac:	f8d9 2000 	ldr.w	r2, [r9]
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	42ab      	cmp	r3, r5
 8005fb4:	dc29      	bgt.n	800600a <_printf_common+0xa6>
 8005fb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	3300      	adds	r3, #0
 8005fbe:	bf18      	it	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	0692      	lsls	r2, r2, #26
 8005fc4:	d42e      	bmi.n	8006024 <_printf_common+0xc0>
 8005fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fca:	4639      	mov	r1, r7
 8005fcc:	4630      	mov	r0, r6
 8005fce:	47c0      	blx	r8
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d021      	beq.n	8006018 <_printf_common+0xb4>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	68e5      	ldr	r5, [r4, #12]
 8005fd8:	f003 0306 	and.w	r3, r3, #6
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	bf18      	it	ne
 8005fe0:	2500      	movne	r5, #0
 8005fe2:	f8d9 2000 	ldr.w	r2, [r9]
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	bf08      	it	eq
 8005fec:	1aad      	subeq	r5, r5, r2
 8005fee:	68a3      	ldr	r3, [r4, #8]
 8005ff0:	6922      	ldr	r2, [r4, #16]
 8005ff2:	bf08      	it	eq
 8005ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bfc4      	itt	gt
 8005ffc:	1a9b      	subgt	r3, r3, r2
 8005ffe:	18ed      	addgt	r5, r5, r3
 8006000:	341a      	adds	r4, #26
 8006002:	454d      	cmp	r5, r9
 8006004:	d11a      	bne.n	800603c <_printf_common+0xd8>
 8006006:	2000      	movs	r0, #0
 8006008:	e008      	b.n	800601c <_printf_common+0xb8>
 800600a:	2301      	movs	r3, #1
 800600c:	4652      	mov	r2, sl
 800600e:	4639      	mov	r1, r7
 8006010:	4630      	mov	r0, r6
 8006012:	47c0      	blx	r8
 8006014:	3001      	adds	r0, #1
 8006016:	d103      	bne.n	8006020 <_printf_common+0xbc>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	3501      	adds	r5, #1
 8006022:	e7c2      	b.n	8005faa <_printf_common+0x46>
 8006024:	2030      	movs	r0, #48	; 0x30
 8006026:	18e1      	adds	r1, r4, r3
 8006028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006032:	4422      	add	r2, r4
 8006034:	3302      	adds	r3, #2
 8006036:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800603a:	e7c4      	b.n	8005fc6 <_printf_common+0x62>
 800603c:	2301      	movs	r3, #1
 800603e:	4622      	mov	r2, r4
 8006040:	4639      	mov	r1, r7
 8006042:	4630      	mov	r0, r6
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d0e6      	beq.n	8006018 <_printf_common+0xb4>
 800604a:	f109 0901 	add.w	r9, r9, #1
 800604e:	e7d8      	b.n	8006002 <_printf_common+0x9e>

08006050 <_printf_i>:
 8006050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006054:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006058:	460c      	mov	r4, r1
 800605a:	7e09      	ldrb	r1, [r1, #24]
 800605c:	b085      	sub	sp, #20
 800605e:	296e      	cmp	r1, #110	; 0x6e
 8006060:	4617      	mov	r7, r2
 8006062:	4606      	mov	r6, r0
 8006064:	4698      	mov	r8, r3
 8006066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006068:	f000 80b3 	beq.w	80061d2 <_printf_i+0x182>
 800606c:	d822      	bhi.n	80060b4 <_printf_i+0x64>
 800606e:	2963      	cmp	r1, #99	; 0x63
 8006070:	d036      	beq.n	80060e0 <_printf_i+0x90>
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x3a>
 8006074:	2900      	cmp	r1, #0
 8006076:	f000 80b9 	beq.w	80061ec <_printf_i+0x19c>
 800607a:	2958      	cmp	r1, #88	; 0x58
 800607c:	f000 8083 	beq.w	8006186 <_printf_i+0x136>
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006088:	e032      	b.n	80060f0 <_printf_i+0xa0>
 800608a:	2964      	cmp	r1, #100	; 0x64
 800608c:	d001      	beq.n	8006092 <_printf_i+0x42>
 800608e:	2969      	cmp	r1, #105	; 0x69
 8006090:	d1f6      	bne.n	8006080 <_printf_i+0x30>
 8006092:	6820      	ldr	r0, [r4, #0]
 8006094:	6813      	ldr	r3, [r2, #0]
 8006096:	0605      	lsls	r5, r0, #24
 8006098:	f103 0104 	add.w	r1, r3, #4
 800609c:	d52a      	bpl.n	80060f4 <_printf_i+0xa4>
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da03      	bge.n	80060ae <_printf_i+0x5e>
 80060a6:	222d      	movs	r2, #45	; 0x2d
 80060a8:	425b      	negs	r3, r3
 80060aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060ae:	486f      	ldr	r0, [pc, #444]	; (800626c <_printf_i+0x21c>)
 80060b0:	220a      	movs	r2, #10
 80060b2:	e039      	b.n	8006128 <_printf_i+0xd8>
 80060b4:	2973      	cmp	r1, #115	; 0x73
 80060b6:	f000 809d 	beq.w	80061f4 <_printf_i+0x1a4>
 80060ba:	d808      	bhi.n	80060ce <_printf_i+0x7e>
 80060bc:	296f      	cmp	r1, #111	; 0x6f
 80060be:	d020      	beq.n	8006102 <_printf_i+0xb2>
 80060c0:	2970      	cmp	r1, #112	; 0x70
 80060c2:	d1dd      	bne.n	8006080 <_printf_i+0x30>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	f043 0320 	orr.w	r3, r3, #32
 80060ca:	6023      	str	r3, [r4, #0]
 80060cc:	e003      	b.n	80060d6 <_printf_i+0x86>
 80060ce:	2975      	cmp	r1, #117	; 0x75
 80060d0:	d017      	beq.n	8006102 <_printf_i+0xb2>
 80060d2:	2978      	cmp	r1, #120	; 0x78
 80060d4:	d1d4      	bne.n	8006080 <_printf_i+0x30>
 80060d6:	2378      	movs	r3, #120	; 0x78
 80060d8:	4865      	ldr	r0, [pc, #404]	; (8006270 <_printf_i+0x220>)
 80060da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060de:	e055      	b.n	800618c <_printf_i+0x13c>
 80060e0:	6813      	ldr	r3, [r2, #0]
 80060e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060e6:	1d19      	adds	r1, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6011      	str	r1, [r2, #0]
 80060ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f0:	2301      	movs	r3, #1
 80060f2:	e08c      	b.n	800620e <_printf_i+0x1be>
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060fa:	6011      	str	r1, [r2, #0]
 80060fc:	bf18      	it	ne
 80060fe:	b21b      	sxthne	r3, r3
 8006100:	e7cf      	b.n	80060a2 <_printf_i+0x52>
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	6825      	ldr	r5, [r4, #0]
 8006106:	1d18      	adds	r0, r3, #4
 8006108:	6010      	str	r0, [r2, #0]
 800610a:	0628      	lsls	r0, r5, #24
 800610c:	d501      	bpl.n	8006112 <_printf_i+0xc2>
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	e002      	b.n	8006118 <_printf_i+0xc8>
 8006112:	0668      	lsls	r0, r5, #25
 8006114:	d5fb      	bpl.n	800610e <_printf_i+0xbe>
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	296f      	cmp	r1, #111	; 0x6f
 800611a:	bf14      	ite	ne
 800611c:	220a      	movne	r2, #10
 800611e:	2208      	moveq	r2, #8
 8006120:	4852      	ldr	r0, [pc, #328]	; (800626c <_printf_i+0x21c>)
 8006122:	2100      	movs	r1, #0
 8006124:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006128:	6865      	ldr	r5, [r4, #4]
 800612a:	2d00      	cmp	r5, #0
 800612c:	60a5      	str	r5, [r4, #8]
 800612e:	f2c0 8095 	blt.w	800625c <_printf_i+0x20c>
 8006132:	6821      	ldr	r1, [r4, #0]
 8006134:	f021 0104 	bic.w	r1, r1, #4
 8006138:	6021      	str	r1, [r4, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d13d      	bne.n	80061ba <_printf_i+0x16a>
 800613e:	2d00      	cmp	r5, #0
 8006140:	f040 808e 	bne.w	8006260 <_printf_i+0x210>
 8006144:	4665      	mov	r5, ip
 8006146:	2a08      	cmp	r2, #8
 8006148:	d10b      	bne.n	8006162 <_printf_i+0x112>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	07db      	lsls	r3, r3, #31
 800614e:	d508      	bpl.n	8006162 <_printf_i+0x112>
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	bfde      	ittt	le
 8006158:	2330      	movle	r3, #48	; 0x30
 800615a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800615e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006162:	ebac 0305 	sub.w	r3, ip, r5
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	f8cd 8000 	str.w	r8, [sp]
 800616c:	463b      	mov	r3, r7
 800616e:	aa03      	add	r2, sp, #12
 8006170:	4621      	mov	r1, r4
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff fef6 	bl	8005f64 <_printf_common>
 8006178:	3001      	adds	r0, #1
 800617a:	d14d      	bne.n	8006218 <_printf_i+0x1c8>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	b005      	add	sp, #20
 8006182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006186:	4839      	ldr	r0, [pc, #228]	; (800626c <_printf_i+0x21c>)
 8006188:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800618c:	6813      	ldr	r3, [r2, #0]
 800618e:	6821      	ldr	r1, [r4, #0]
 8006190:	1d1d      	adds	r5, r3, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6015      	str	r5, [r2, #0]
 8006196:	060a      	lsls	r2, r1, #24
 8006198:	d50b      	bpl.n	80061b2 <_printf_i+0x162>
 800619a:	07ca      	lsls	r2, r1, #31
 800619c:	bf44      	itt	mi
 800619e:	f041 0120 	orrmi.w	r1, r1, #32
 80061a2:	6021      	strmi	r1, [r4, #0]
 80061a4:	b91b      	cbnz	r3, 80061ae <_printf_i+0x15e>
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	f022 0220 	bic.w	r2, r2, #32
 80061ac:	6022      	str	r2, [r4, #0]
 80061ae:	2210      	movs	r2, #16
 80061b0:	e7b7      	b.n	8006122 <_printf_i+0xd2>
 80061b2:	064d      	lsls	r5, r1, #25
 80061b4:	bf48      	it	mi
 80061b6:	b29b      	uxthmi	r3, r3
 80061b8:	e7ef      	b.n	800619a <_printf_i+0x14a>
 80061ba:	4665      	mov	r5, ip
 80061bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80061c0:	fb02 3311 	mls	r3, r2, r1, r3
 80061c4:	5cc3      	ldrb	r3, [r0, r3]
 80061c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061ca:	460b      	mov	r3, r1
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d1f5      	bne.n	80061bc <_printf_i+0x16c>
 80061d0:	e7b9      	b.n	8006146 <_printf_i+0xf6>
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	6825      	ldr	r5, [r4, #0]
 80061d6:	1d18      	adds	r0, r3, #4
 80061d8:	6961      	ldr	r1, [r4, #20]
 80061da:	6010      	str	r0, [r2, #0]
 80061dc:	0628      	lsls	r0, r5, #24
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	d501      	bpl.n	80061e6 <_printf_i+0x196>
 80061e2:	6019      	str	r1, [r3, #0]
 80061e4:	e002      	b.n	80061ec <_printf_i+0x19c>
 80061e6:	066a      	lsls	r2, r5, #25
 80061e8:	d5fb      	bpl.n	80061e2 <_printf_i+0x192>
 80061ea:	8019      	strh	r1, [r3, #0]
 80061ec:	2300      	movs	r3, #0
 80061ee:	4665      	mov	r5, ip
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	e7b9      	b.n	8006168 <_printf_i+0x118>
 80061f4:	6813      	ldr	r3, [r2, #0]
 80061f6:	1d19      	adds	r1, r3, #4
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	681d      	ldr	r5, [r3, #0]
 80061fc:	6862      	ldr	r2, [r4, #4]
 80061fe:	2100      	movs	r1, #0
 8006200:	4628      	mov	r0, r5
 8006202:	f000 f837 	bl	8006274 <memchr>
 8006206:	b108      	cbz	r0, 800620c <_printf_i+0x1bc>
 8006208:	1b40      	subs	r0, r0, r5
 800620a:	6060      	str	r0, [r4, #4]
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	2300      	movs	r3, #0
 8006212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006216:	e7a7      	b.n	8006168 <_printf_i+0x118>
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	462a      	mov	r2, r5
 800621c:	4639      	mov	r1, r7
 800621e:	4630      	mov	r0, r6
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d0aa      	beq.n	800617c <_printf_i+0x12c>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	079b      	lsls	r3, r3, #30
 800622a:	d413      	bmi.n	8006254 <_printf_i+0x204>
 800622c:	68e0      	ldr	r0, [r4, #12]
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	4298      	cmp	r0, r3
 8006232:	bfb8      	it	lt
 8006234:	4618      	movlt	r0, r3
 8006236:	e7a3      	b.n	8006180 <_printf_i+0x130>
 8006238:	2301      	movs	r3, #1
 800623a:	464a      	mov	r2, r9
 800623c:	4639      	mov	r1, r7
 800623e:	4630      	mov	r0, r6
 8006240:	47c0      	blx	r8
 8006242:	3001      	adds	r0, #1
 8006244:	d09a      	beq.n	800617c <_printf_i+0x12c>
 8006246:	3501      	adds	r5, #1
 8006248:	68e3      	ldr	r3, [r4, #12]
 800624a:	9a03      	ldr	r2, [sp, #12]
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	42ab      	cmp	r3, r5
 8006250:	dcf2      	bgt.n	8006238 <_printf_i+0x1e8>
 8006252:	e7eb      	b.n	800622c <_printf_i+0x1dc>
 8006254:	2500      	movs	r5, #0
 8006256:	f104 0919 	add.w	r9, r4, #25
 800625a:	e7f5      	b.n	8006248 <_printf_i+0x1f8>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1ac      	bne.n	80061ba <_printf_i+0x16a>
 8006260:	7803      	ldrb	r3, [r0, #0]
 8006262:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006266:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800626a:	e76c      	b.n	8006146 <_printf_i+0xf6>
 800626c:	08006891 	.word	0x08006891
 8006270:	080068a2 	.word	0x080068a2

08006274 <memchr>:
 8006274:	b510      	push	{r4, lr}
 8006276:	b2c9      	uxtb	r1, r1
 8006278:	4402      	add	r2, r0
 800627a:	4290      	cmp	r0, r2
 800627c:	4603      	mov	r3, r0
 800627e:	d101      	bne.n	8006284 <memchr+0x10>
 8006280:	2300      	movs	r3, #0
 8006282:	e003      	b.n	800628c <memchr+0x18>
 8006284:	781c      	ldrb	r4, [r3, #0]
 8006286:	3001      	adds	r0, #1
 8006288:	428c      	cmp	r4, r1
 800628a:	d1f6      	bne.n	800627a <memchr+0x6>
 800628c:	4618      	mov	r0, r3
 800628e:	bd10      	pop	{r4, pc}

08006290 <memcpy>:
 8006290:	b510      	push	{r4, lr}
 8006292:	1e43      	subs	r3, r0, #1
 8006294:	440a      	add	r2, r1
 8006296:	4291      	cmp	r1, r2
 8006298:	d100      	bne.n	800629c <memcpy+0xc>
 800629a:	bd10      	pop	{r4, pc}
 800629c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a4:	e7f7      	b.n	8006296 <memcpy+0x6>

080062a6 <memmove>:
 80062a6:	4288      	cmp	r0, r1
 80062a8:	b510      	push	{r4, lr}
 80062aa:	eb01 0302 	add.w	r3, r1, r2
 80062ae:	d807      	bhi.n	80062c0 <memmove+0x1a>
 80062b0:	1e42      	subs	r2, r0, #1
 80062b2:	4299      	cmp	r1, r3
 80062b4:	d00a      	beq.n	80062cc <memmove+0x26>
 80062b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062be:	e7f8      	b.n	80062b2 <memmove+0xc>
 80062c0:	4283      	cmp	r3, r0
 80062c2:	d9f5      	bls.n	80062b0 <memmove+0xa>
 80062c4:	1881      	adds	r1, r0, r2
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	42d3      	cmn	r3, r2
 80062ca:	d100      	bne.n	80062ce <memmove+0x28>
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062d6:	e7f7      	b.n	80062c8 <memmove+0x22>

080062d8 <_free_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4605      	mov	r5, r0
 80062dc:	2900      	cmp	r1, #0
 80062de:	d043      	beq.n	8006368 <_free_r+0x90>
 80062e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e4:	1f0c      	subs	r4, r1, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfb8      	it	lt
 80062ea:	18e4      	addlt	r4, r4, r3
 80062ec:	f000 f8d0 	bl	8006490 <__malloc_lock>
 80062f0:	4a1e      	ldr	r2, [pc, #120]	; (800636c <_free_r+0x94>)
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	4610      	mov	r0, r2
 80062f6:	b933      	cbnz	r3, 8006306 <_free_r+0x2e>
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	6014      	str	r4, [r2, #0]
 80062fc:	4628      	mov	r0, r5
 80062fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006302:	f000 b8c6 	b.w	8006492 <__malloc_unlock>
 8006306:	42a3      	cmp	r3, r4
 8006308:	d90b      	bls.n	8006322 <_free_r+0x4a>
 800630a:	6821      	ldr	r1, [r4, #0]
 800630c:	1862      	adds	r2, r4, r1
 800630e:	4293      	cmp	r3, r2
 8006310:	bf01      	itttt	eq
 8006312:	681a      	ldreq	r2, [r3, #0]
 8006314:	685b      	ldreq	r3, [r3, #4]
 8006316:	1852      	addeq	r2, r2, r1
 8006318:	6022      	streq	r2, [r4, #0]
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	6004      	str	r4, [r0, #0]
 800631e:	e7ed      	b.n	80062fc <_free_r+0x24>
 8006320:	4613      	mov	r3, r2
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	b10a      	cbz	r2, 800632a <_free_r+0x52>
 8006326:	42a2      	cmp	r2, r4
 8006328:	d9fa      	bls.n	8006320 <_free_r+0x48>
 800632a:	6819      	ldr	r1, [r3, #0]
 800632c:	1858      	adds	r0, r3, r1
 800632e:	42a0      	cmp	r0, r4
 8006330:	d10b      	bne.n	800634a <_free_r+0x72>
 8006332:	6820      	ldr	r0, [r4, #0]
 8006334:	4401      	add	r1, r0
 8006336:	1858      	adds	r0, r3, r1
 8006338:	4282      	cmp	r2, r0
 800633a:	6019      	str	r1, [r3, #0]
 800633c:	d1de      	bne.n	80062fc <_free_r+0x24>
 800633e:	6810      	ldr	r0, [r2, #0]
 8006340:	6852      	ldr	r2, [r2, #4]
 8006342:	4401      	add	r1, r0
 8006344:	6019      	str	r1, [r3, #0]
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	e7d8      	b.n	80062fc <_free_r+0x24>
 800634a:	d902      	bls.n	8006352 <_free_r+0x7a>
 800634c:	230c      	movs	r3, #12
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	e7d4      	b.n	80062fc <_free_r+0x24>
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	1821      	adds	r1, r4, r0
 8006356:	428a      	cmp	r2, r1
 8006358:	bf01      	itttt	eq
 800635a:	6811      	ldreq	r1, [r2, #0]
 800635c:	6852      	ldreq	r2, [r2, #4]
 800635e:	1809      	addeq	r1, r1, r0
 8006360:	6021      	streq	r1, [r4, #0]
 8006362:	6062      	str	r2, [r4, #4]
 8006364:	605c      	str	r4, [r3, #4]
 8006366:	e7c9      	b.n	80062fc <_free_r+0x24>
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	bf00      	nop
 800636c:	20000108 	.word	0x20000108

08006370 <_malloc_r>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	1ccd      	adds	r5, r1, #3
 8006374:	f025 0503 	bic.w	r5, r5, #3
 8006378:	3508      	adds	r5, #8
 800637a:	2d0c      	cmp	r5, #12
 800637c:	bf38      	it	cc
 800637e:	250c      	movcc	r5, #12
 8006380:	2d00      	cmp	r5, #0
 8006382:	4606      	mov	r6, r0
 8006384:	db01      	blt.n	800638a <_malloc_r+0x1a>
 8006386:	42a9      	cmp	r1, r5
 8006388:	d903      	bls.n	8006392 <_malloc_r+0x22>
 800638a:	230c      	movs	r3, #12
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	2000      	movs	r0, #0
 8006390:	bd70      	pop	{r4, r5, r6, pc}
 8006392:	f000 f87d 	bl	8006490 <__malloc_lock>
 8006396:	4a21      	ldr	r2, [pc, #132]	; (800641c <_malloc_r+0xac>)
 8006398:	6814      	ldr	r4, [r2, #0]
 800639a:	4621      	mov	r1, r4
 800639c:	b991      	cbnz	r1, 80063c4 <_malloc_r+0x54>
 800639e:	4c20      	ldr	r4, [pc, #128]	; (8006420 <_malloc_r+0xb0>)
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	b91b      	cbnz	r3, 80063ac <_malloc_r+0x3c>
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f863 	bl	8006470 <_sbrk_r>
 80063aa:	6020      	str	r0, [r4, #0]
 80063ac:	4629      	mov	r1, r5
 80063ae:	4630      	mov	r0, r6
 80063b0:	f000 f85e 	bl	8006470 <_sbrk_r>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d124      	bne.n	8006402 <_malloc_r+0x92>
 80063b8:	230c      	movs	r3, #12
 80063ba:	4630      	mov	r0, r6
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	f000 f868 	bl	8006492 <__malloc_unlock>
 80063c2:	e7e4      	b.n	800638e <_malloc_r+0x1e>
 80063c4:	680b      	ldr	r3, [r1, #0]
 80063c6:	1b5b      	subs	r3, r3, r5
 80063c8:	d418      	bmi.n	80063fc <_malloc_r+0x8c>
 80063ca:	2b0b      	cmp	r3, #11
 80063cc:	d90f      	bls.n	80063ee <_malloc_r+0x7e>
 80063ce:	600b      	str	r3, [r1, #0]
 80063d0:	18cc      	adds	r4, r1, r3
 80063d2:	50cd      	str	r5, [r1, r3]
 80063d4:	4630      	mov	r0, r6
 80063d6:	f000 f85c 	bl	8006492 <__malloc_unlock>
 80063da:	f104 000b 	add.w	r0, r4, #11
 80063de:	1d23      	adds	r3, r4, #4
 80063e0:	f020 0007 	bic.w	r0, r0, #7
 80063e4:	1ac3      	subs	r3, r0, r3
 80063e6:	d0d3      	beq.n	8006390 <_malloc_r+0x20>
 80063e8:	425a      	negs	r2, r3
 80063ea:	50e2      	str	r2, [r4, r3]
 80063ec:	e7d0      	b.n	8006390 <_malloc_r+0x20>
 80063ee:	684b      	ldr	r3, [r1, #4]
 80063f0:	428c      	cmp	r4, r1
 80063f2:	bf16      	itet	ne
 80063f4:	6063      	strne	r3, [r4, #4]
 80063f6:	6013      	streq	r3, [r2, #0]
 80063f8:	460c      	movne	r4, r1
 80063fa:	e7eb      	b.n	80063d4 <_malloc_r+0x64>
 80063fc:	460c      	mov	r4, r1
 80063fe:	6849      	ldr	r1, [r1, #4]
 8006400:	e7cc      	b.n	800639c <_malloc_r+0x2c>
 8006402:	1cc4      	adds	r4, r0, #3
 8006404:	f024 0403 	bic.w	r4, r4, #3
 8006408:	42a0      	cmp	r0, r4
 800640a:	d005      	beq.n	8006418 <_malloc_r+0xa8>
 800640c:	1a21      	subs	r1, r4, r0
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f82e 	bl	8006470 <_sbrk_r>
 8006414:	3001      	adds	r0, #1
 8006416:	d0cf      	beq.n	80063b8 <_malloc_r+0x48>
 8006418:	6025      	str	r5, [r4, #0]
 800641a:	e7db      	b.n	80063d4 <_malloc_r+0x64>
 800641c:	20000108 	.word	0x20000108
 8006420:	2000010c 	.word	0x2000010c

08006424 <_realloc_r>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	4607      	mov	r7, r0
 8006428:	4614      	mov	r4, r2
 800642a:	460e      	mov	r6, r1
 800642c:	b921      	cbnz	r1, 8006438 <_realloc_r+0x14>
 800642e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006432:	4611      	mov	r1, r2
 8006434:	f7ff bf9c 	b.w	8006370 <_malloc_r>
 8006438:	b922      	cbnz	r2, 8006444 <_realloc_r+0x20>
 800643a:	f7ff ff4d 	bl	80062d8 <_free_r>
 800643e:	4625      	mov	r5, r4
 8006440:	4628      	mov	r0, r5
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006444:	f000 f826 	bl	8006494 <_malloc_usable_size_r>
 8006448:	42a0      	cmp	r0, r4
 800644a:	d20f      	bcs.n	800646c <_realloc_r+0x48>
 800644c:	4621      	mov	r1, r4
 800644e:	4638      	mov	r0, r7
 8006450:	f7ff ff8e 	bl	8006370 <_malloc_r>
 8006454:	4605      	mov	r5, r0
 8006456:	2800      	cmp	r0, #0
 8006458:	d0f2      	beq.n	8006440 <_realloc_r+0x1c>
 800645a:	4631      	mov	r1, r6
 800645c:	4622      	mov	r2, r4
 800645e:	f7ff ff17 	bl	8006290 <memcpy>
 8006462:	4631      	mov	r1, r6
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ff37 	bl	80062d8 <_free_r>
 800646a:	e7e9      	b.n	8006440 <_realloc_r+0x1c>
 800646c:	4635      	mov	r5, r6
 800646e:	e7e7      	b.n	8006440 <_realloc_r+0x1c>

08006470 <_sbrk_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	2300      	movs	r3, #0
 8006474:	4c05      	ldr	r4, [pc, #20]	; (800648c <_sbrk_r+0x1c>)
 8006476:	4605      	mov	r5, r0
 8006478:	4608      	mov	r0, r1
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	f7fb ffdc 	bl	8002438 <_sbrk>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_sbrk_r+0x1a>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	b103      	cbz	r3, 800648a <_sbrk_r+0x1a>
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20000360 	.word	0x20000360

08006490 <__malloc_lock>:
 8006490:	4770      	bx	lr

08006492 <__malloc_unlock>:
 8006492:	4770      	bx	lr

08006494 <_malloc_usable_size_r>:
 8006494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006498:	1f18      	subs	r0, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	bfbc      	itt	lt
 800649e:	580b      	ldrlt	r3, [r1, r0]
 80064a0:	18c0      	addlt	r0, r0, r3
 80064a2:	4770      	bx	lr

080064a4 <_init>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr

080064b0 <_fini>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

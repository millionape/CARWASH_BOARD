
i2c_test_c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a30  08006a30  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006a30  08006a30  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a30  08006a30  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200000a0  08006ad8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006ad8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f29  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb1  00000000  00000000  00031ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00034ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00036048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001976c  00000000  00000000  00037070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136df  00000000  00000000  000507dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa91  00000000  00000000  00063ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f394c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  000f39a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006628 	.word	0x08006628

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08006628 	.word	0x08006628

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b5d      	ldr	r3, [pc, #372]	; (80002e8 <MX_GPIO_Init+0x18c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a5c      	ldr	r2, [pc, #368]	; (80002e8 <MX_GPIO_Init+0x18c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b5a      	ldr	r3, [pc, #360]	; (80002e8 <MX_GPIO_Init+0x18c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b57      	ldr	r3, [pc, #348]	; (80002e8 <MX_GPIO_Init+0x18c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a56      	ldr	r2, [pc, #344]	; (80002e8 <MX_GPIO_Init+0x18c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b54      	ldr	r3, [pc, #336]	; (80002e8 <MX_GPIO_Init+0x18c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b51      	ldr	r3, [pc, #324]	; (80002e8 <MX_GPIO_Init+0x18c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a50      	ldr	r2, [pc, #320]	; (80002e8 <MX_GPIO_Init+0x18c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b4e      	ldr	r3, [pc, #312]	; (80002e8 <MX_GPIO_Init+0x18c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b4b      	ldr	r3, [pc, #300]	; (80002e8 <MX_GPIO_Init+0x18c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a4a      	ldr	r2, [pc, #296]	; (80002e8 <MX_GPIO_Init+0x18c>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b48      	ldr	r3, [pc, #288]	; (80002e8 <MX_GPIO_Init+0x18c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4845      	ldr	r0, [pc, #276]	; (80002ec <MX_GPIO_Init+0x190>)
 80001d8:	f003 f87f 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 80001dc:	2200      	movs	r2, #0
 80001de:	f245 3103 	movw	r1, #21251	; 0x5303
 80001e2:	4843      	ldr	r0, [pc, #268]	; (80002f0 <MX_GPIO_Init+0x194>)
 80001e4:	f003 f879 	bl	80032da <HAL_GPIO_WritePin>
                          |OUT_PIN4_Pin|OUT_PIN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_PIN3_GPIO_Port, OUT_PIN3_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	4841      	ldr	r0, [pc, #260]	; (80002f4 <MX_GPIO_Init+0x198>)
 80001f0:	f003 f873 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000202:	2301      	movs	r3, #1
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	4837      	ldr	r0, [pc, #220]	; (80002ec <MX_GPIO_Init+0x190>)
 800020e:	f002 fec9 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = USER_SW2_Pin|FRONT_SW1_PIN_Pin|FRONT_SW2_PIN_Pin|FRONT_SW3_PIN_Pin
 8000212:	23fc      	movs	r3, #252	; 0xfc
 8000214:	613b      	str	r3, [r7, #16]
                          |FRONT_SW4_PIN_Pin|FRONT_SW5_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000216:	4b38      	ldr	r3, [pc, #224]	; (80002f8 <MX_GPIO_Init+0x19c>)
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4833      	ldr	r0, [pc, #204]	; (80002f4 <MX_GPIO_Init+0x198>)
 8000226:	f002 febd 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|OUT_PIN4_Pin
 800022a:	f241 3303 	movw	r3, #4867	; 0x1303
 800022e:	613b      	str	r3, [r7, #16]
                          |OUT_PIN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000234:	2302      	movs	r3, #2
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	482b      	ldr	r0, [pc, #172]	; (80002f0 <MX_GPIO_Init+0x194>)
 8000244:	f002 feae 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX7219_CS_Pin;
 8000248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000256:	2303      	movs	r3, #3
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX7219_CS_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	4823      	ldr	r0, [pc, #140]	; (80002f0 <MX_GPIO_Init+0x194>)
 8000262:	f002 fe9f 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_PIN3_Pin;
 8000266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026c:	2301      	movs	r3, #1
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000274:	2302      	movs	r3, #2
 8000276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_PIN3_GPIO_Port, &GPIO_InitStruct);
 8000278:	f107 0310 	add.w	r3, r7, #16
 800027c:	4619      	mov	r1, r3
 800027e:	481d      	ldr	r0, [pc, #116]	; (80002f4 <MX_GPIO_Init+0x198>)
 8000280:	f002 fe90 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_SW3_Pin;
 8000284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_SW3_GPIO_Port, &GPIO_InitStruct);
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	4619      	mov	r1, r3
 8000298:	4816      	ldr	r0, [pc, #88]	; (80002f4 <MX_GPIO_Init+0x198>)
 800029a:	f002 fe83 	bl	8002fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2105      	movs	r1, #5
 80002a2:	2008      	movs	r0, #8
 80002a4:	f002 fe2b 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002a8:	2008      	movs	r0, #8
 80002aa:	f002 fe44 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	2105      	movs	r1, #5
 80002b2:	2009      	movs	r0, #9
 80002b4:	f002 fe23 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002b8:	2009      	movs	r0, #9
 80002ba:	f002 fe3c 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80002be:	2200      	movs	r2, #0
 80002c0:	2105      	movs	r1, #5
 80002c2:	200a      	movs	r0, #10
 80002c4:	f002 fe1b 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002c8:	200a      	movs	r0, #10
 80002ca:	f002 fe34 	bl	8002f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2105      	movs	r1, #5
 80002d2:	2017      	movs	r0, #23
 80002d4:	f002 fe13 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002d8:	2017      	movs	r0, #23
 80002da:	f002 fe2c 	bl	8002f36 <HAL_NVIC_EnableIRQ>

}
 80002de:	bf00      	nop
 80002e0:	3720      	adds	r7, #32
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40011000 	.word	0x40011000
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	40010800 	.word	0x40010800
 80002f8:	10110000 	.word	0x10110000

080002fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000300:	f002 fc46 	bl	8002b90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000304:	f000 f88e 	bl	8000424 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000308:	f7ff ff28 	bl	800015c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800030c:	f002 fb3e 	bl	800298c <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000310:	f002 f928 	bl	8002564 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000314:	f002 f978 	bl	8002608 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000318:	f002 f9c2 	bl	80026a0 <MX_TIM3_Init>
	MX_TIM4_Init();
 800031c:	f002 fa3c 	bl	8002798 <MX_TIM4_Init>
	MX_SPI2_Init();
 8000320:	f001 ffa4 	bl	800226c <MX_SPI2_Init>
	MX_RTC_Init();
 8000324:	f001 ff34 	bl	8002190 <MX_RTC_Init>
	MX_USART3_UART_Init();
 8000328:	f002 fb5a 	bl	80029e0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(400);
 800032c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000330:	f002 fc90 	bl	8002c54 <HAL_Delay>
	read_settings_from_eeprom();
 8000334:	f000 f8d4 	bl	80004e0 <read_settings_from_eeprom>
	HAL_Delay(400);
 8000338:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800033c:	f002 fc8a 	bl	8002c54 <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000340:	482c      	ldr	r0, [pc, #176]	; (80003f4 <main+0xf8>)
 8000342:	f004 fc67 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8000346:	482c      	ldr	r0, [pc, #176]	; (80003f8 <main+0xfc>)
 8000348:	f004 fc64 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim1);
 800034c:	482b      	ldr	r0, [pc, #172]	; (80003fc <main+0x100>)
 800034e:	f004 fc61 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
	max7219_DisableDisplayTest();
 8000352:	f001 fdbe 	bl	8001ed2 <max7219_DisableDisplayTest>
	HAL_Delay(400);
 8000356:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800035a:	f002 fc7b 	bl	8002c54 <HAL_Delay>
	max7219_Init ( 5 );
 800035e:	2005      	movs	r0, #5
 8000360:	f001 fd8c 	bl	8001e7c <max7219_Init>
	max7219_Decode_On ();
 8000364:	f001 fe20 	bl	8001fa8 <max7219_Decode_On>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000368:	2100      	movs	r1, #0
 800036a:	4825      	ldr	r0, [pc, #148]	; (8000400 <main+0x104>)
 800036c:	f004 fcd8 	bl	8004d20 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000370:	2104      	movs	r1, #4
 8000372:	4823      	ldr	r0, [pc, #140]	; (8000400 <main+0x104>)
 8000374:	f004 fcd4 	bl	8004d20 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000378:	481e      	ldr	r0, [pc, #120]	; (80003f4 <main+0xf8>)
 800037a:	f004 fbf9 	bl	8004b70 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <main+0x100>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f06f 0201 	mvn.w	r2, #1
 8000386:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <main+0x100>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2200      	movs	r2, #0
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
	DEV_ID =  HAL_GetDEVID();
 8000390:	f002 fc90 	bl	8002cb4 <HAL_GetDEVID>
 8000394:	4603      	mov	r3, r0
 8000396:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <main+0x108>)
 8000398:	6013      	str	r3, [r2, #0]
	REV_ID = HAL_GetREVID();
 800039a:	f002 fc7f 	bl	8002c9c <HAL_GetREVID>
 800039e:	4603      	mov	r3, r0
 80003a0:	4a19      	ldr	r2, [pc, #100]	; (8000408 <main+0x10c>)
 80003a2:	6013      	str	r3, [r2, #0]

	sprintf(dev_id_buffer, "$DVID%d-%d&\r\n",(int)DEV_ID,(int)REV_ID);
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0x108>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <main+0x10c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4917      	ldr	r1, [pc, #92]	; (800040c <main+0x110>)
 80003b0:	4817      	ldr	r0, [pc, #92]	; (8000410 <main+0x114>)
 80003b2:	f005 fcff 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dev_id_buffer, strlen(dev_id_buffer), HAL_MAX_DELAY);
 80003b6:	4816      	ldr	r0, [pc, #88]	; (8000410 <main+0x114>)
 80003b8:	f7ff fec8 	bl	800014c <strlen>
 80003bc:	4603      	mov	r3, r0
 80003be:	b29a      	uxth	r2, r3
 80003c0:	f04f 33ff 	mov.w	r3, #4294967295
 80003c4:	4912      	ldr	r1, [pc, #72]	; (8000410 <main+0x114>)
 80003c6:	4813      	ldr	r0, [pc, #76]	; (8000414 <main+0x118>)
 80003c8:	f005 fb57 	bl	8005a7a <HAL_UART_Transmit>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80003cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d0:	f002 fc40 	bl	8002c54 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)){
 80003d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <main+0x11c>)
 80003da:	f002 ff67 	bl	80032ac <HAL_GPIO_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f3      	beq.n	80003cc <main+0xd0>
			credit = 0;
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <main+0x120>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
			system_function_start = false;
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <main+0x124>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80003f0:	e7ec      	b.n	80003cc <main+0xd0>
 80003f2:	bf00      	nop
 80003f4:	20000294 	.word	0x20000294
 80003f8:	200001bc 	.word	0x200001bc
 80003fc:	2000024c 	.word	0x2000024c
 8000400:	20000204 	.word	0x20000204
 8000404:	200000bc 	.word	0x200000bc
 8000408:	200000c0 	.word	0x200000c0
 800040c:	08006640 	.word	0x08006640
 8000410:	20000110 	.word	0x20000110
 8000414:	2000031c 	.word	0x2000031c
 8000418:	40010800 	.word	0x40010800
 800041c:	200000e4 	.word	0x200000e4
 8000420:	200000f0 	.word	0x200000f0

08000424 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b094      	sub	sp, #80	; 0x50
 8000428:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f005 fcb6 	bl	8005da4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000454:	2309      	movs	r3, #9
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000472:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000474:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047e:	4618      	mov	r0, r3
 8000480:	f002 ff68 	bl	8003354 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800048a:	f001 fcf1 	bl	8001e70 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000492:	2302      	movs	r3, #2
 8000494:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2102      	movs	r1, #2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 f9d2 	bl	8003854 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x96>
	{
		Error_Handler();
 80004b6:	f001 fcdb 	bl	8001e70 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004ba:	2301      	movs	r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c2:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 fb5e 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 80004d2:	f001 fccd 	bl	8001e70 <Error_Handler>
	}
}
 80004d6:	bf00      	nop
 80004d8:	3750      	adds	r7, #80	; 0x50
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <read_settings_from_eeprom>:

/* USER CODE BEGIN 4 */
void read_settings_from_eeprom(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
	F1_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80004e6:	2101      	movs	r1, #1
 80004e8:	4886      	ldr	r0, [pc, #536]	; (8000704 <read_settings_from_eeprom+0x224>)
 80004ea:	f004 f86f 	bl	80045cc <HAL_RTCEx_BKUPRead>
 80004ee:	4603      	mov	r3, r0
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b85      	ldr	r3, [pc, #532]	; (8000708 <read_settings_from_eeprom+0x228>)
 80004f4:	701a      	strb	r2, [r3, #0]
	F2_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80004f6:	2102      	movs	r1, #2
 80004f8:	4882      	ldr	r0, [pc, #520]	; (8000704 <read_settings_from_eeprom+0x224>)
 80004fa:	f004 f867 	bl	80045cc <HAL_RTCEx_BKUPRead>
 80004fe:	4603      	mov	r3, r0
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b82      	ldr	r3, [pc, #520]	; (800070c <read_settings_from_eeprom+0x22c>)
 8000504:	701a      	strb	r2, [r3, #0]
	F3_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8000506:	2103      	movs	r1, #3
 8000508:	487e      	ldr	r0, [pc, #504]	; (8000704 <read_settings_from_eeprom+0x224>)
 800050a:	f004 f85f 	bl	80045cc <HAL_RTCEx_BKUPRead>
 800050e:	4603      	mov	r3, r0
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b7f      	ldr	r3, [pc, #508]	; (8000710 <read_settings_from_eeprom+0x230>)
 8000514:	701a      	strb	r2, [r3, #0]
	F4_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 8000516:	2104      	movs	r1, #4
 8000518:	487a      	ldr	r0, [pc, #488]	; (8000704 <read_settings_from_eeprom+0x224>)
 800051a:	f004 f857 	bl	80045cc <HAL_RTCEx_BKUPRead>
 800051e:	4603      	mov	r3, r0
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b7c      	ldr	r3, [pc, #496]	; (8000714 <read_settings_from_eeprom+0x234>)
 8000524:	701a      	strb	r2, [r3, #0]
	F5_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 8000526:	2105      	movs	r1, #5
 8000528:	4876      	ldr	r0, [pc, #472]	; (8000704 <read_settings_from_eeprom+0x224>)
 800052a:	f004 f84f 	bl	80045cc <HAL_RTCEx_BKUPRead>
 800052e:	4603      	mov	r3, r0
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b79      	ldr	r3, [pc, #484]	; (8000718 <read_settings_from_eeprom+0x238>)
 8000534:	701a      	strb	r2, [r3, #0]
	credit = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 8000536:	2106      	movs	r1, #6
 8000538:	4872      	ldr	r0, [pc, #456]	; (8000704 <read_settings_from_eeprom+0x224>)
 800053a:	f004 f847 	bl	80045cc <HAL_RTCEx_BKUPRead>
 800053e:	4603      	mov	r3, r0
 8000540:	4a76      	ldr	r2, [pc, #472]	; (800071c <read_settings_from_eeprom+0x23c>)
 8000542:	6013      	str	r3, [r2, #0]
	if(credit > 2){
 8000544:	4b75      	ldr	r3, [pc, #468]	; (800071c <read_settings_from_eeprom+0x23c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b02      	cmp	r3, #2
 800054a:	d903      	bls.n	8000554 <read_settings_from_eeprom+0x74>
		system_function_start = true;
 800054c:	4b74      	ldr	r3, [pc, #464]	; (8000720 <read_settings_from_eeprom+0x240>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e002      	b.n	800055a <read_settings_from_eeprom+0x7a>
	}else{
		credit = 0;
 8000554:	4b71      	ldr	r3, [pc, #452]	; (800071c <read_settings_from_eeprom+0x23c>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"eeprom read DURATION 1 is %d \r\n",F1_DURATION);
 800055a:	4b6b      	ldr	r3, [pc, #428]	; (8000708 <read_settings_from_eeprom+0x228>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	496f      	ldr	r1, [pc, #444]	; (8000724 <read_settings_from_eeprom+0x244>)
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fc24 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fdec 	bl	800014c <strlen>
 8000574:	4603      	mov	r3, r0
 8000576:	b29a      	uxth	r2, r3
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	486a      	ldr	r0, [pc, #424]	; (8000728 <read_settings_from_eeprom+0x248>)
 8000580:	f005 fa7b 	bl	8005a7a <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 2 is %d \r\n",F2_DURATION);
 8000584:	4b61      	ldr	r3, [pc, #388]	; (800070c <read_settings_from_eeprom+0x22c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4967      	ldr	r1, [pc, #412]	; (800072c <read_settings_from_eeprom+0x24c>)
 8000590:	4618      	mov	r0, r3
 8000592:	f005 fc0f 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fdd7 	bl	800014c <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	1d39      	adds	r1, r7, #4
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	485f      	ldr	r0, [pc, #380]	; (8000728 <read_settings_from_eeprom+0x248>)
 80005aa:	f005 fa66 	bl	8005a7a <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 3 is %d \r\n",F3_DURATION);
 80005ae:	4b58      	ldr	r3, [pc, #352]	; (8000710 <read_settings_from_eeprom+0x230>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	495d      	ldr	r1, [pc, #372]	; (8000730 <read_settings_from_eeprom+0x250>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fbfa 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fdc2 	bl	800014c <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	4855      	ldr	r0, [pc, #340]	; (8000728 <read_settings_from_eeprom+0x248>)
 80005d4:	f005 fa51 	bl	8005a7a <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 4 is %d \r\n",F4_DURATION);
 80005d8:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <read_settings_from_eeprom+0x234>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4954      	ldr	r1, [pc, #336]	; (8000734 <read_settings_from_eeprom+0x254>)
 80005e4:	4618      	mov	r0, r3
 80005e6:	f005 fbe5 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdad 	bl	800014c <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	1d39      	adds	r1, r7, #4
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	484a      	ldr	r0, [pc, #296]	; (8000728 <read_settings_from_eeprom+0x248>)
 80005fe:	f005 fa3c 	bl	8005a7a <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 5 is %d \r\n",F5_DURATION);
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <read_settings_from_eeprom+0x238>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	494a      	ldr	r1, [pc, #296]	; (8000738 <read_settings_from_eeprom+0x258>)
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fbd0 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fd98 	bl	800014c <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	1d39      	adds	r1, r7, #4
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	4840      	ldr	r0, [pc, #256]	; (8000728 <read_settings_from_eeprom+0x248>)
 8000628:	f005 fa27 	bl	8005a7a <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read CREDIT is %d \r\n",(int)credit);
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <read_settings_from_eeprom+0x23c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4941      	ldr	r1, [pc, #260]	; (800073c <read_settings_from_eeprom+0x25c>)
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fbbc 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fd84 	bl	800014c <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	1d39      	adds	r1, r7, #4
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	4836      	ldr	r0, [pc, #216]	; (8000728 <read_settings_from_eeprom+0x248>)
 8000650:	f005 fa13 	bl	8005a7a <HAL_UART_Transmit>

	if(F1_DURATION == 0 || F2_DURATION == 0 || F3_DURATION == 0 || F4_DURATION == 0 || F5_DURATION == 0){
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <read_settings_from_eeprom+0x228>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d013      	beq.n	8000686 <read_settings_from_eeprom+0x1a6>
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <read_settings_from_eeprom+0x22c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00e      	beq.n	8000686 <read_settings_from_eeprom+0x1a6>
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <read_settings_from_eeprom+0x230>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d009      	beq.n	8000686 <read_settings_from_eeprom+0x1a6>
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <read_settings_from_eeprom+0x234>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <read_settings_from_eeprom+0x1a6>
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <read_settings_from_eeprom+0x238>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d136      	bne.n	80006f4 <read_settings_from_eeprom+0x214>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, default_credit_duration);
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <read_settings_from_eeprom+0x260>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	2101      	movs	r1, #1
 800068e:	481d      	ldr	r0, [pc, #116]	; (8000704 <read_settings_from_eeprom+0x224>)
 8000690:	f003 ff82 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, default_credit_duration);
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <read_settings_from_eeprom+0x260>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4819      	ldr	r0, [pc, #100]	; (8000704 <read_settings_from_eeprom+0x224>)
 800069e:	f003 ff7b 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, default_credit_duration);
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2103      	movs	r1, #3
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <read_settings_from_eeprom+0x224>)
 80006ac:	f003 ff74 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, default_credit_duration);
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2104      	movs	r1, #4
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <read_settings_from_eeprom+0x224>)
 80006ba:	f003 ff6d 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, default_credit_duration);
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	2105      	movs	r1, #5
 80006c6:	480f      	ldr	r0, [pc, #60]	; (8000704 <read_settings_from_eeprom+0x224>)
 80006c8:	f003 ff66 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		F1_DURATION = default_credit_duration;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <read_settings_from_eeprom+0x228>)
 80006d2:	701a      	strb	r2, [r3, #0]
		F2_DURATION = default_credit_duration;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <read_settings_from_eeprom+0x22c>)
 80006da:	701a      	strb	r2, [r3, #0]
		F3_DURATION = default_credit_duration;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <read_settings_from_eeprom+0x230>)
 80006e2:	701a      	strb	r2, [r3, #0]
		F4_DURATION = default_credit_duration;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <read_settings_from_eeprom+0x234>)
 80006ea:	701a      	strb	r2, [r3, #0]
		F5_DURATION = default_credit_duration;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <read_settings_from_eeprom+0x260>)
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <read_settings_from_eeprom+0x238>)
 80006f2:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(300);
 80006f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006f8:	f002 faac 	bl	8002c54 <HAL_Delay>
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000150 	.word	0x20000150
 8000708:	20000013 	.word	0x20000013
 800070c:	20000014 	.word	0x20000014
 8000710:	20000015 	.word	0x20000015
 8000714:	20000016 	.word	0x20000016
 8000718:	20000017 	.word	0x20000017
 800071c:	200000e4 	.word	0x200000e4
 8000720:	200000f0 	.word	0x200000f0
 8000724:	08006650 	.word	0x08006650
 8000728:	2000031c 	.word	0x2000031c
 800072c:	08006670 	.word	0x08006670
 8000730:	08006690 	.word	0x08006690
 8000734:	080066b0 	.word	0x080066b0
 8000738:	080066d0 	.word	0x080066d0
 800073c:	080066f0 	.word	0x080066f0
 8000740:	20000000 	.word	0x20000000

08000744 <reset_all_output>:
void reset_all_output(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // pin b0 --> out 1
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <reset_all_output+0x4c>)
 800074e:	f002 fdc4 	bl	80032da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // pin b1 --> out 2
 8000752:	2200      	movs	r2, #0
 8000754:	2102      	movs	r1, #2
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <reset_all_output+0x4c>)
 8000758:	f002 fdbf 	bl	80032da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // pin a8 --> out 3
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <reset_all_output+0x50>)
 8000764:	f002 fdb9 	bl	80032da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // pin b8 --> out 4
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <reset_all_output+0x4c>)
 8000770:	f002 fdb3 	bl	80032da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // pin b9 --> out 5
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <reset_all_output+0x4c>)
 800077c:	f002 fdad 	bl	80032da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // pin b12 --> out 6
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000786:	4802      	ldr	r0, [pc, #8]	; (8000790 <reset_all_output+0x4c>)
 8000788:	f002 fda7 	bl	80032da <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010c00 	.word	0x40010c00
 8000794:	40010800 	.word	0x40010800

08000798 <set_output_to>:
void set_output_to(uint8_t pin){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	switch(pin){
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d82d      	bhi.n	8000806 <set_output_to+0x6e>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <set_output_to+0x18>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c5 	.word	0x080007c5
 80007b4:	080007d1 	.word	0x080007d1
 80007b8:	080007dd 	.word	0x080007dd
 80007bc:	080007eb 	.word	0x080007eb
 80007c0:	080007f9 	.word	0x080007f9
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // pin b0 --> out 1
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	4813      	ldr	r0, [pc, #76]	; (8000818 <set_output_to+0x80>)
 80007ca:	f002 fd86 	bl	80032da <HAL_GPIO_WritePin>
		break;
 80007ce:	e01f      	b.n	8000810 <set_output_to+0x78>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // pin b1 --> out 2
 80007d0:	2201      	movs	r2, #1
 80007d2:	2102      	movs	r1, #2
 80007d4:	4810      	ldr	r0, [pc, #64]	; (8000818 <set_output_to+0x80>)
 80007d6:	f002 fd80 	bl	80032da <HAL_GPIO_WritePin>
		break;
 80007da:	e019      	b.n	8000810 <set_output_to+0x78>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // pin a8 --> out 3
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <set_output_to+0x84>)
 80007e4:	f002 fd79 	bl	80032da <HAL_GPIO_WritePin>
		break;
 80007e8:	e012      	b.n	8000810 <set_output_to+0x78>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // pin b8 --> out 4
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <set_output_to+0x80>)
 80007f2:	f002 fd72 	bl	80032da <HAL_GPIO_WritePin>
		break;
 80007f6:	e00b      	b.n	8000810 <set_output_to+0x78>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // pin b9 --> out 5
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <set_output_to+0x80>)
 8000800:	f002 fd6b 	bl	80032da <HAL_GPIO_WritePin>
		break;
 8000804:	e004      	b.n	8000810 <set_output_to+0x78>
	default:
		reset_all_output();
 8000806:	f7ff ff9d 	bl	8000744 <reset_all_output>
		max7219_Turn_On();
 800080a:	f001 fbb9 	bl	8001f80 <max7219_Turn_On>
		break;
 800080e:	bf00      	nop
	}

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40010c00 	.word	0x40010c00
 800081c:	40010800 	.word	0x40010800

08000820 <segment_display_int>:

void segment_display_int(int number){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	max7219_Decode_On();
 8000828:	f001 fbbe 	bl	8001fa8 <max7219_Decode_On>
	max7219_Clean ();
 800082c:	f001 fb5a 	bl	8001ee4 <max7219_Clean>
	if(number < 10){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b09      	cmp	r3, #9
 8000834:	dc04      	bgt.n	8000840 <segment_display_int+0x20>
		max7219_PrintItos (DIGIT_1, number );
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	2001      	movs	r0, #1
 800083a:	f001 fc1f 	bl	800207c <max7219_PrintItos>
	}else if(number >= 10 && number < 100){
		max7219_PrintItos (DIGIT_2, number );
	}else{
		max7219_PrintItos (DIGIT_3, number );
	}
}
 800083e:	e00e      	b.n	800085e <segment_display_int+0x3e>
	}else if(number >= 10 && number < 100){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b09      	cmp	r3, #9
 8000844:	dd07      	ble.n	8000856 <segment_display_int+0x36>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b63      	cmp	r3, #99	; 0x63
 800084a:	dc04      	bgt.n	8000856 <segment_display_int+0x36>
		max7219_PrintItos (DIGIT_2, number );
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	2002      	movs	r0, #2
 8000850:	f001 fc14 	bl	800207c <max7219_PrintItos>
}
 8000854:	e003      	b.n	800085e <segment_display_int+0x3e>
		max7219_PrintItos (DIGIT_3, number );
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2003      	movs	r0, #3
 800085a:	f001 fc0f 	bl	800207c <max7219_PrintItos>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <segment_display_function_settings>:
void segment_display_function_settings(int func_number,int value){
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
	max7219_Decode_On();
 8000870:	f001 fb9a 	bl	8001fa8 <max7219_Decode_On>
	max7219_Clean ();
 8000874:	f001 fb36 	bl	8001ee4 <max7219_Clean>
	if(value < 10){
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b09      	cmp	r3, #9
 800087c:	dc04      	bgt.n	8000888 <segment_display_function_settings+0x22>
		max7219_PrintItos (DIGIT_1, value );
 800087e:	6839      	ldr	r1, [r7, #0]
 8000880:	2001      	movs	r0, #1
 8000882:	f001 fbfb 	bl	800207c <max7219_PrintItos>
 8000886:	e009      	b.n	800089c <segment_display_function_settings+0x36>
	}else if(value >= 10 && value < 100){
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b09      	cmp	r3, #9
 800088c:	dd06      	ble.n	800089c <segment_display_function_settings+0x36>
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b63      	cmp	r3, #99	; 0x63
 8000892:	dc03      	bgt.n	800089c <segment_display_function_settings+0x36>
		max7219_PrintItos (DIGIT_2, value );
 8000894:	6839      	ldr	r1, [r7, #0]
 8000896:	2002      	movs	r0, #2
 8000898:	f001 fbf0 	bl	800207c <max7219_PrintItos>
	}
	max7219_PrintDigit(DIGIT_3,func_number,true);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	2003      	movs	r0, #3
 80008a6:	f001 fb8f 	bl	8001fc8 <max7219_PrintDigit>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <segment_display_standby>:
void segment_display_standby(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	max7219_Clean ();
 80008b8:	f001 fb14 	bl	8001ee4 <max7219_Clean>
	max7219_Decode_On();
 80008bc:	f001 fb74 	bl	8001fa8 <max7219_Decode_On>
	max7219_Clean ();
 80008c0:	f001 fb10 	bl	8001ee4 <max7219_Clean>
	if(displayEnable == true){
 80008c4:	4b62      	ldr	r3, [pc, #392]	; (8000a50 <segment_display_standby+0x19c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 80ac 	beq.w	8000a28 <segment_display_standby+0x174>
		switch(standby_counter){
 80008d0:	4b60      	ldr	r3, [pc, #384]	; (8000a54 <segment_display_standby+0x1a0>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	f200 8082 	bhi.w	80009e0 <segment_display_standby+0x12c>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <segment_display_standby+0x30>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	08000901 	.word	0x08000901
 80008e8:	08000921 	.word	0x08000921
 80008ec:	08000941 	.word	0x08000941
 80008f0:	08000961 	.word	0x08000961
 80008f4:	08000981 	.word	0x08000981
 80008f8:	080009a1 	.word	0x080009a1
 80008fc:	080009c1 	.word	0x080009c1
		case 0:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000900:	2200      	movs	r2, #0
 8000902:	210a      	movs	r1, #10
 8000904:	2001      	movs	r0, #1
 8000906:	f001 fb5f 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	2002      	movs	r0, #2
 8000910:	f001 fb5a 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000914:	2200      	movs	r2, #0
 8000916:	210f      	movs	r1, #15
 8000918:	2003      	movs	r0, #3
 800091a:	f001 fb55 	bl	8001fc8 <max7219_PrintDigit>
			break;
 800091e:	e06f      	b.n	8000a00 <segment_display_standby+0x14c>
		case 1:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000920:	2200      	movs	r2, #0
 8000922:	210f      	movs	r1, #15
 8000924:	2001      	movs	r0, #1
 8000926:	f001 fb4f 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800092a:	2200      	movs	r2, #0
 800092c:	210a      	movs	r1, #10
 800092e:	2002      	movs	r0, #2
 8000930:	f001 fb4a 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000934:	2200      	movs	r2, #0
 8000936:	210f      	movs	r1, #15
 8000938:	2003      	movs	r0, #3
 800093a:	f001 fb45 	bl	8001fc8 <max7219_PrintDigit>
			break;
 800093e:	e05f      	b.n	8000a00 <segment_display_standby+0x14c>
		case 2:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000940:	2200      	movs	r2, #0
 8000942:	210f      	movs	r1, #15
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fb3f 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	2002      	movs	r0, #2
 8000950:	f001 fb3a 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000954:	2200      	movs	r2, #0
 8000956:	210a      	movs	r1, #10
 8000958:	2003      	movs	r0, #3
 800095a:	f001 fb35 	bl	8001fc8 <max7219_PrintDigit>
			break;
 800095e:	e04f      	b.n	8000a00 <segment_display_standby+0x14c>
		case 3:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000960:	2200      	movs	r2, #0
 8000962:	210f      	movs	r1, #15
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fb2f 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800096a:	2200      	movs	r2, #0
 800096c:	210a      	movs	r1, #10
 800096e:	2002      	movs	r0, #2
 8000970:	f001 fb2a 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000974:	2200      	movs	r2, #0
 8000976:	210f      	movs	r1, #15
 8000978:	2003      	movs	r0, #3
 800097a:	f001 fb25 	bl	8001fc8 <max7219_PrintDigit>
			break;
 800097e:	e03f      	b.n	8000a00 <segment_display_standby+0x14c>
		case 4:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000980:	2200      	movs	r2, #0
 8000982:	210a      	movs	r1, #10
 8000984:	2001      	movs	r0, #1
 8000986:	f001 fb1f 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	2002      	movs	r0, #2
 8000990:	f001 fb1a 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000994:	2200      	movs	r2, #0
 8000996:	210f      	movs	r1, #15
 8000998:	2003      	movs	r0, #3
 800099a:	f001 fb15 	bl	8001fc8 <max7219_PrintDigit>
			break;
 800099e:	e02f      	b.n	8000a00 <segment_display_standby+0x14c>
		case 5:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80009a0:	2200      	movs	r2, #0
 80009a2:	210a      	movs	r1, #10
 80009a4:	2001      	movs	r0, #1
 80009a6:	f001 fb0f 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210a      	movs	r1, #10
 80009ae:	2002      	movs	r0, #2
 80009b0:	f001 fb0a 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 80009b4:	2200      	movs	r2, #0
 80009b6:	210a      	movs	r1, #10
 80009b8:	2003      	movs	r0, #3
 80009ba:	f001 fb05 	bl	8001fc8 <max7219_PrintDigit>
			break;
 80009be:	e01f      	b.n	8000a00 <segment_display_standby+0x14c>
		case 6:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80009c0:	2200      	movs	r2, #0
 80009c2:	210a      	movs	r1, #10
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 faff 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210a      	movs	r1, #10
 80009ce:	2002      	movs	r0, #2
 80009d0:	f001 fafa 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 80009d4:	2200      	movs	r2, #0
 80009d6:	210a      	movs	r1, #10
 80009d8:	2003      	movs	r0, #3
 80009da:	f001 faf5 	bl	8001fc8 <max7219_PrintDigit>
			break;
 80009de:	e00f      	b.n	8000a00 <segment_display_standby+0x14c>
		default:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80009e0:	2200      	movs	r2, #0
 80009e2:	210a      	movs	r1, #10
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 faef 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80009ea:	2200      	movs	r2, #0
 80009ec:	210a      	movs	r1, #10
 80009ee:	2002      	movs	r0, #2
 80009f0:	f001 faea 	bl	8001fc8 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 80009f4:	2200      	movs	r2, #0
 80009f6:	210a      	movs	r1, #10
 80009f8:	2003      	movs	r0, #3
 80009fa:	f001 fae5 	bl	8001fc8 <max7219_PrintDigit>
			break;
 80009fe:	bf00      	nop
		}
		if(standby_counter >= 6){
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <segment_display_standby+0x1a0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b05      	cmp	r3, #5
 8000a08:	d903      	bls.n	8000a12 <segment_display_standby+0x15e>
			standby_counter = 0;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <segment_display_standby+0x1a0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e006      	b.n	8000a20 <segment_display_standby+0x16c>
		}else{
			standby_counter += 1;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <segment_display_standby+0x1a0>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <segment_display_standby+0x1a0>)
 8000a1e:	701a      	strb	r2, [r3, #0]
		}
		//		max7219_PrintDigit(DIGIT_1,MINUS,false);
		//		max7219_PrintDigit(DIGIT_2,MINUS,false);
		//		max7219_PrintDigit(DIGIT_3,MINUS,false);
		displayEnable = false;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <segment_display_standby+0x19c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
		max7219_PrintDigit(DIGIT_2,BLANK,false);
		max7219_PrintDigit(DIGIT_3,BLANK,false);
		displayEnable = true;
	}

}
 8000a26:	e011      	b.n	8000a4c <segment_display_standby+0x198>
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f001 facb 	bl	8001fc8 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	2002      	movs	r0, #2
 8000a38:	f001 fac6 	bl	8001fc8 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	210f      	movs	r1, #15
 8000a40:	2003      	movs	r0, #3
 8000a42:	f001 fac1 	bl	8001fc8 <max7219_PrintDigit>
		displayEnable = true;
 8000a46:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <segment_display_standby+0x19c>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	200000fc 	.word	0x200000fc

08000a58 <iot_send_inserted_credit>:
	max7219_PrintDigit(DIGIT_1,BLANK,false);
	max7219_PrintDigit(DIGIT_2,BLANK,false);
	max7219_PrintDigit(DIGIT_3,BLANK,false);
}

void iot_send_inserted_credit(uint16_t inst_credit){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cINST_%d_%d%c\r\n",0x02,(unsigned int)credit,(unsigned int)inst_credit,0x03);
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <iot_send_inserted_credit+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	f107 000c 	add.w	r0, r7, #12
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	9101      	str	r1, [sp, #4]
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	4613      	mov	r3, r2
 8000a74:	2202      	movs	r2, #2
 8000a76:	4912      	ldr	r1, [pc, #72]	; (8000ac0 <iot_send_inserted_credit+0x68>)
 8000a78:	f005 f99c 	bl	8005db4 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fb63 	bl	800014c <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f107 010c 	add.w	r1, r7, #12
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <iot_send_inserted_credit+0x6c>)
 8000a94:	f004 fff1 	bl	8005a7a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fb55 	bl	800014c <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f107 010c 	add.w	r1, r7, #12
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <iot_send_inserted_credit+0x70>)
 8000ab0:	f004 ffe3 	bl	8005a7a <HAL_UART_Transmit>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000e4 	.word	0x200000e4
 8000ac0:	0800670c 	.word	0x0800670c
 8000ac4:	2000031c 	.word	0x2000031c
 8000ac8:	200002dc 	.word	0x200002dc

08000acc <iot_send_mode>:
void iot_send_mode(uint8_t mode){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cMODE_%d_%d%c\r\n",0x02,(unsigned int)credit,(unsigned int)mode,0x03);
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <iot_send_mode+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f107 000c 	add.w	r0, r7, #12
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	9101      	str	r1, [sp, #4]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	2202      	movs	r2, #2
 8000aea:	4912      	ldr	r1, [pc, #72]	; (8000b34 <iot_send_mode+0x68>)
 8000aec:	f005 f962 	bl	8005db4 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb29 	bl	800014c <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f107 010c 	add.w	r1, r7, #12
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <iot_send_mode+0x6c>)
 8000b08:	f004 ffb7 	bl	8005a7a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <iot_send_mode+0x70>)
 8000b24:	f004 ffa9 	bl	8005a7a <HAL_UART_Transmit>
	}
}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000e4 	.word	0x200000e4
 8000b34:	08006720 	.word	0x08006720
 8000b38:	2000031c 	.word	0x2000031c
 8000b3c:	200002dc 	.word	0x200002dc

08000b40 <iot_send_status>:
void iot_send_status(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af02      	add	r7, sp, #8
	char cmd_buffer[35];
	sprintf(cmd_buffer,"%cSTAT_%d%c\r\n",0x02,(unsigned int)credit,0x03);
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <iot_send_status+0x50>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1d38      	adds	r0, r7, #4
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	9200      	str	r2, [sp, #0]
 8000b50:	2202      	movs	r2, #2
 8000b52:	4910      	ldr	r1, [pc, #64]	; (8000b94 <iot_send_status+0x54>)
 8000b54:	f005 f92e 	bl	8005db4 <siprintf>
	if(DEBUG){
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
	}else{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff faf6 	bl	800014c <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <iot_send_status+0x58>)
 8000b6c:	f004 ff85 	bl	8005a7a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff faea 	bl	800014c <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <iot_send_status+0x5c>)
 8000b84:	f004 ff79 	bl	8005a7a <HAL_UART_Transmit>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000e4 	.word	0x200000e4
 8000b94:	08006734 	.word	0x08006734
 8000b98:	2000031c 	.word	0x2000031c
 8000b9c:	200002dc 	.word	0x200002dc

08000ba0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b098      	sub	sp, #96	; 0x60
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { /// tick every 1s
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4aab      	ldr	r2, [pc, #684]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f040 80c0 	bne.w	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
		max7219_Turn_On();
 8000bb4:	f001 f9e4 	bl	8001f80 <max7219_Turn_On>
		//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, 2);
		//		char tmp[25];
		//		uint8_t mapped_value = calculate_adc(adcBuffer[0]);
		if(clearButton == true){
 8000bb8:	4ba9      	ldr	r3, [pc, #676]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d046      	beq.n	8000c50 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	48a7      	ldr	r0, [pc, #668]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bc6:	f002 fb71 	bl	80032ac <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d113      	bne.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0x58>
				HAL_UART_Transmit(&huart1, "---> CLEAR BTN >>PRESS<< !!!\r\n", 30, HAL_MAX_DELAY);
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	221e      	movs	r2, #30
 8000bd6:	49a4      	ldr	r1, [pc, #656]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000bd8:	48a4      	ldr	r0, [pc, #656]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000bda:	f004 ff4e 	bl	8005a7a <HAL_UART_Transmit>
				selected_button = 0;
 8000bde:	4ba4      	ldr	r3, [pc, #656]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000be4:	f7ff fdae 	bl	8000744 <reset_all_output>
				clearButtonCounter += 1;
 8000be8:	4ba2      	ldr	r3, [pc, #648]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4ba0      	ldr	r3, [pc, #640]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e008      	b.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x6a>
			}else{
				clearButton = false;
 8000bf8:	4b99      	ldr	r3, [pc, #612]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000bfe:	4b9d      	ldr	r3, [pc, #628]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000c04:	489c      	ldr	r0, [pc, #624]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c06:	f004 f805 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
			}
			if(clearButtonCounter > 5){
 8000c0a:	4b9a      	ldr	r3, [pc, #616]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	d91d      	bls.n	8000c50 <HAL_TIM_PeriodElapsedCallback+0xb0>
				HAL_UART_Transmit(&huart1, "---> CLEAR CREDITS !!!\r\n", 24, HAL_MAX_DELAY);
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	2218      	movs	r2, #24
 8000c1a:	4998      	ldr	r1, [pc, #608]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c1c:	4893      	ldr	r0, [pc, #588]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c1e:	f004 ff2c 	bl	8005a7a <HAL_UART_Transmit>
				clearButton = false;
 8000c22:	4b8f      	ldr	r3, [pc, #572]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000c28:	4b92      	ldr	r3, [pc, #584]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
				credit = 0;
 8000c2e:	4b94      	ldr	r3, [pc, #592]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
				system_function_start = false;
 8000c34:	4b93      	ldr	r3, [pc, #588]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
				selected_button = 0;
 8000c3a:	4b8d      	ldr	r3, [pc, #564]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000c40:	f7ff fd80 	bl	8000744 <reset_all_output>
				clearButtonCounter = 0;
 8000c44:	4b8b      	ldr	r3, [pc, #556]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000c4a:	488b      	ldr	r0, [pc, #556]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c4c:	f003 ffe2 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (selected_menu > 0) {
 8000c50:	4b8d      	ldr	r3, [pc, #564]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d05c      	beq.n	8000d14 <HAL_TIM_PeriodElapsedCallback+0x174>
			HAL_TIM_Base_Stop_IT(&htim2); //stop main program
 8000c5a:	488c      	ldr	r0, [pc, #560]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c5c:	f003 ffda 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
			switch (selected_menu) {
 8000c60:	4b89      	ldr	r3, [pc, #548]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3b01      	subs	r3, #1
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d863      	bhi.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c89 	.word	0x08000c89
 8000c78:	08000ca1 	.word	0x08000ca1
 8000c7c:	08000cb9 	.word	0x08000cb9
 8000c80:	08000cdb 	.word	0x08000cdb
 8000c84:	08000cfd 	.word	0x08000cfd
			case 1:
				//				max7219_PrintDigit(DIGIT_3,16,true);
				segment_display_function_settings(selected_menu,F1_DURATION);
 8000c88:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b7f      	ldr	r3, [pc, #508]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	f7ff fde4 	bl	8000866 <segment_display_function_settings>
				//				max7219_PrintDigit(DIGIT_2,NUM_1,false);
				//				memset(tmp, 0, sizeof tmp);
				//				sprintf(tmp, "F1 VALUE : %d \r\n", (unsigned int) mapped_value);
				//				HAL_UART_Transmit(&huart1, tmp, strlen(tmp), HAL_MAX_DELAY);
				//				F1_DURATION = mapped_value;
				break;
 8000c9e:	e049      	b.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
			case 2:
				segment_display_function_settings(selected_menu,F2_DURATION);
 8000ca0:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b7a      	ldr	r3, [pc, #488]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	f7ff fdd8 	bl	8000866 <segment_display_function_settings>
				break;
 8000cb6:	e03d      	b.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
			case 3:
				max7219_PrintDigit(DIGIT_3,18,true);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2112      	movs	r1, #18
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f001 f983 	bl	8001fc8 <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F3_DURATION);
 8000cc2:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b73      	ldr	r3, [pc, #460]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f7ff fdc7 	bl	8000866 <segment_display_function_settings>
				break;
 8000cd8:	e02c      	b.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
			case 4:
				max7219_PrintDigit(DIGIT_3,19,true);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2113      	movs	r1, #19
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f001 f972 	bl	8001fc8 <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F4_DURATION);
 8000ce4:	4b68      	ldr	r3, [pc, #416]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	f7ff fdb6 	bl	8000866 <segment_display_function_settings>
				break;
 8000cfa:	e01b      	b.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
			case 5:
				segment_display_function_settings(selected_menu,F5_DURATION);
 8000cfc:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b66      	ldr	r3, [pc, #408]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	f7ff fdaa 	bl	8000866 <segment_display_function_settings>
				break;
 8000d12:	e00f      	b.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
			}
		} else {
			max7219_Decode_On();
 8000d14:	f001 f948 	bl	8001fa8 <max7219_Decode_On>
			HAL_TIM_Base_Start_IT(&htim2);
 8000d18:	485c      	ldr	r0, [pc, #368]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d1a:	f003 ff29 	bl	8004b70 <HAL_TIM_Base_Start_IT>
			if(clearButton == false){
 8000d1e:	4b50      	ldr	r3, [pc, #320]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x194>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000d2e:	4852      	ldr	r0, [pc, #328]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d30:	f003 ff70 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if (htim->Instance == TIM2) { /// tick every 1ms
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	f040 80da 	bne.w	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x354>
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
		char credit_tmp_msg[55];
		if(last_credit_insert > 0){
 8000d40:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01e      	beq.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x1e6>
			sprintf(credit_tmp_msg,"last credit inserted: %d \r\n",(unsigned int)last_credit_insert);
 8000d48:	4b56      	ldr	r3, [pc, #344]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4955      	ldr	r1, [pc, #340]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f82d 	bl	8005db4 <siprintf>
			iot_send_inserted_credit(last_credit_insert);
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe7a 	bl	8000a58 <iot_send_inserted_credit>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff f9ef 	bl	800014c <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f107 010c 	add.w	r1, r7, #12
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	483c      	ldr	r0, [pc, #240]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d7c:	f004 fe7d 	bl	8005a7a <HAL_UART_Transmit>
			last_credit_insert = 0;
 8000d80:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	801a      	strh	r2, [r3, #0]
		}
		if(last_credit_insert_bank > 0){
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d01e      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x22c>
			sprintf(credit_tmp_msg,"last bank credit inserted: %d \r\n",(unsigned int)last_credit_insert_bank);
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4945      	ldr	r1, [pc, #276]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f005 f80a 	bl	8005db4 <siprintf>
			iot_send_inserted_credit(last_credit_insert_bank);
 8000da0:	4b42      	ldr	r3, [pc, #264]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe57 	bl	8000a58 <iot_send_inserted_credit>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff f9cc 	bl	800014c <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f107 010c 	add.w	r1, r7, #12
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	482a      	ldr	r0, [pc, #168]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000dc2:	f004 fe5a 	bl	8005a7a <HAL_UART_Transmit>
			last_credit_insert_bank = 0;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	801a      	strh	r2, [r3, #0]
		}
		if(tim2_round_counter >= 10){
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d91e      	bls.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x274>
			HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	220d      	movs	r2, #13
 8000ddc:	4936      	ldr	r1, [pc, #216]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000dde:	4823      	ldr	r0, [pc, #140]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000de0:	f004 fe4b 	bl	8005a7a <HAL_UART_Transmit>
			logic_runner();
 8000de4:	f000 fdb8 	bl	8001958 <logic_runner>
			tim2_round_counter = 0;
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
			if(iot_round_counter > 30){
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b1e      	cmp	r3, #30
 8000df6:	d905      	bls.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x264>
				iot_send_status();
 8000df8:	f7ff fea2 	bl	8000b40 <iot_send_status>
				iot_round_counter = 0;
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e077      	b.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x354>
			}else{
				iot_round_counter += 1;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e06f      	b.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x354>
			}
		}else{
			if((tim2_round_counter%3) == 0){
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e20:	0859      	lsrs	r1, r3, #1
 8000e22:	460b      	mov	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	440b      	add	r3, r1
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d14d      	bne.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x32c>
				if (selected_button != 0) {
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d046      	beq.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x328>
					if(displayToggle){
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x2b0>
						max7219_Turn_On();
 8000e44:	f001 f89c 	bl	8001f80 <max7219_Turn_On>
						displayToggle = false;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e03d      	b.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x32c>
					}else{
						max7219_Turn_Off();
 8000e50:	f001 f8a0 	bl	8001f94 <max7219_Turn_Off>
						displayToggle = true;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e037      	b.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x32c>
 8000e5c:	40000800 	.word	0x40000800
 8000e60:	200000fd 	.word	0x200000fd
 8000e64:	40010800 	.word	0x40010800
 8000e68:	08006744 	.word	0x08006744
 8000e6c:	2000031c 	.word	0x2000031c
 8000e70:	200000e8 	.word	0x200000e8
 8000e74:	200000fe 	.word	0x200000fe
 8000e78:	200001bc 	.word	0x200001bc
 8000e7c:	08006764 	.word	0x08006764
 8000e80:	200000e4 	.word	0x200000e4
 8000e84:	200000f0 	.word	0x200000f0
 8000e88:	200000e1 	.word	0x200000e1
 8000e8c:	20000294 	.word	0x20000294
 8000e90:	20000013 	.word	0x20000013
 8000e94:	20000014 	.word	0x20000014
 8000e98:	20000015 	.word	0x20000015
 8000e9c:	20000016 	.word	0x20000016
 8000ea0:	20000017 	.word	0x20000017
 8000ea4:	200000f8 	.word	0x200000f8
 8000ea8:	08006780 	.word	0x08006780
 8000eac:	200000fa 	.word	0x200000fa
 8000eb0:	0800679c 	.word	0x0800679c
 8000eb4:	200000ff 	.word	0x200000ff
 8000eb8:	080067c0 	.word	0x080067c0
 8000ebc:	20000100 	.word	0x20000100
 8000ec0:	aaaaaaab 	.word	0xaaaaaaab
 8000ec4:	2000000d 	.word	0x2000000d
					}
				}else{
					max7219_Turn_On();
 8000ec8:	f001 f85a 	bl	8001f80 <max7219_Turn_On>
				}
			}
			if(credit <= 0){
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d108      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x346>
				if((tim2_round_counter&2) == 0){
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x346>
					segment_display_standby();
 8000ee2:	f7ff fce7 	bl	80008b4 <segment_display_standby>
				}
			}

			tim2_round_counter += 1;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000ef2:	701a      	strb	r2, [r3, #0]

		}
	}
	if (htim->Instance == TIM1) { /// tick every 1000ms
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d136      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x3cc>
		stop_and_clear_tim1();
 8000efe:	f000 fe01 	bl	8001b04 <stop_and_clear_tim1>
		//		enable_all_exti_it();
		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM SW DEBOUNCE TICK!\r\n", 23, HAL_MAX_DELAY);
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	2217      	movs	r2, #23
 8000f08:	491d      	ldr	r1, [pc, #116]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8000f0a:	481e      	ldr	r0, [pc, #120]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8000f0c:	f004 fdb5 	bl	8005a7a <HAL_UART_Transmit>
		char tmp[25];
		sprintf(tmp, "selected mode %d \r\n", (unsigned int) selected_button);
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f1c:	491b      	ldr	r1, [pc, #108]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 ff48 	bl	8005db4 <siprintf>
		reset_all_output();
 8000f24:	f7ff fc0e 	bl	8000744 <reset_all_output>
		set_output_to(selected_button);
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fc32 	bl	8000798 <set_output_to>
		iot_send_mode(selected_button);
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fdc6 	bl	8000acc <iot_send_mode>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp, strlen(tmp), HAL_MAX_DELAY);
 8000f40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f901 	bl	800014c <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8000f58:	f004 fd8f 	bl	8005a7a <HAL_UART_Transmit>
		if(selected_menu <= 0){
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x3cc>
			HAL_TIM_Base_Start_IT(&htim2);
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8000f68:	f003 fe02 	bl	8004b70 <HAL_TIM_Base_Start_IT>
		}

	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3760      	adds	r7, #96	; 0x60
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000e4 	.word	0x200000e4
 8000f78:	200000ff 	.word	0x200000ff
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	080067d0 	.word	0x080067d0
 8000f84:	2000031c 	.word	0x2000031c
 8000f88:	200000e8 	.word	0x200000e8
 8000f8c:	080067e8 	.word	0x080067e8
 8000f90:	200000e1 	.word	0x200000e1
 8000f94:	20000294 	.word	0x20000294

08000f98 <disable_all_exti_it>:
void disable_all_exti_it(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000f9c:	2008      	movs	r0, #8
 8000f9e:	f001 ffd8 	bl	8002f52 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000fa2:	2009      	movs	r0, #9
 8000fa4:	f001 ffd5 	bl	8002f52 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 ffd2 	bl	8002f52 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000fae:	2017      	movs	r0, #23
 8000fb0:	f001 ffcf 	bl	8002f52 <HAL_NVIC_DisableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <enable_all_exti_it>:
void enable_all_exti_it(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	f001 ffe2 	bl	8002f86 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000fc2:	2009      	movs	r0, #9
 8000fc4:	f001 ffdf 	bl	8002f86 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f001 ffdc 	bl	8002f86 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000fce:	2017      	movs	r0, #23
 8000fd0:	f001 ffd9 	bl	8002f86 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fd4:	2008      	movs	r0, #8
 8000fd6:	f001 ffae 	bl	8002f36 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fda:	2009      	movs	r0, #9
 8000fdc:	f001 ffab 	bl	8002f36 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f001 ffa8 	bl	8002f36 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fe6:	2017      	movs	r0, #23
 8000fe8:	f001 ffa5 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b0b0      	sub	sp, #192	; 0xc0
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	disable_all_exti_it();
 8000ffa:	f7ff ffcd 	bl	8000f98 <disable_all_exti_it>
	char message_sw2[] = "Switch [2] pressed!\r\n";
 8000ffe:	4bb5      	ldr	r3, [pc, #724]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001000:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8001004:	461d      	mov	r5, r3
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800100e:	6020      	str	r0, [r4, #0]
 8001010:	3404      	adds	r4, #4
 8001012:	8021      	strh	r1, [r4, #0]
	char message_sw3[] = "FRONT SW [1] pressed!\r\n";
 8001014:	4bb0      	ldr	r3, [pc, #704]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001016:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800101a:	461d      	mov	r5, r3
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001024:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw4[] = "FRONT SW [2] pressed!\r\n";
 8001028:	4bac      	ldr	r3, [pc, #688]	; (80012dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 800102a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001038:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw5[] = "FRONT SW [3] pressed!\r\n";
 800103c:	4ba8      	ldr	r3, [pc, #672]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800103e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104c:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw6[] = "FRONT SW [4] pressed!\r\n";
 8001050:	4ba4      	ldr	r3, [pc, #656]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001052:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001060:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw7[] = "FRONT SW [5] pressed!\r\n";
 8001064:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001066:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800106a:	461d      	mov	r5, r3
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001070:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001074:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t tickstart = HAL_GetTick();
 8001078:	f001 fde2 	bl	8002c40 <HAL_GetTick>
 800107c:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	char tick_msg[35];
	sprintf(tick_msg,"---- sysTick : %d\r\n",tickstart);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001088:	4998      	ldr	r1, [pc, #608]	; (80012ec <HAL_GPIO_EXTI_Callback+0x2fc>)
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fe92 	bl	8005db4 <siprintf>
	if( (tickstart - lastTimePress)<=50){
 8001090:	4b97      	ldr	r3, [pc, #604]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x300>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b32      	cmp	r3, #50	; 0x32
 800109c:	d809      	bhi.n	80010b2 <HAL_GPIO_EXTI_Callback+0xc2>
		HAL_UART_Transmit(&huart1,"too many times press !!!!\r\n", 27,HAL_MAX_DELAY);
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	221b      	movs	r2, #27
 80010a4:	4993      	ldr	r1, [pc, #588]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x304>)
 80010a6:	4894      	ldr	r0, [pc, #592]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x308>)
 80010a8:	f004 fce7 	bl	8005a7a <HAL_UART_Transmit>
		enable_all_exti_it();
 80010ac:	f7ff ff84 	bl	8000fb8 <enable_all_exti_it>
 80010b0:	e196      	b.n	80013e0 <HAL_GPIO_EXTI_Callback+0x3f0>
		return;
	}else{
		lastTimePress = tickstart;
 80010b2:	4a8f      	ldr	r2, [pc, #572]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x300>)
 80010b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80010b8:	6013      	str	r3, [r2, #0]
	}
	max7219_DisableDisplayTest();
 80010ba:	f000 ff0a 	bl	8001ed2 <max7219_DisableDisplayTest>
	HAL_UART_Transmit(&huart1, (uint8_t*)tick_msg, strlen(tick_msg),
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f842 	bl	800014c <strlen>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	f107 0108 	add.w	r1, r7, #8
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	4888      	ldr	r0, [pc, #544]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x308>)
 80010d6:	f004 fcd0 	bl	8005a7a <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	if (GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d131      	bne.n	8001144 <HAL_GPIO_EXTI_Callback+0x154>
 80010e0:	2104      	movs	r1, #4
 80010e2:	4886      	ldr	r0, [pc, #536]	; (80012fc <HAL_GPIO_EXTI_Callback+0x30c>)
 80010e4:	f002 f8e2 	bl	80032ac <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d12a      	bne.n	8001144 <HAL_GPIO_EXTI_Callback+0x154>
		enable_all_exti_it();
 80010ee:	f7ff ff63 	bl	8000fb8 <enable_all_exti_it>
		HAL_TIM_Base_Stop_IT(&htim2);
 80010f2:	4883      	ldr	r0, [pc, #524]	; (8001300 <HAL_GPIO_EXTI_Callback+0x310>)
 80010f4:	f003 fd8e 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_sw2, strlen(message_sw2),
 80010f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f825 	bl	800014c <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	487a      	ldr	r0, [pc, #488]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8001110:	f004 fcb3 	bl	8005a7a <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		selected_menu += 1;
 8001114:	4b7b      	ldr	r3, [pc, #492]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	3301      	adds	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b79      	ldr	r3, [pc, #484]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 8001120:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8001122:	4879      	ldr	r0, [pc, #484]	; (8001308 <HAL_GPIO_EXTI_Callback+0x318>)
 8001124:	f003 fd24 	bl	8004b70 <HAL_TIM_Base_Start_IT>
		if (selected_menu > 5) {
 8001128:	4b76      	ldr	r3, [pc, #472]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b05      	cmp	r3, #5
 8001130:	d908      	bls.n	8001144 <HAL_GPIO_EXTI_Callback+0x154>
			selected_menu = 0;
 8001132:	4b74      	ldr	r3, [pc, #464]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 8001138:	4873      	ldr	r0, [pc, #460]	; (8001308 <HAL_GPIO_EXTI_Callback+0x318>)
 800113a:	f003 fd6b 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 800113e:	4870      	ldr	r0, [pc, #448]	; (8001300 <HAL_GPIO_EXTI_Callback+0x310>)
 8001140:	f003 fd16 	bl	8004b70 <HAL_TIM_Base_Start_IT>
		}
	}
	if(selected_menu > 0){
 8001144:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01c      	beq.n	8001188 <HAL_GPIO_EXTI_Callback+0x198>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800114e:	2108      	movs	r1, #8
 8001150:	486a      	ldr	r0, [pc, #424]	; (80012fc <HAL_GPIO_EXTI_Callback+0x30c>)
 8001152:	f002 f8ab 	bl	80032ac <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d106      	bne.n	800116a <HAL_GPIO_EXTI_Callback+0x17a>
			set_add_duration_of_function(selected_menu);
 800115c:	4b69      	ldr	r3, [pc, #420]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f998 	bl	8001498 <set_add_duration_of_function>
 8001168:	e135      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 800116a:	2110      	movs	r1, #16
 800116c:	4863      	ldr	r0, [pc, #396]	; (80012fc <HAL_GPIO_EXTI_Callback+0x30c>)
 800116e:	f002 f89d 	bl	80032ac <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	f040 812e 	bne.w	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
			set_substract_duration_of_function(selected_menu);
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <HAL_GPIO_EXTI_Callback+0x314>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fa21 	bl	80015c8 <set_substract_duration_of_function>
 8001186:	e126      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
		}
	}
	else if (system_function_start) {
 8001188:	4b60      	ldr	r3, [pc, #384]	; (800130c <HAL_GPIO_EXTI_Callback+0x31c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8116 	beq.w	80013c0 <HAL_GPIO_EXTI_Callback+0x3d0>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001194:	485a      	ldr	r0, [pc, #360]	; (8001300 <HAL_GPIO_EXTI_Callback+0x310>)
 8001196:	f003 fd3d 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 800119a:	485d      	ldr	r0, [pc, #372]	; (8001310 <HAL_GPIO_EXTI_Callback+0x320>)
 800119c:	f003 fd3a 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011a0:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_GPIO_EXTI_Callback+0x320>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80011a8:	4b55      	ldr	r3, [pc, #340]	; (8001300 <HAL_GPIO_EXTI_Callback+0x310>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
		displayToggle = true;
 80011b0:	4b58      	ldr	r3, [pc, #352]	; (8001314 <HAL_GPIO_EXTI_Callback+0x324>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		max7219_Turn_On();
 80011b6:	f000 fee3 	bl	8001f80 <max7219_Turn_On>
		switch (GPIO_Pin) {
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b80      	cmp	r3, #128	; 0x80
 80011be:	f000 80d3 	beq.w	8001368 <HAL_GPIO_EXTI_Callback+0x378>
 80011c2:	2b80      	cmp	r3, #128	; 0x80
 80011c4:	f300 8107 	bgt.w	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
 80011c8:	2b40      	cmp	r3, #64	; 0x40
 80011ca:	f000 80a7 	beq.w	800131c <HAL_GPIO_EXTI_Callback+0x32c>
 80011ce:	2b40      	cmp	r3, #64	; 0x40
 80011d0:	f300 8101 	bgt.w	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d055      	beq.n	8001284 <HAL_GPIO_EXTI_Callback+0x294>
 80011d8:	2b20      	cmp	r3, #32
 80011da:	f300 80fc 	bgt.w	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d002      	beq.n	80011e8 <HAL_GPIO_EXTI_Callback+0x1f8>
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d027      	beq.n	8001236 <HAL_GPIO_EXTI_Callback+0x246>
 80011e6:	e0f6      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
		case GPIO_PIN_3:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80011e8:	2108      	movs	r1, #8
 80011ea:	4844      	ldr	r0, [pc, #272]	; (80012fc <HAL_GPIO_EXTI_Callback+0x30c>)
 80011ec:	f002 f85e 	bl	80032ac <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	f040 80e6 	bne.w	80013c4 <HAL_GPIO_EXTI_Callback+0x3d4>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw3, strlen(message_sw3),
 80011f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7fe ffa5 	bl	800014c <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	483a      	ldr	r0, [pc, #232]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8001210:	f004 fc33 	bl	8005a7a <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 3) {
 8001214:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b03      	cmp	r3, #3
 800121c:	d105      	bne.n	800122a <HAL_GPIO_EXTI_Callback+0x23a>
					selected_button = 0;
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001224:	f7ff fa8e 	bl	8000744 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 3;
				}
			}
			break;
 8001228:	e0cc      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x3d4>
					reset_all_output();
 800122a:	f7ff fa8b 	bl	8000744 <reset_all_output>
					selected_button = 3;
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 8001230:	2203      	movs	r2, #3
 8001232:	701a      	strb	r2, [r3, #0]
			break;
 8001234:	e0c6      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x3d4>
		case GPIO_PIN_4:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 8001236:	2110      	movs	r1, #16
 8001238:	4830      	ldr	r0, [pc, #192]	; (80012fc <HAL_GPIO_EXTI_Callback+0x30c>)
 800123a:	f002 f837 	bl	80032ac <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	f040 80c1 	bne.w	80013c8 <HAL_GPIO_EXTI_Callback+0x3d8>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw4, strlen(message_sw3),
 8001246:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800124a:	4618      	mov	r0, r3
 800124c:	f7fe ff7e 	bl	800014c <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	4826      	ldr	r0, [pc, #152]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x308>)
 800125e:	f004 fc0c 	bl	8005a7a <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 4) {
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b04      	cmp	r3, #4
 800126a:	d105      	bne.n	8001278 <HAL_GPIO_EXTI_Callback+0x288>
					selected_button = 0;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001272:	f7ff fa67 	bl	8000744 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 4;
				}
			}
			break;
 8001276:	e0a7      	b.n	80013c8 <HAL_GPIO_EXTI_Callback+0x3d8>
					reset_all_output();
 8001278:	f7ff fa64 	bl	8000744 <reset_all_output>
					selected_button = 4;
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 800127e:	2204      	movs	r2, #4
 8001280:	701a      	strb	r2, [r3, #0]
			break;
 8001282:	e0a1      	b.n	80013c8 <HAL_GPIO_EXTI_Callback+0x3d8>
		case GPIO_PIN_5:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 8001284:	2120      	movs	r1, #32
 8001286:	481d      	ldr	r0, [pc, #116]	; (80012fc <HAL_GPIO_EXTI_Callback+0x30c>)
 8001288:	f002 f810 	bl	80032ac <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	f040 809c 	bne.w	80013cc <HAL_GPIO_EXTI_Callback+0x3dc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw5, strlen(message_sw3),
 8001294:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ff57 	bl	800014c <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x308>)
 80012ac:	f004 fbe5 	bl	8005a7a <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 5) {
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d105      	bne.n	80012c6 <HAL_GPIO_EXTI_Callback+0x2d6>
					selected_button = 0;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 80012c0:	f7ff fa40 	bl	8000744 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 5;
				}
			}
			break;
 80012c4:	e082      	b.n	80013cc <HAL_GPIO_EXTI_Callback+0x3dc>
					reset_all_output();
 80012c6:	f7ff fa3d 	bl	8000744 <reset_all_output>
					selected_button = 5;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_GPIO_EXTI_Callback+0x328>)
 80012cc:	2205      	movs	r2, #5
 80012ce:	701a      	strb	r2, [r3, #0]
			break;
 80012d0:	e07c      	b.n	80013cc <HAL_GPIO_EXTI_Callback+0x3dc>
 80012d2:	bf00      	nop
 80012d4:	0800682c 	.word	0x0800682c
 80012d8:	08006844 	.word	0x08006844
 80012dc:	0800685c 	.word	0x0800685c
 80012e0:	08006874 	.word	0x08006874
 80012e4:	0800688c 	.word	0x0800688c
 80012e8:	080068a4 	.word	0x080068a4
 80012ec:	080067fc 	.word	0x080067fc
 80012f0:	200000f4 	.word	0x200000f4
 80012f4:	08006810 	.word	0x08006810
 80012f8:	2000031c 	.word	0x2000031c
 80012fc:	40010800 	.word	0x40010800
 8001300:	20000294 	.word	0x20000294
 8001304:	200000e1 	.word	0x200000e1
 8001308:	200001bc 	.word	0x200001bc
 800130c:	200000f0 	.word	0x200000f0
 8001310:	2000024c 	.word	0x2000024c
 8001314:	2000000d 	.word	0x2000000d
 8001318:	200000e8 	.word	0x200000e8
		case GPIO_PIN_6:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	4832      	ldr	r0, [pc, #200]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8001320:	f001 ffc4 	bl	80032ac <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d152      	bne.n	80013d0 <HAL_GPIO_EXTI_Callback+0x3e0>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw6, strlen(message_sw3),
 800132a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff0c 	bl	800014c <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	482a      	ldr	r0, [pc, #168]	; (80013ec <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001342:	f004 fb9a 	bl	8005a7a <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 6) {
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x400>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b06      	cmp	r3, #6
 800134e:	d105      	bne.n	800135c <HAL_GPIO_EXTI_Callback+0x36c>
					reset_all_output();
 8001350:	f7ff f9f8 	bl	8000744 <reset_all_output>
					selected_button = 0;
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x400>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
				} else {
					reset_all_output();
					selected_button = 6;
				}
			}
			break;
 800135a:	e039      	b.n	80013d0 <HAL_GPIO_EXTI_Callback+0x3e0>
					reset_all_output();
 800135c:	f7ff f9f2 	bl	8000744 <reset_all_output>
					selected_button = 6;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x400>)
 8001362:	2206      	movs	r2, #6
 8001364:	701a      	strb	r2, [r3, #0]
			break;
 8001366:	e033      	b.n	80013d0 <HAL_GPIO_EXTI_Callback+0x3e0>
		case GPIO_PIN_7:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) {
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x3f8>)
 800136c:	f001 ff9e 	bl	80032ac <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d12e      	bne.n	80013d4 <HAL_GPIO_EXTI_Callback+0x3e4>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw7, strlen(message_sw3),
 8001376:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe fee6 	bl	800014c <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <HAL_GPIO_EXTI_Callback+0x3fc>)
 800138e:	f004 fb74 	bl	8005a7a <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 7) {
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x400>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b07      	cmp	r3, #7
 800139a:	d10b      	bne.n	80013b4 <HAL_GPIO_EXTI_Callback+0x3c4>
					selected_button = 0;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x400>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 80013a2:	f7ff f9cf 	bl	8000744 <reset_all_output>
					clearButton = true;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x404>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim4);
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x408>)
 80013ae:	f003 fbdf 	bl	8004b70 <HAL_TIM_Base_Start_IT>
				} else {
					reset_all_output();
					selected_button = 7;
				}
			}
			break;
 80013b2:	e00f      	b.n	80013d4 <HAL_GPIO_EXTI_Callback+0x3e4>
					reset_all_output();
 80013b4:	f7ff f9c6 	bl	8000744 <reset_all_output>
					selected_button = 7;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x400>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	701a      	strb	r2, [r3, #0]
			break;
 80013be:	e009      	b.n	80013d4 <HAL_GPIO_EXTI_Callback+0x3e4>
		}
	}
 80013c0:	bf00      	nop
 80013c2:	e008      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
			break;
 80013c4:	bf00      	nop
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
			break;
 80013c8:	bf00      	nop
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
			break;
 80013cc:	bf00      	nop
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
			break;
 80013d0:	bf00      	nop
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x3e6>
			break;
 80013d4:	bf00      	nop
	//	uint32_t i = 100000;
	//	while (i-- > 0) {
	//		asm("nop");
	//	}
	enable_all_exti_it();
 80013d6:	f7ff fdef 	bl	8000fb8 <enable_all_exti_it>
	HAL_TIM_Base_Start_IT(&htim1);
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <HAL_GPIO_EXTI_Callback+0x40c>)
 80013dc:	f003 fbc8 	bl	8004b70 <HAL_TIM_Base_Start_IT>
}
 80013e0:	37c0      	adds	r7, #192	; 0xc0
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010800 	.word	0x40010800
 80013ec:	2000031c 	.word	0x2000031c
 80013f0:	200000e8 	.word	0x200000e8
 80013f4:	200000fd 	.word	0x200000fd
 80013f8:	200001bc 	.word	0x200001bc
 80013fc:	2000024c 	.word	0x2000024c

08001400 <eeprom_write>:
void eeprom_write(uint8_t addr, uint8_t data){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	460a      	mov	r2, r1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	4613      	mov	r3, r2
 800140e:	71bb      	strb	r3, [r7, #6]
	 *   0x05   |  F5_DURATION
	 *
	 *	 0x06   |  credit
	 *
	 * */
	switch(addr){
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	3b01      	subs	r3, #1
 8001414:	2b05      	cmp	r3, #5
 8001416:	d839      	bhi.n	800148c <eeprom_write+0x8c>
 8001418:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <eeprom_write+0x20>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001439 	.word	0x08001439
 8001424:	08001447 	.word	0x08001447
 8001428:	08001455 	.word	0x08001455
 800142c:	08001463 	.word	0x08001463
 8001430:	08001471 	.word	0x08001471
 8001434:	0800147f 	.word	0x0800147f
	case 0x01:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	461a      	mov	r2, r3
 800143c:	2101      	movs	r1, #1
 800143e:	4815      	ldr	r0, [pc, #84]	; (8001494 <eeprom_write+0x94>)
 8001440:	f003 f8aa 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		break;
 8001444:	e022      	b.n	800148c <eeprom_write+0x8c>
	case 0x02:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, data);
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	461a      	mov	r2, r3
 800144a:	2102      	movs	r1, #2
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <eeprom_write+0x94>)
 800144e:	f003 f8a3 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		break;
 8001452:	e01b      	b.n	800148c <eeprom_write+0x8c>
	case 0x03:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, data);
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	461a      	mov	r2, r3
 8001458:	2103      	movs	r1, #3
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <eeprom_write+0x94>)
 800145c:	f003 f89c 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		break;
 8001460:	e014      	b.n	800148c <eeprom_write+0x8c>
	case 0x04:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	461a      	mov	r2, r3
 8001466:	2104      	movs	r1, #4
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <eeprom_write+0x94>)
 800146a:	f003 f895 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		break;
 800146e:	e00d      	b.n	800148c <eeprom_write+0x8c>
	case 0x05:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, data);
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	461a      	mov	r2, r3
 8001474:	2105      	movs	r1, #5
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <eeprom_write+0x94>)
 8001478:	f003 f88e 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		break;
 800147c:	e006      	b.n	800148c <eeprom_write+0x8c>
	case 0x06:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, data);
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	461a      	mov	r2, r3
 8001482:	2106      	movs	r1, #6
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <eeprom_write+0x94>)
 8001486:	f003 f887 	bl	8004598 <HAL_RTCEx_BKUPWrite>
		break;
 800148a:	bf00      	nop
	}

}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000150 	.word	0x20000150

08001498 <set_add_duration_of_function>:
//uint8_t eeprom_read(uint8_t addr){
//	uint8_t recv_data;
//	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 0xFF, &recv_data, 1, HAL_MAX_DELAY);
//}
void set_add_duration_of_function(uint8_t _selected_menu){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d075      	beq.n	8001594 <set_add_duration_of_function+0xfc>
		switch (_selected_menu) {
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d87c      	bhi.n	80015aa <set_add_duration_of_function+0x112>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <set_add_duration_of_function+0x20>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014cd 	.word	0x080014cd
 80014bc:	080014f5 	.word	0x080014f5
 80014c0:	0800151d 	.word	0x0800151d
 80014c4:	08001545 	.word	0x08001545
 80014c8:	0800156d 	.word	0x0800156d
		case 1:
			if(F1_DURATION < 99){
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <set_add_duration_of_function+0x11c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b62      	cmp	r3, #98	; 0x62
 80014d4:	d860      	bhi.n	8001598 <set_add_duration_of_function+0x100>
				F1_DURATION += 1;
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <set_add_duration_of_function+0x11c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <set_add_duration_of_function+0x11c>)
 80014e2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <set_add_duration_of_function+0x11c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff ff87 	bl	8001400 <eeprom_write>
			}
			break;
 80014f2:	e051      	b.n	8001598 <set_add_duration_of_function+0x100>
		case 2:
			if(F2_DURATION < 99){
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <set_add_duration_of_function+0x120>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b62      	cmp	r3, #98	; 0x62
 80014fc:	d84e      	bhi.n	800159c <set_add_duration_of_function+0x104>
				F2_DURATION += 1;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <set_add_duration_of_function+0x120>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <set_add_duration_of_function+0x120>)
 800150a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <set_add_duration_of_function+0x120>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff ff73 	bl	8001400 <eeprom_write>
			}
			break;
 800151a:	e03f      	b.n	800159c <set_add_duration_of_function+0x104>
		case 3:
			if(F3_DURATION < 99){
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <set_add_duration_of_function+0x124>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b62      	cmp	r3, #98	; 0x62
 8001524:	d83c      	bhi.n	80015a0 <set_add_duration_of_function+0x108>
				F3_DURATION += 1;
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <set_add_duration_of_function+0x124>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <set_add_duration_of_function+0x124>)
 8001532:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <set_add_duration_of_function+0x124>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	2003      	movs	r0, #3
 800153e:	f7ff ff5f 	bl	8001400 <eeprom_write>
			}
			break;
 8001542:	e02d      	b.n	80015a0 <set_add_duration_of_function+0x108>
		case 4:
			if(F4_DURATION < 99){
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <set_add_duration_of_function+0x128>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b62      	cmp	r3, #98	; 0x62
 800154c:	d82a      	bhi.n	80015a4 <set_add_duration_of_function+0x10c>
				F4_DURATION += 1;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <set_add_duration_of_function+0x128>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <set_add_duration_of_function+0x128>)
 800155a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <set_add_duration_of_function+0x128>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	2004      	movs	r0, #4
 8001566:	f7ff ff4b 	bl	8001400 <eeprom_write>
			}
			break;
 800156a:	e01b      	b.n	80015a4 <set_add_duration_of_function+0x10c>
		case 5:
			if(F5_DURATION < 99){
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <set_add_duration_of_function+0x12c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b62      	cmp	r3, #98	; 0x62
 8001574:	d818      	bhi.n	80015a8 <set_add_duration_of_function+0x110>
				F5_DURATION += 1;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <set_add_duration_of_function+0x12c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <set_add_duration_of_function+0x12c>)
 8001582:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <set_add_duration_of_function+0x12c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	2005      	movs	r0, #5
 800158e:	f7ff ff37 	bl	8001400 <eeprom_write>
			}
			break;
 8001592:	e009      	b.n	80015a8 <set_add_duration_of_function+0x110>
		}
	}
 8001594:	bf00      	nop
 8001596:	e008      	b.n	80015aa <set_add_duration_of_function+0x112>
			break;
 8001598:	bf00      	nop
 800159a:	e006      	b.n	80015aa <set_add_duration_of_function+0x112>
			break;
 800159c:	bf00      	nop
 800159e:	e004      	b.n	80015aa <set_add_duration_of_function+0x112>
			break;
 80015a0:	bf00      	nop
 80015a2:	e002      	b.n	80015aa <set_add_duration_of_function+0x112>
			break;
 80015a4:	bf00      	nop
 80015a6:	e000      	b.n	80015aa <set_add_duration_of_function+0x112>
			break;
 80015a8:	bf00      	nop
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000013 	.word	0x20000013
 80015b8:	20000014 	.word	0x20000014
 80015bc:	20000015 	.word	0x20000015
 80015c0:	20000016 	.word	0x20000016
 80015c4:	20000017 	.word	0x20000017

080015c8 <set_substract_duration_of_function>:

void set_substract_duration_of_function(uint8_t _selected_menu){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d075      	beq.n	80016c4 <set_substract_duration_of_function+0xfc>
		switch (_selected_menu) {
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	3b01      	subs	r3, #1
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d87c      	bhi.n	80016da <set_substract_duration_of_function+0x112>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <set_substract_duration_of_function+0x20>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	080015fd 	.word	0x080015fd
 80015ec:	08001625 	.word	0x08001625
 80015f0:	0800164d 	.word	0x0800164d
 80015f4:	08001675 	.word	0x08001675
 80015f8:	0800169d 	.word	0x0800169d
		case 1:
			if(F1_DURATION >0){
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <set_substract_duration_of_function+0x11c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d060      	beq.n	80016c8 <set_substract_duration_of_function+0x100>
				F1_DURATION -= 1;
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <set_substract_duration_of_function+0x11c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <set_substract_duration_of_function+0x11c>)
 8001612:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <set_substract_duration_of_function+0x11c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4619      	mov	r1, r3
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff feef 	bl	8001400 <eeprom_write>
			}
			break;
 8001622:	e051      	b.n	80016c8 <set_substract_duration_of_function+0x100>
		case 2:
			if(F2_DURATION >0){
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <set_substract_duration_of_function+0x120>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d04e      	beq.n	80016cc <set_substract_duration_of_function+0x104>
				F2_DURATION -= 1;
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <set_substract_duration_of_function+0x120>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <set_substract_duration_of_function+0x120>)
 800163a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <set_substract_duration_of_function+0x120>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	2002      	movs	r0, #2
 8001646:	f7ff fedb 	bl	8001400 <eeprom_write>
			}
			break;
 800164a:	e03f      	b.n	80016cc <set_substract_duration_of_function+0x104>
		case 3:
			if(F3_DURATION >0){
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <set_substract_duration_of_function+0x124>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d03c      	beq.n	80016d0 <set_substract_duration_of_function+0x108>
				F3_DURATION -= 1;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <set_substract_duration_of_function+0x124>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <set_substract_duration_of_function+0x124>)
 8001662:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <set_substract_duration_of_function+0x124>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	2003      	movs	r0, #3
 800166e:	f7ff fec7 	bl	8001400 <eeprom_write>
			}
			break;
 8001672:	e02d      	b.n	80016d0 <set_substract_duration_of_function+0x108>
		case 4:
			if(F4_DURATION >0){
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <set_substract_duration_of_function+0x128>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02a      	beq.n	80016d4 <set_substract_duration_of_function+0x10c>
				F4_DURATION -= 1;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <set_substract_duration_of_function+0x128>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <set_substract_duration_of_function+0x128>)
 800168a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <set_substract_duration_of_function+0x128>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	2004      	movs	r0, #4
 8001696:	f7ff feb3 	bl	8001400 <eeprom_write>
			}
			break;
 800169a:	e01b      	b.n	80016d4 <set_substract_duration_of_function+0x10c>
		case 5:
			if(F5_DURATION >0){
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <set_substract_duration_of_function+0x12c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d018      	beq.n	80016d8 <set_substract_duration_of_function+0x110>
				F5_DURATION -= 1;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <set_substract_duration_of_function+0x12c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <set_substract_duration_of_function+0x12c>)
 80016b2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <set_substract_duration_of_function+0x12c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	2005      	movs	r0, #5
 80016be:	f7ff fe9f 	bl	8001400 <eeprom_write>
			}
			break;
 80016c2:	e009      	b.n	80016d8 <set_substract_duration_of_function+0x110>
		}
	}
 80016c4:	bf00      	nop
 80016c6:	e008      	b.n	80016da <set_substract_duration_of_function+0x112>
			break;
 80016c8:	bf00      	nop
 80016ca:	e006      	b.n	80016da <set_substract_duration_of_function+0x112>
			break;
 80016cc:	bf00      	nop
 80016ce:	e004      	b.n	80016da <set_substract_duration_of_function+0x112>
			break;
 80016d0:	bf00      	nop
 80016d2:	e002      	b.n	80016da <set_substract_duration_of_function+0x112>
			break;
 80016d4:	bf00      	nop
 80016d6:	e000      	b.n	80016da <set_substract_duration_of_function+0x112>
			break;
 80016d8:	bf00      	nop
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000013 	.word	0x20000013
 80016e8:	20000014 	.word	0x20000014
 80016ec:	20000015 	.word	0x20000015
 80016f0:	20000016 	.word	0x20000016
 80016f4:	20000017 	.word	0x20000017

080016f8 <add_coin_credit>:
void add_coin_credit(uint32_t pulse_width) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	; 0x50
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	max7219_DisableDisplayTest();
 8001700:	f000 fbe7 	bl	8001ed2 <max7219_DisableDisplayTest>
	if (pulse_width <= (coin_acceptor_pulse_width + creditPulseOffset)
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <add_coin_credit+0xf0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <add_coin_credit+0xf4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4413      	add	r3, r2
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4293      	cmp	r3, r2
 8001718:	d84b      	bhi.n	80017b2 <add_coin_credit+0xba>
			&& (pulse_width
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <add_coin_credit+0xf0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <add_coin_credit+0xf4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	461a      	mov	r2, r3
			&& (pulse_width
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4293      	cmp	r3, r2
 800172e:	d340      	bcc.n	80017b2 <add_coin_credit+0xba>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <add_coin_credit+0xf8>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	492d      	ldr	r1, [pc, #180]	; (80017f4 <add_coin_credit+0xfc>)
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fb38 	bl	8005db4 <siprintf>
				(int)coin_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fcff 	bl	800014c <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	4827      	ldr	r0, [pc, #156]	; (80017f8 <add_coin_credit+0x100>)
 800175c:	f004 f98d 	bl	8005a7a <HAL_UART_Transmit>
		credit += coin_credit_per_pulse;
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <add_coin_credit+0xf8>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <add_coin_credit+0x104>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4413      	add	r3, r2
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <add_coin_credit+0x104>)
 8001770:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <add_coin_credit+0x104>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f240 32e6 	movw	r2, #998	; 0x3e6
 800177a:	4293      	cmp	r3, r2
 800177c:	d903      	bls.n	8001786 <add_coin_credit+0x8e>
			credit = 999;
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <add_coin_credit+0x104>)
 8001780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001784:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <add_coin_credit+0x104>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f848 	bl	8000820 <segment_display_int>

		if (credit >= minimum_credit_to_start) {
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <add_coin_credit+0x104>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <add_coin_credit+0x108>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4293      	cmp	r3, r2
 800179a:	d320      	bcc.n	80017de <add_coin_credit+0xe6>
			system_function_start = true;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <add_coin_credit+0x10c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	2219      	movs	r2, #25
 80017a8:	4917      	ldr	r1, [pc, #92]	; (8001808 <add_coin_credit+0x110>)
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <add_coin_credit+0x100>)
 80017ac:	f004 f965 	bl	8005a7a <HAL_UART_Transmit>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 80017b0:	e015      	b.n	80017de <add_coin_credit+0xe6>
					HAL_MAX_DELAY);
		}
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b8:	4914      	ldr	r1, [pc, #80]	; (800180c <add_coin_credit+0x114>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 fafa 	bl	8005db4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 80017c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fcc1 	bl	800014c <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <add_coin_credit+0x100>)
 80017d8:	f004 f94f 	bl	8005a7a <HAL_UART_Transmit>
	}
}
 80017dc:	e000      	b.n	80017e0 <add_coin_credit+0xe8>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 80017de:	bf00      	nop
}
 80017e0:	bf00      	nop
 80017e2:	3750      	adds	r7, #80	; 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000000f 	.word	0x2000000f
 80017ec:	20000010 	.word	0x20000010
 80017f0:	20000012 	.word	0x20000012
 80017f4:	080068bc 	.word	0x080068bc
 80017f8:	2000031c 	.word	0x2000031c
 80017fc:	200000e4 	.word	0x200000e4
 8001800:	20000004 	.word	0x20000004
 8001804:	200000f0 	.word	0x200000f0
 8001808:	080068d4 	.word	0x080068d4
 800180c:	080068f0 	.word	0x080068f0

08001810 <add_bank_note_credit>:
void add_bank_note_credit(uint32_t pulse_width) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b09e      	sub	sp, #120	; 0x78
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	max7219_DisableDisplayTest();
 8001818:	f000 fb5b 	bl	8001ed2 <max7219_DisableDisplayTest>
	if (pulse_width <= bank_acceptor_pulse_width + creditPulseOffset
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <add_bank_note_credit+0x11c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <add_bank_note_credit+0x120>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4413      	add	r3, r2
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4293      	cmp	r3, r2
 8001830:	d862      	bhi.n	80018f8 <add_bank_note_credit+0xe8>
			&& pulse_width
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <add_bank_note_credit+0x11c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <add_bank_note_credit+0x120>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	461a      	mov	r2, r3
			&& pulse_width
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4293      	cmp	r3, r2
 8001846:	d357      	bcc.n	80018f8 <add_bank_note_credit+0xe8>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 8001848:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <add_bank_note_credit+0x124>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001854:	4938      	ldr	r1, [pc, #224]	; (8001938 <add_bank_note_credit+0x128>)
 8001856:	4618      	mov	r0, r3
 8001858:	f004 faac 	bl	8005db4 <siprintf>
				bank_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800185c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fc73 	bl	800014c <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	4832      	ldr	r0, [pc, #200]	; (800193c <add_bank_note_credit+0x12c>)
 8001874:	f004 f901 	bl	8005a7a <HAL_UART_Transmit>
		credit += bank_credit_per_pulse;
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <add_bank_note_credit+0x124>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <add_bank_note_credit+0x130>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4413      	add	r3, r2
 8001886:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <add_bank_note_credit+0x130>)
 8001888:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <add_bank_note_credit+0x130>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001892:	4293      	cmp	r3, r2
 8001894:	d903      	bls.n	800189e <add_bank_note_credit+0x8e>
			credit = 999;
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <add_bank_note_credit+0x130>)
 8001898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189c:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <add_bank_note_credit+0x130>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ffbc 	bl	8000820 <segment_display_int>
		if (credit >= minimum_credit_to_start) {
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <add_bank_note_credit+0x130>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a25      	ldr	r2, [pc, #148]	; (8001944 <add_bank_note_credit+0x134>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d309      	bcc.n	80018c8 <add_bank_note_credit+0xb8>
			system_function_start = true;
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <add_bank_note_credit+0x138>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	2219      	movs	r2, #25
 80018c0:	4922      	ldr	r1, [pc, #136]	; (800194c <add_bank_note_credit+0x13c>)
 80018c2:	481e      	ldr	r0, [pc, #120]	; (800193c <add_bank_note_credit+0x12c>)
 80018c4:	f004 f8d9 	bl	8005a7a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		char tmp_msg2[35];
		sprintf(tmp_msg2, "current credit : %d \r\n", (int)credit);
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <add_bank_note_credit+0x130>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	491f      	ldr	r1, [pc, #124]	; (8001950 <add_bank_note_credit+0x140>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 fa6d 	bl	8005db4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg2, strlen(tmp_msg2),
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fc34 	bl	800014c <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	4812      	ldr	r0, [pc, #72]	; (800193c <add_bank_note_credit+0x12c>)
 80018f2:	f004 f8c2 	bl	8005a7a <HAL_UART_Transmit>
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 80018f6:	e015      	b.n	8001924 <add_bank_note_credit+0x114>
				HAL_MAX_DELAY);
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018fe:	4915      	ldr	r1, [pc, #84]	; (8001954 <add_bank_note_credit+0x144>)
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fa57 	bl	8005db4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 8001906:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fc1e 	bl	800014c <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <add_bank_note_credit+0x12c>)
 800191e:	f004 f8ac 	bl	8005a7a <HAL_UART_Transmit>
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3778      	adds	r7, #120	; 0x78
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000000e 	.word	0x2000000e
 8001930:	20000010 	.word	0x20000010
 8001934:	20000011 	.word	0x20000011
 8001938:	080068bc 	.word	0x080068bc
 800193c:	2000031c 	.word	0x2000031c
 8001940:	200000e4 	.word	0x200000e4
 8001944:	20000004 	.word	0x20000004
 8001948:	200000f0 	.word	0x200000f0
 800194c:	080068d4 	.word	0x080068d4
 8001950:	08006910 	.word	0x08006910
 8001954:	080068f0 	.word	0x080068f0

08001958 <logic_runner>:

void logic_runner() {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	eeprom_write(0x06,credit);
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <logic_runner+0x130>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	2006      	movs	r0, #6
 8001966:	f7ff fd4b 	bl	8001400 <eeprom_write>
	max7219_DisableDisplayTest();
 800196a:	f000 fab2 	bl	8001ed2 <max7219_DisableDisplayTest>
	if (selected_button != 0) {
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <logic_runner+0x134>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <logic_runner+0x2a>
		logic_runner_round_counter += 1;
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <logic_runner+0x138>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	4a44      	ldr	r2, [pc, #272]	; (8001a90 <logic_runner+0x138>)
 8001980:	6013      	str	r3, [r2, #0]
	}
	switch(selected_button){
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <logic_runner+0x134>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	3b03      	subs	r3, #3
 800198a:	2b04      	cmp	r3, #4
 800198c:	d82f      	bhi.n	80019ee <logic_runner+0x96>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <logic_runner+0x3c>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019a9 	.word	0x080019a9
 8001998:	080019b7 	.word	0x080019b7
 800199c:	080019c5 	.word	0x080019c5
 80019a0:	080019d3 	.word	0x080019d3
 80019a4:	080019e1 	.word	0x080019e1
	case 3:
		duration_per_1credit = F1_DURATION;
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <logic_runner+0x13c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <logic_runner+0x140>)
 80019b2:	601a      	str	r2, [r3, #0]
		break;
 80019b4:	e01f      	b.n	80019f6 <logic_runner+0x9e>
	case 4:
		duration_per_1credit = F2_DURATION;
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <logic_runner+0x144>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <logic_runner+0x140>)
 80019c0:	601a      	str	r2, [r3, #0]
		break;
 80019c2:	e018      	b.n	80019f6 <logic_runner+0x9e>
	case 5:
		duration_per_1credit = F3_DURATION;
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <logic_runner+0x148>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <logic_runner+0x140>)
 80019ce:	601a      	str	r2, [r3, #0]
		break;
 80019d0:	e011      	b.n	80019f6 <logic_runner+0x9e>
	case 6:
		duration_per_1credit = F4_DURATION;
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <logic_runner+0x14c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <logic_runner+0x140>)
 80019dc:	601a      	str	r2, [r3, #0]
		break;
 80019de:	e00a      	b.n	80019f6 <logic_runner+0x9e>
	case 7:
		duration_per_1credit = F5_DURATION;
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <logic_runner+0x150>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <logic_runner+0x140>)
 80019ea:	601a      	str	r2, [r3, #0]
		break;
 80019ec:	e003      	b.n	80019f6 <logic_runner+0x9e>
	default:
		duration_per_1credit = 10;
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <logic_runner+0x140>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	601a      	str	r2, [r3, #0]
		break;
 80019f4:	bf00      	nop
	}
	if(duration_per_1credit != 0){
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <logic_runner+0x140>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d025      	beq.n	8001a4a <logic_runner+0xf2>
		if (logic_runner_round_counter >= duration_per_1credit && credit > 0) {
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <logic_runner+0x138>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <logic_runner+0x140>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	db1f      	blt.n	8001a4a <logic_runner+0xf2>
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <logic_runner+0x130>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01b      	beq.n	8001a4a <logic_runner+0xf2>
			logic_runner_round_counter = 0;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <logic_runner+0x138>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"took 1 credit\r\n", 15, HAL_MAX_DELAY);
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	4923      	ldr	r1, [pc, #140]	; (8001aac <logic_runner+0x154>)
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <logic_runner+0x158>)
 8001a22:	f004 f82a 	bl	8005a7a <HAL_UART_Transmit>
			credit -= 1;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <logic_runner+0x130>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <logic_runner+0x130>)
 8001a2e:	6013      	str	r3, [r2, #0]
			if(credit < 255){
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <logic_runner+0x130>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2bfe      	cmp	r3, #254	; 0xfe
 8001a36:	d806      	bhi.n	8001a46 <logic_runner+0xee>
				//			eeprom_write(0x06,credit);
				HAL_UART_Transmit(&huart1, (uint8_t *)"writing credit value\r\n", 22,
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <logic_runner+0x15c>)
 8001a40:	481b      	ldr	r0, [pc, #108]	; (8001ab0 <logic_runner+0x158>)
 8001a42:	f004 f81a 	bl	8005a7a <HAL_UART_Transmit>
						HAL_MAX_DELAY);
			}
			serial_display_credit();
 8001a46:	f000 f83b 	bl	8001ac0 <serial_display_credit>
		}
	}

	if (credit <= 0) {
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <logic_runner+0x130>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d112      	bne.n	8001a78 <logic_runner+0x120>
		//		segment_display_standby();
		reset_all_output();
 8001a52:	f7fe fe77 	bl	8000744 <reset_all_output>
		HAL_UART_Transmit(&huart1, (uint8_t *)"time up !, disable all functions\r\n", 34,
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	2222      	movs	r2, #34	; 0x22
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <logic_runner+0x160>)
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <logic_runner+0x158>)
 8001a60:	f004 f80b 	bl	8005a7a <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		credit = 0;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <logic_runner+0x130>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		//		eeprom_write(0x06,0);
		system_function_start = false;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <logic_runner+0x164>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
		selected_button = 0;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <logic_runner+0x134>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
	}else{
		segment_display_int(credit);
	}
}
 8001a76:	e004      	b.n	8001a82 <logic_runner+0x12a>
		segment_display_int(credit);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <logic_runner+0x130>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fecf 	bl	8000820 <segment_display_int>
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000e4 	.word	0x200000e4
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	200000ec 	.word	0x200000ec
 8001a94:	20000013 	.word	0x20000013
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000014 	.word	0x20000014
 8001aa0:	20000015 	.word	0x20000015
 8001aa4:	20000016 	.word	0x20000016
 8001aa8:	20000017 	.word	0x20000017
 8001aac:	08006928 	.word	0x08006928
 8001ab0:	2000031c 	.word	0x2000031c
 8001ab4:	08006938 	.word	0x08006938
 8001ab8:	08006950 	.word	0x08006950
 8001abc:	200000f0 	.word	0x200000f0

08001ac0 <serial_display_credit>:

void serial_display_credit() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
	char buffer[35];
	sprintf(buffer, "current credit : %d \r\n", (int)credit);
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <serial_display_credit+0x38>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	490b      	ldr	r1, [pc, #44]	; (8001afc <serial_display_credit+0x3c>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 f96f 	bl	8005db4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fb37 	bl	800014c <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	1d39      	adds	r1, r7, #4
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <serial_display_credit+0x40>)
 8001aea:	f003 ffc6 	bl	8005a7a <HAL_UART_Transmit>
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000e4 	.word	0x200000e4
 8001afc:	08006910 	.word	0x08006910
 8001b00:	2000031c 	.word	0x2000031c

08001b04 <stop_and_clear_tim1>:
void stop_and_clear_tim1() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <stop_and_clear_tim1+0x20>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop_IT(&htim1);
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <stop_and_clear_tim1+0x20>)
 8001b12:	f003 f87f 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001b16:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <stop_and_clear_tim1+0x20>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f06f 0201 	mvn.w	r2, #1
 8001b1e:	611a      	str	r2, [r3, #16]
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000024c 	.word	0x2000024c

08001b28 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	//	HAL_UART_Transmit(&huart2, message3, strlen(message3), HAL_MAX_DELAY);
	//	stop_and_clear_tim1();
	//	max7219_Turn_On();
	HAL_TIM_Base_Stop_IT(&htim2);
 8001b30:	4881      	ldr	r0, [pc, #516]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001b32:	f003 f86f 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001b36:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001b3e:	4b7e      	ldr	r3, [pc, #504]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f06f 0201 	mvn.w	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Stop_IT(&htim1);
 8001b48:	487c      	ldr	r0, [pc, #496]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x214>)
 8001b4a:	f003 f863 	bl	8004c14 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x214>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001b56:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x214>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0201 	mvn.w	r2, #1
 8001b5e:	611a      	str	r2, [r3, #16]


	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a76      	ldr	r2, [pc, #472]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	f040 8095 	bne.w	8001c96 <HAL_TIM_IC_CaptureCallback+0x16e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7f1b      	ldrb	r3, [r3, #28]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f040 8090 	bne.w	8001c96 <HAL_TIM_IC_CaptureCallback+0x16e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH1 INT\r\n", 9, HAL_MAX_DELAY);
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	2209      	movs	r2, #9
 8001b7c:	4971      	ldr	r1, [pc, #452]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001b7e:	4872      	ldr	r0, [pc, #456]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001b80:	f003 ff7b 	bl	8005a7a <HAL_UART_Transmit>
		if (Is_First_Captured == 0) // if the first value is not captured
 8001b84:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d11a      	bne.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x9c>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f003 fc2b 	bl	80053ec <HAL_TIM_ReadCapturedValue>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001b9a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 020a 	bic.w	r2, r2, #10
 8001bb0:	621a      	str	r2, [r3, #32]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0202 	orr.w	r2, r2, #2
 8001bc0:	621a      	str	r2, [r3, #32]
 8001bc2:	e068      	b.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x16e>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 8001bc4:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d163      	bne.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x16e>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f003 fc0b 	bl	80053ec <HAL_TIM_ReadCapturedValue>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a5e      	ldr	r2, [pc, #376]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001bda:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001be4:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d907      	bls.n	8001c00 <HAL_TIM_IC_CaptureCallback+0xd8>
				Difference = IC_Val2 - IC_Val1;
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00f      	b.n	8001c20 <HAL_TIM_IC_CaptureCallback+0xf8>
			}

			else if (IC_Val1 > IC_Val2) {
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d909      	bls.n	8001c20 <HAL_TIM_IC_CaptureCallback+0xf8>
				Difference = ((uint16_t) 0xffff - IC_Val1) + IC_Val2;
 8001c0c:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c1a:	33ff      	adds	r3, #255	; 0xff
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c1e:	6013      	str	r3, [r2, #0]
			}
			Is_First_Captured = 0; // set it back to false
 8001c20:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 020a 	bic.w	r2, r2, #10
 8001c34:	621a      	str	r2, [r3, #32]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a12      	ldr	r2, [r2, #32]
 8001c40:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);

			add_bank_note_credit(Difference/1000);
 8001c42:	4b45      	ldr	r3, [pc, #276]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x234>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fdde 	bl	8001810 <add_bank_note_credit>
			last_credit_insert_bank += bank_credit_per_pulse;
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001c66:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH1:captured val : %d \r\n",(int)Difference);
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	493d      	ldr	r1, [pc, #244]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f89d 	bl	8005db4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fa64 	bl	800014c <strlen>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f107 010c 	add.w	r1, r7, #12
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	482d      	ldr	r0, [pc, #180]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001c92:	f003 fef2 	bl	8005a7a <HAL_UART_Transmit>
		}
	}
	if (htim->Instance == TIM3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	f040 80ba 	bne.w	8001e16 <HAL_TIM_IC_CaptureCallback+0x2ee>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if the interrupt source is channel1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7f1b      	ldrb	r3, [r3, #28]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f040 80b5 	bne.w	8001e16 <HAL_TIM_IC_CaptureCallback+0x2ee>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH2 INT\r\n", 9, HAL_MAX_DELAY);
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	2209      	movs	r2, #9
 8001cb2:	492e      	ldr	r1, [pc, #184]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x244>)
 8001cb4:	4824      	ldr	r0, [pc, #144]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001cb6:	f003 fee0 	bl	8005a7a <HAL_UART_Transmit>
		if (coin_Is_First_Captured == 0) // if the first value is not captured
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11a      	bne.n	8001cfa <HAL_TIM_IC_CaptureCallback+0x1d2>
		{
			coin_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f003 fb90 	bl	80053ec <HAL_TIM_ReadCapturedValue>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001cd0:	6013      	str	r3, [r2, #0]
			coin_Is_First_Captured = 1;  // set the first captured as true
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ce6:	621a      	str	r2, [r3, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	621a      	str	r2, [r3, #32]
 8001cf8:	e08d      	b.n	8001e16 <HAL_TIM_IC_CaptureCallback+0x2ee>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (coin_Is_First_Captured == 1) // if the first is already captured
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 8088 	bne.w	8001e16 <HAL_TIM_IC_CaptureCallback+0x2ee>
		{
			coin_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001d06:	2104      	movs	r1, #4
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f003 fb6f 	bl	80053ec <HAL_TIM_ReadCapturedValue>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001d12:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
			if (coin_IC_Val2 > coin_IC_Val1) {
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d92b      	bls.n	8001d80 <HAL_TIM_IC_CaptureCallback+0x258>
				coin_Difference = coin_IC_Val2 - coin_IC_Val1;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e033      	b.n	8001da0 <HAL_TIM_IC_CaptureCallback+0x278>
 8001d38:	20000294 	.word	0x20000294
 8001d3c:	2000024c 	.word	0x2000024c
 8001d40:	40000400 	.word	0x40000400
 8001d44:	08006974 	.word	0x08006974
 8001d48:	2000031c 	.word	0x2000031c
 8001d4c:	200000d0 	.word	0x200000d0
 8001d50:	200000c4 	.word	0x200000c4
 8001d54:	200000c8 	.word	0x200000c8
 8001d58:	200000cc 	.word	0x200000cc
 8001d5c:	10624dd3 	.word	0x10624dd3
 8001d60:	20000011 	.word	0x20000011
 8001d64:	200000fa 	.word	0x200000fa
 8001d68:	08006980 	.word	0x08006980
 8001d6c:	0800699c 	.word	0x0800699c
 8001d70:	200000e0 	.word	0x200000e0
 8001d74:	200000d4 	.word	0x200000d4
 8001d78:	200000d8 	.word	0x200000d8
 8001d7c:	200000dc 	.word	0x200000dc
			}

			else if (coin_IC_Val1 > coin_IC_Val2) {
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d909      	bls.n	8001da0 <HAL_TIM_IC_CaptureCallback+0x278>
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
																																																																																																																						+ coin_IC_Val2;
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d9a:	33ff      	adds	r3, #255	; 0xff
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
 8001d9c:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001d9e:	6013      	str	r3, [r2, #0]
			}
			coin_Is_First_Captured = 0; // set it back to false
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001db4:	621a      	str	r2, [r3, #32]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a12      	ldr	r2, [r2, #32]
 8001dc0:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			add_coin_credit(coin_Difference/1000);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc92 	bl	80016f8 <add_coin_credit>
			last_credit_insert += coin_credit_per_pulse;
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x334>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x334>)
 8001de6:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH2:captured val : %d \r\n",(int)coin_Difference);
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	491b      	ldr	r1, [pc, #108]	; (8001e60 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 ffdd 	bl	8005db4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9a4 	bl	800014c <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f107 010c 	add.w	r1, r7, #12
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	4814      	ldr	r0, [pc, #80]	; (8001e64 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001e12:	f003 fe32 	bl	8005a7a <HAL_UART_Transmit>
		}
	}
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0204 	bic.w	r2, r2, #4
 8001e24:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0204 	orr.w	r2, r2, #4
 8001e34:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim2);
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <HAL_TIM_IC_CaptureCallback+0x344>)
 8001e38:	f002 fe9a 	bl	8004b70 <HAL_TIM_Base_Start_IT>
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200000d4 	.word	0x200000d4
 8001e48:	200000d8 	.word	0x200000d8
 8001e4c:	200000dc 	.word	0x200000dc
 8001e50:	200000e0 	.word	0x200000e0
 8001e54:	10624dd3 	.word	0x10624dd3
 8001e58:	20000012 	.word	0x20000012
 8001e5c:	200000f8 	.word	0x200000f8
 8001e60:	080069a8 	.word	0x080069a8
 8001e64:	2000031c 	.word	0x2000031c
 8001e68:	20000204 	.word	0x20000204
 8001e6c:	20000294 	.word	0x20000294

08001e70 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_Off();
 8001e86:	f000 f885 	bl	8001f94 <max7219_Turn_Off>
	max7219_DisableDisplayTest();
 8001e8a:	f000 f822 	bl	8001ed2 <max7219_DisableDisplayTest>
	max7219_Turn_On();
 8001e8e:	f000 f877 	bl	8001f80 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8001e92:	2107      	movs	r1, #7
 8001e94:	200b      	movs	r0, #11
 8001e96:	f000 f849 	bl	8001f2c <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f806 	bl	8001eae <max7219_SetIntensivity>
	max7219_Clean();
 8001ea2:	f000 f81f 	bl	8001ee4 <max7219_Clean>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	d805      	bhi.n	8001eca <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f000 f832 	bl	8001f2c <max7219_SendData>
 8001ec8:	e000      	b.n	8001ecc <max7219_SetIntensivity+0x1e>
		return;
 8001eca:	bf00      	nop
}
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <max7219_DisableDisplayTest>:

void max7219_DisableDisplayTest()
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
	max7219_SendData(REG_DISPLAY_TEST, REG_NO_OP);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f000 f827 	bl	8001f2c <max7219_SendData>
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <max7219_Clean>:

void max7219_Clean()
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <max7219_Clean+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d101      	bne.n	8001efa <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001ef6:	230f      	movs	r3, #15
 8001ef8:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	e00b      	b.n	8001f18 <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f80d 	bl	8001f2c <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	ddf0      	ble.n	8001f00 <max7219_Clean+0x1c>
	}
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000101 	.word	0x20000101

08001f2c <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f42:	480d      	ldr	r0, [pc, #52]	; (8001f78 <max7219_SendData+0x4c>)
 8001f44:	f001 f9c9 	bl	80032da <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001f48:	1df9      	adds	r1, r7, #7
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	2201      	movs	r2, #1
 8001f50:	480a      	ldr	r0, [pc, #40]	; (8001f7c <max7219_SendData+0x50>)
 8001f52:	f002 fbdb 	bl	800470c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001f56:	1db9      	adds	r1, r7, #6
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <max7219_SendData+0x50>)
 8001f60:	f002 fbd4 	bl	800470c <HAL_SPI_Transmit>
	CS_RESET();
 8001f64:	2201      	movs	r2, #1
 8001f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f6a:	4803      	ldr	r0, [pc, #12]	; (8001f78 <max7219_SendData+0x4c>)
 8001f6c:	f001 f9b5 	bl	80032da <HAL_GPIO_WritePin>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	20000164 	.word	0x20000164

08001f80 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8001f84:	f7ff ffa5 	bl	8001ed2 <max7219_DisableDisplayTest>
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	200c      	movs	r0, #12
 8001f8c:	f7ff ffce 	bl	8001f2c <max7219_SendData>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <max7219_Turn_Off>:

void max7219_Turn_Off(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8001f98:	f7ff ff9b 	bl	8001ed2 <max7219_DisableDisplayTest>
	max7219_SendData(REG_SHUTDOWN, 0x00);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	200c      	movs	r0, #12
 8001fa0:	f7ff ffc4 	bl	8001f2c <max7219_SendData>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <max7219_Decode_On>:

void max7219_Decode_On(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <max7219_Decode_On+0x1c>)
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <max7219_Decode_On+0x1c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	2009      	movs	r0, #9
 8001fba:	f7ff ffb7 	bl	8001f2c <max7219_SendData>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000101 	.word	0x20000101

08001fc8 <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	71bb      	strb	r3, [r7, #6]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	717b      	strb	r3, [r7, #5]
	max7219_DisableDisplayTest();
 8001fda:	f7ff ff7a 	bl	8001ed2 <max7219_DisableDisplayTest>
	if(position > NUMBER_OF_DIGITS)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d844      	bhi.n	800206e <max7219_PrintDigit+0xa6>
	{
		return;
	}

	if(point)
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d020      	beq.n	800202c <max7219_PrintDigit+0x64>
	{
		if(decodeMode == 0x00)
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <max7219_PrintDigit+0xb0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <max7219_PrintDigit+0x48>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f8bb 	bl	8002170 <getSymbol>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002002:	b2da      	uxtb	r2, r3
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff8f 	bl	8001f2c <max7219_SendData>
 800200e:	e02f      	b.n	8002070 <max7219_PrintDigit+0xa8>
		}
		else if(decodeMode == 0xFF)
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <max7219_PrintDigit+0xb0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d12b      	bne.n	8002070 <max7219_PrintDigit+0xa8>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8002018:	79bb      	ldrb	r3, [r7, #6]
 800201a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800201e:	b2da      	uxtb	r2, r3
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff81 	bl	8001f2c <max7219_SendData>
 800202a:	e021      	b.n	8002070 <max7219_PrintDigit+0xa8>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <max7219_PrintDigit+0xb0>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10e      	bne.n	8002052 <max7219_PrintDigit+0x8a>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f89a 	bl	8002170 <getSymbol>
 800203c:	4603      	mov	r3, r0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002044:	b2da      	uxtb	r2, r3
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff6e 	bl	8001f2c <max7219_SendData>
 8002050:	e00e      	b.n	8002070 <max7219_PrintDigit+0xa8>
		}
		else if(decodeMode == 0xFF)
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <max7219_PrintDigit+0xb0>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d10a      	bne.n	8002070 <max7219_PrintDigit+0xa8>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002060:	b2da      	uxtb	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff60 	bl	8001f2c <max7219_SendData>
 800206c:	e000      	b.n	8002070 <max7219_PrintDigit+0xa8>
		return;
 800206e:	bf00      	nop
		}
	}
}
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000101 	.word	0x20000101

0800207c <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
	max7219_DisableDisplayTest();
 8002088:	f7ff ff23 	bl	8001ed2 <max7219_DisableDisplayTest>
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 800208c:	21ff      	movs	r1, #255	; 0xff
 800208e:	2009      	movs	r0, #9
 8002090:	f7ff ff4c 	bl	8001f2c <max7219_SendData>

	int32_t i;

	if (value < 0)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	da0d      	bge.n	80020b6 <max7219_PrintItos+0x3a>
	{
		if(position > 0)
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <max7219_PrintItos+0x34>
		{
			max7219_SendData(position, MINUS);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	210a      	movs	r1, #10
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff41 	bl	8001f2c <max7219_SendData>
			position--;
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	425b      	negs	r3, r3
 80020b4:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 80020ba:	e005      	b.n	80020c8 <max7219_PrintItos+0x4c>
	{
		i *= 10;
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	dcf3      	bgt.n	80020bc <max7219_PrintItos+0x40>
	}

	if(position > 0)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <max7219_PrintItos+0x78>
	{
		max7219_SendData(position, value/i);
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	fb92 f3f3 	sdiv	r3, r2, r3
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff1f 	bl	8001f2c <max7219_SendData>
		position--;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <max7219_PrintItos+0xec>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1092      	asrs	r2, r2, #2
 80020fe:	17db      	asrs	r3, r3, #31
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 8002104:	e022      	b.n	800214c <max7219_PrintItos+0xd0>
	{
		if(position > 0)
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d017      	beq.n	800213c <max7219_PrintItos+0xc0>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	fb93 f1f2 	sdiv	r1, r3, r2
 800211e:	fb02 f201 	mul.w	r2, r2, r1
 8002122:	1a9a      	subs	r2, r3, r2
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	fb92 f3f3 	sdiv	r3, r2, r3
 800212a:	b2da      	uxtb	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fefb 	bl	8001f2c <max7219_SendData>
			position--;
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	3b01      	subs	r3, #1
 800213a:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <max7219_PrintItos+0xec>)
 8002140:	fb82 1203 	smull	r1, r2, r2, r3
 8002144:	1092      	asrs	r2, r2, #2
 8002146:	17db      	asrs	r3, r3, #31
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	dcd9      	bgt.n	8002106 <max7219_PrintItos+0x8a>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <max7219_PrintItos+0xf0>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	2009      	movs	r0, #9
 800215a:	f7ff fee7 	bl	8001f2c <max7219_SendData>

	return position;
 800215e:	79fb      	ldrb	r3, [r7, #7]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	66666667 	.word	0x66666667
 800216c:	20000101 	.word	0x20000101

08002170 <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <getSymbol+0x1c>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	b29b      	uxth	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000018 	.word	0x20000018

08002190 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2100      	movs	r1, #0
 800219a:	460a      	mov	r2, r1
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	460a      	mov	r2, r1
 80021a0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_RTC_Init+0x8c>)
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <MX_RTC_Init+0x90>)
 80021aa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <MX_RTC_Init+0x8c>)
 80021ae:	f04f 32ff 	mov.w	r2, #4294967295
 80021b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <MX_RTC_Init+0x8c>)
 80021b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ba:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021bc:	4817      	ldr	r0, [pc, #92]	; (800221c <MX_RTC_Init+0x8c>)
 80021be:	f001 fe5d 	bl	8003e7c <HAL_RTC_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80021c8:	f7ff fe52 	bl	8001e70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	2201      	movs	r2, #1
 80021dc:	4619      	mov	r1, r3
 80021de:	480f      	ldr	r0, [pc, #60]	; (800221c <MX_RTC_Init+0x8c>)
 80021e0:	f001 fee2 	bl	8003fa8 <HAL_RTC_SetTime>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80021ea:	f7ff fe41 	bl	8001e70 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021ee:	2301      	movs	r3, #1
 80021f0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021f2:	2301      	movs	r3, #1
 80021f4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	2201      	movs	r2, #1
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_RTC_Init+0x8c>)
 8002206:	f001 ff67 	bl	80040d8 <HAL_RTC_SetDate>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002210:	f7ff fe2e 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000150 	.word	0x20000150
 8002220:	40002800 	.word	0x40002800

08002224 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_RTC_MspInit+0x3c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d110      	bne.n	8002258 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002236:	f001 f881 	bl	800333c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RTC_MspInit+0x40>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RTC_MspInit+0x40>)
 8002240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_RTC_MspInit+0x40>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RTC_MspInit+0x44>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40002800 	.word	0x40002800
 8002264:	40021000 	.word	0x40021000
 8002268:	4242043c 	.word	0x4242043c

0800226c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_SPI2_Init+0x64>)
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <MX_SPI2_Init+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <MX_SPI2_Init+0x64>)
 8002278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800227c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <MX_SPI2_Init+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_SPI2_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_SPI2_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <MX_SPI2_Init+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_SPI2_Init+0x64>)
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_SPI2_Init+0x64>)
 80022a0:	2208      	movs	r2, #8
 80022a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_SPI2_Init+0x64>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_SPI2_Init+0x64>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <MX_SPI2_Init+0x64>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_SPI2_Init+0x64>)
 80022b8:	220a      	movs	r2, #10
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <MX_SPI2_Init+0x64>)
 80022be:	f002 f9a1 	bl	8004604 <HAL_SPI_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022c8:	f7ff fdd2 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000164 	.word	0x20000164
 80022d4:	40003800 	.word	0x40003800

080022d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <HAL_SPI_MspInit+0x74>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d124      	bne.n	8002342 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_SPI_MspInit+0x78>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_SPI_MspInit+0x78>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	61d3      	str	r3, [r2, #28]
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_SPI_MspInit+0x78>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_SPI_MspInit+0x78>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_SPI_MspInit+0x78>)
 8002316:	f043 0308 	orr.w	r3, r3, #8
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_SPI_MspInit+0x78>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002328:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800232c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <HAL_SPI_MspInit+0x7c>)
 800233e:	f000 fe31 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002342:	bf00      	nop
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40003800 	.word	0x40003800
 8002350:	40021000 	.word	0x40021000
 8002354:	40010c00 	.word	0x40010c00

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_MspInit+0xa4>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4a26      	ldr	r2, [pc, #152]	; (80023fc <HAL_MspInit+0xa4>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6193      	str	r3, [r2, #24]
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_MspInit+0xa4>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_MspInit+0xa4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <HAL_MspInit+0xa4>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_MspInit+0xa4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	f06f 000b 	mvn.w	r0, #11
 8002396:	f000 fdb2 	bl	8002efe <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2101      	movs	r1, #1
 800239e:	f06f 000a 	mvn.w	r0, #10
 80023a2:	f000 fdac 	bl	8002efe <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2101      	movs	r1, #1
 80023aa:	f06f 0009 	mvn.w	r0, #9
 80023ae:	f000 fda6 	bl	8002efe <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	f06f 0004 	mvn.w	r0, #4
 80023ba:	f000 fda0 	bl	8002efe <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2101      	movs	r1, #1
 80023c2:	f06f 0003 	mvn.w	r0, #3
 80023c6:	f000 fd9a 	bl	8002efe <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2101      	movs	r1, #1
 80023ce:	f06f 0001 	mvn.w	r0, #1
 80023d2:	f000 fd94 	bl	8002efe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_MspInit+0xa8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_MspInit+0xa8>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <HardFault_Handler+0x4>

08002416 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <MemManage_Handler+0x4>

0800241c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <BusFault_Handler+0x4>

08002422 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <UsageFault_Handler+0x4>

08002428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002450:	f000 fbe4 	bl	8002c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800245c:	2004      	movs	r0, #4
 800245e:	f000 ff55 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}

08002466 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800246a:	2008      	movs	r0, #8
 800246c:	f000 ff4e 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002478:	2010      	movs	r0, #16
 800247a:	f000 ff47 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}

08002482 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002486:	2020      	movs	r0, #32
 8002488:	f000 ff40 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800248c:	2040      	movs	r0, #64	; 0x40
 800248e:	f000 ff3d 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002492:	2080      	movs	r0, #128	; 0x80
 8002494:	f000 ff3a 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM1_UP_IRQHandler+0x10>)
 80024a2:	f002 fd43 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000024c 	.word	0x2000024c

080024b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM2_IRQHandler+0x10>)
 80024b6:	f002 fd39 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000294 	.word	0x20000294

080024c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM3_IRQHandler+0x10>)
 80024ca:	f002 fd2f 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000204 	.word	0x20000204

080024d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM4_IRQHandler+0x10>)
 80024de:	f002 fd25 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200001bc 	.word	0x200001bc

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f003 fc18 	bl	8005d50 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20005000 	.word	0x20005000
 800254c:	00000400 	.word	0x00000400
 8002550:	20000104 	.word	0x20000104
 8002554:	20000370 	.word	0x20000370

08002558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	463b      	mov	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <MX_TIM1_Init+0x9c>)
 8002582:	4a20      	ldr	r2, [pc, #128]	; (8002604 <MX_TIM1_Init+0xa0>)
 8002584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 699;
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <MX_TIM1_Init+0x9c>)
 8002588:	f240 22bb 	movw	r2, #699	; 0x2bb
 800258c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MX_TIM1_Init+0x9c>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_TIM1_Init+0x9c>)
 8002596:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800259a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <MX_TIM1_Init+0x9c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <MX_TIM1_Init+0x9c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_TIM1_Init+0x9c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ae:	4814      	ldr	r0, [pc, #80]	; (8002600 <MX_TIM1_Init+0x9c>)
 80025b0:	f002 fa8e 	bl	8004ad0 <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80025ba:	f7ff fc59 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4619      	mov	r1, r3
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_TIM1_Init+0x9c>)
 80025cc:	f002 fe4a 	bl	8005264 <HAL_TIM_ConfigClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80025d6:	f7ff fc4b 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025e2:	463b      	mov	r3, r7
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_TIM1_Init+0x9c>)
 80025e8:	f003 f98a 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80025f2:	f7ff fc3d 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000024c 	.word	0x2000024c
 8002604:	40012c00 	.word	0x40012c00

08002608 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	463b      	mov	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <MX_TIM2_Init+0x94>)
 8002626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800262a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <MX_TIM2_Init+0x94>)
 800262e:	2263      	movs	r2, #99	; 0x63
 8002630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_TIM2_Init+0x94>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <MX_TIM2_Init+0x94>)
 800263a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800263e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_TIM2_Init+0x94>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_TIM2_Init+0x94>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800264c:	4813      	ldr	r0, [pc, #76]	; (800269c <MX_TIM2_Init+0x94>)
 800264e:	f002 fa3f 	bl	8004ad0 <HAL_TIM_Base_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002658:	f7ff fc0a 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4619      	mov	r1, r3
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <MX_TIM2_Init+0x94>)
 800266a:	f002 fdfb 	bl	8005264 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002674:	f7ff fbfc 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002680:	463b      	mov	r3, r7
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_TIM2_Init+0x94>)
 8002686:	f003 f93b 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002690:	f7ff fbee 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000294 	.word	0x20000294

080026a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a6:	f107 0318 	add.w	r3, r7, #24
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026be:	463b      	mov	r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026cc:	4a31      	ldr	r2, [pc, #196]	; (8002794 <MX_TIM3_Init+0xf4>)
 80026ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026d2:	2247      	movs	r2, #71	; 0x47
 80026d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026f0:	4827      	ldr	r0, [pc, #156]	; (8002790 <MX_TIM3_Init+0xf0>)
 80026f2:	f002 f9ed 	bl	8004ad0 <HAL_TIM_Base_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80026fc:	f7ff fbb8 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002706:	f107 0318 	add.w	r3, r7, #24
 800270a:	4619      	mov	r1, r3
 800270c:	4820      	ldr	r0, [pc, #128]	; (8002790 <MX_TIM3_Init+0xf0>)
 800270e:	f002 fda9 	bl	8005264 <HAL_TIM_ConfigClockSource>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002718:	f7ff fbaa 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800271c:	481c      	ldr	r0, [pc, #112]	; (8002790 <MX_TIM3_Init+0xf0>)
 800271e:	f002 faa7 	bl	8004c70 <HAL_TIM_IC_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002728:	f7ff fba2 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	4619      	mov	r1, r3
 800273a:	4815      	ldr	r0, [pc, #84]	; (8002790 <MX_TIM3_Init+0xf0>)
 800273c:	f003 f8e0 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002746:	f7ff fb93 	bl	8001e70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800274e:	2301      	movs	r3, #1
 8002750:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8002756:	2305      	movs	r3, #5
 8002758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800275a:	463b      	mov	r3, r7
 800275c:	2200      	movs	r2, #0
 800275e:	4619      	mov	r1, r3
 8002760:	480b      	ldr	r0, [pc, #44]	; (8002790 <MX_TIM3_Init+0xf0>)
 8002762:	f002 fceb 	bl	800513c <HAL_TIM_IC_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800276c:	f7ff fb80 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002770:	463b      	mov	r3, r7
 8002772:	2204      	movs	r2, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_TIM3_Init+0xf0>)
 8002778:	f002 fce0 	bl	800513c <HAL_TIM_IC_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002782:	f7ff fb75 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000204 	.word	0x20000204
 8002794:	40000400 	.word	0x40000400

08002798 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	463b      	mov	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <MX_TIM4_Init+0x94>)
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <MX_TIM4_Init+0x98>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1499;
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_TIM4_Init+0x94>)
 80027bc:	f240 52db 	movw	r2, #1499	; 0x5db
 80027c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_TIM4_Init+0x94>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_TIM4_Init+0x94>)
 80027ca:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80027ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <MX_TIM4_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <MX_TIM4_Init+0x94>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027dc:	4813      	ldr	r0, [pc, #76]	; (800282c <MX_TIM4_Init+0x94>)
 80027de:	f002 f977 	bl	8004ad0 <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80027e8:	f7ff fb42 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <MX_TIM4_Init+0x94>)
 80027fa:	f002 fd33 	bl	8005264 <HAL_TIM_ConfigClockSource>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002804:	f7ff fb34 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002810:	463b      	mov	r3, r7
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_TIM4_Init+0x94>)
 8002816:	f003 f873 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002820:	f7ff fb26 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200001bc 	.word	0x200001bc
 8002830:	40000800 	.word	0x40000800

08002834 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a49      	ldr	r2, [pc, #292]	; (8002974 <HAL_TIM_Base_MspInit+0x140>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d114      	bne.n	800287e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002854:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 800285a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b45      	ldr	r3, [pc, #276]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2103      	movs	r1, #3
 8002870:	2019      	movs	r0, #25
 8002872:	f000 fb44 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002876:	2019      	movs	r0, #25
 8002878:	f000 fb5d 	bl	8002f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800287c:	e076      	b.n	800296c <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d114      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a3a      	ldr	r2, [pc, #232]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b38      	ldr	r3, [pc, #224]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2104      	movs	r1, #4
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 fb2a 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028aa:	201c      	movs	r0, #28
 80028ac:	f000 fb43 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 80028b0:	e05c      	b.n	800296c <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_TIM_Base_MspInit+0x148>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d13e      	bne.n	800293a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	61d3      	str	r3, [r2, #28]
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028ec:	2330      	movs	r3, #48	; 0x30
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028f4:	2302      	movs	r3, #2
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4820      	ldr	r0, [pc, #128]	; (8002980 <HAL_TIM_Base_MspInit+0x14c>)
 8002900:	f000 fb50 	bl	8002fa4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_TIM_Base_MspInit+0x150>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_TIM_Base_MspInit+0x150>)
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2101      	movs	r1, #1
 800292c:	201d      	movs	r0, #29
 800292e:	f000 fae6 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002932:	201d      	movs	r0, #29
 8002934:	f000 faff 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 8002938:	e018      	b.n	800296c <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_TIM_Base_MspInit+0x154>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d113      	bne.n	800296c <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	61d3      	str	r3, [r2, #28]
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_TIM_Base_MspInit+0x144>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2103      	movs	r1, #3
 8002960:	201e      	movs	r0, #30
 8002962:	f000 facc 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002966:	201e      	movs	r0, #30
 8002968:	f000 fae5 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	3730      	adds	r7, #48	; 0x30
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40000400 	.word	0x40000400
 8002980:	40010c00 	.word	0x40010c00
 8002984:	40010000 	.word	0x40010000
 8002988:	40000800 	.word	0x40000800

0800298c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <MX_USART1_UART_Init+0x50>)
 8002994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029c4:	f003 f80c 	bl	80059e0 <HAL_UART_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029ce:	f7ff fa4f 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000031c 	.word	0x2000031c
 80029dc:	40013800 	.word	0x40013800

080029e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <MX_USART3_UART_Init+0x50>)
 80029e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a06:	220c      	movs	r2, #12
 8002a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a16:	4805      	ldr	r0, [pc, #20]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a18:	f002 ffe2 	bl	80059e0 <HAL_UART_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a22:	f7ff fa25 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200002dc 	.word	0x200002dc
 8002a30:	40004800 	.word	0x40004800

08002a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a38      	ldr	r2, [pc, #224]	; (8002b30 <HAL_UART_MspInit+0xfc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d132      	bne.n	8002aba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a54:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a36      	ldr	r2, [pc, #216]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 0318 	add.w	r3, r7, #24
 8002a96:	4619      	mov	r1, r3
 8002a98:	4827      	ldr	r0, [pc, #156]	; (8002b38 <HAL_UART_MspInit+0x104>)
 8002a9a:	f000 fa83 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4821      	ldr	r0, [pc, #132]	; (8002b38 <HAL_UART_MspInit+0x104>)
 8002ab4:	f000 fa76 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ab8:	e036      	b.n	8002b28 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_UART_MspInit+0x108>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d131      	bne.n	8002b28 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6193      	str	r3, [r2, #24]
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_UART_MspInit+0x100>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 0318 	add.w	r3, r7, #24
 8002b06:	4619      	mov	r1, r3
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <HAL_UART_MspInit+0x10c>)
 8002b0a:	f000 fa4b 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	4619      	mov	r1, r3
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <HAL_UART_MspInit+0x10c>)
 8002b24:	f000 fa3e 	bl	8002fa4 <HAL_GPIO_Init>
}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010800 	.word	0x40010800
 8002b3c:	40004800 	.word	0x40004800
 8002b40:	40010c00 	.word	0x40010c00

08002b44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b46:	e003      	b.n	8002b50 <LoopCopyDataInit>

08002b48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b4e:	3104      	adds	r1, #4

08002b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b50:	480a      	ldr	r0, [pc, #40]	; (8002b7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b58:	d3f6      	bcc.n	8002b48 <CopyDataInit>
  ldr r2, =_sbss
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b5c:	e002      	b.n	8002b64 <LoopFillZerobss>

08002b5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b60:	f842 3b04 	str.w	r3, [r2], #4

08002b64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b68:	d3f9      	bcc.n	8002b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b6a:	f7ff fcf5 	bl	8002558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b6e:	f003 f8f5 	bl	8005d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b72:	f7fd fbc3 	bl	80002fc <main>
  bx lr
 8002b76:	4770      	bx	lr
  ldr r3, =_sidata
 8002b78:	08006a38 	.word	0x08006a38
  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b80:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 8002b84:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 8002b88:	20000370 	.word	0x20000370

08002b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC1_2_IRQHandler>
	...

08002b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_Init+0x28>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <HAL_Init+0x28>)
 8002b9a:	f043 0310 	orr.w	r3, r3, #16
 8002b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	f000 f9a1 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f000 f808 	bl	8002bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bac:	f7ff fbd4 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_InitTick+0x54>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_InitTick+0x58>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f9c7 	bl	8002f6e <HAL_SYSTICK_Config>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00e      	b.n	8002c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b0f      	cmp	r3, #15
 8002bee:	d80a      	bhi.n	8002c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	f000 f981 	bl	8002efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bfc:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <HAL_InitTick+0x5c>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e000      	b.n	8002c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000030 	.word	0x20000030
 8002c14:	20000038 	.word	0x20000038
 8002c18:	20000034 	.word	0x20000034

08002c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_IncTick+0x1c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_IncTick+0x20>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a03      	ldr	r2, [pc, #12]	; (8002c3c <HAL_IncTick+0x20>)
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	20000038 	.word	0x20000038
 8002c3c:	2000035c 	.word	0x2000035c

08002c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_GetTick+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	2000035c 	.word	0x2000035c

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff fff0 	bl	8002c40 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffe0 	bl	8002c40 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000038 	.word	0x20000038

08002c9c <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_GetREVID+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e0042000 	.word	0xe0042000

08002cb4 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_GetDEVID+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	e0042000 	.word	0xe0042000

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <__NVIC_EnableIRQ+0x34>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db12      	blt.n	8002da0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	490a      	ldr	r1, [pc, #40]	; (8002dac <__NVIC_DisableIRQ+0x44>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	3320      	adds	r3, #32
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d94:	f3bf 8f4f 	dsb	sy
}
 8002d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d9a:	f3bf 8f6f 	isb	sy
}
 8002d9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0c      	blt.n	8002ddc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <__NVIC_ClearPendingIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	3360      	adds	r3, #96	; 0x60
 8002dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	f7ff ff90 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff feeb 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff00 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff90 	bl	8002e40 <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5f 	bl	8002dec <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fef3 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff01 	bl	8002d68 <__NVIC_DisableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff94 	bl	8002ea4 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff0b 	bl	8002db0 <__NVIC_ClearPendingIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e169      	b.n	800328c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f040 8158 	bne.w	8003286 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a9a      	ldr	r2, [pc, #616]	; (8003244 <HAL_GPIO_Init+0x2a0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d05e      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fe0:	4a98      	ldr	r2, [pc, #608]	; (8003244 <HAL_GPIO_Init+0x2a0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d875      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002fe6:	4a98      	ldr	r2, [pc, #608]	; (8003248 <HAL_GPIO_Init+0x2a4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d058      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fec:	4a96      	ldr	r2, [pc, #600]	; (8003248 <HAL_GPIO_Init+0x2a4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d86f      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ff2:	4a96      	ldr	r2, [pc, #600]	; (800324c <HAL_GPIO_Init+0x2a8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d052      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002ff8:	4a94      	ldr	r2, [pc, #592]	; (800324c <HAL_GPIO_Init+0x2a8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d869      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ffe:	4a94      	ldr	r2, [pc, #592]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04c      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003004:	4a92      	ldr	r2, [pc, #584]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d863      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800300a:	4a92      	ldr	r2, [pc, #584]	; (8003254 <HAL_GPIO_Init+0x2b0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d046      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003010:	4a90      	ldr	r2, [pc, #576]	; (8003254 <HAL_GPIO_Init+0x2b0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d85d      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8003016:	2b12      	cmp	r3, #18
 8003018:	d82a      	bhi.n	8003070 <HAL_GPIO_Init+0xcc>
 800301a:	2b12      	cmp	r3, #18
 800301c:	d859      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_GPIO_Init+0x80>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	0800309f 	.word	0x0800309f
 8003028:	08003079 	.word	0x08003079
 800302c:	0800308b 	.word	0x0800308b
 8003030:	080030cd 	.word	0x080030cd
 8003034:	080030d3 	.word	0x080030d3
 8003038:	080030d3 	.word	0x080030d3
 800303c:	080030d3 	.word	0x080030d3
 8003040:	080030d3 	.word	0x080030d3
 8003044:	080030d3 	.word	0x080030d3
 8003048:	080030d3 	.word	0x080030d3
 800304c:	080030d3 	.word	0x080030d3
 8003050:	080030d3 	.word	0x080030d3
 8003054:	080030d3 	.word	0x080030d3
 8003058:	080030d3 	.word	0x080030d3
 800305c:	080030d3 	.word	0x080030d3
 8003060:	080030d3 	.word	0x080030d3
 8003064:	080030d3 	.word	0x080030d3
 8003068:	08003081 	.word	0x08003081
 800306c:	08003095 	.word	0x08003095
 8003070:	4a79      	ldr	r2, [pc, #484]	; (8003258 <HAL_GPIO_Init+0x2b4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003076:	e02c      	b.n	80030d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	623b      	str	r3, [r7, #32]
          break;
 800307e:	e029      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e024      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	3308      	adds	r3, #8
 8003090:	623b      	str	r3, [r7, #32]
          break;
 8003092:	e01f      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	330c      	adds	r3, #12
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e01a      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030a6:	2304      	movs	r3, #4
 80030a8:	623b      	str	r3, [r7, #32]
          break;
 80030aa:	e013      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b4:	2308      	movs	r3, #8
 80030b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	611a      	str	r2, [r3, #16]
          break;
 80030be:	e009      	b.n	80030d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c0:	2308      	movs	r3, #8
 80030c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	615a      	str	r2, [r3, #20]
          break;
 80030ca:	e003      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
          break;
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          break;
 80030d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d801      	bhi.n	80030de <HAL_GPIO_Init+0x13a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	e001      	b.n	80030e2 <HAL_GPIO_Init+0x13e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d802      	bhi.n	80030f0 <HAL_GPIO_Init+0x14c>
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x152>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	3b08      	subs	r3, #8
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	210f      	movs	r1, #15
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80b1 	beq.w	8003286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <HAL_GPIO_Init+0x2b8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x2b8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_GPIO_Init+0x2b8>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800313c:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_GPIO_Init+0x2bc>)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	3302      	adds	r3, #2
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a40      	ldr	r2, [pc, #256]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_GPIO_Init+0x1ec>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3f      	ldr	r2, [pc, #252]	; (8003268 <HAL_GPIO_Init+0x2c4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00d      	beq.n	800318c <HAL_GPIO_Init+0x1e8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3e      	ldr	r2, [pc, #248]	; (800326c <HAL_GPIO_Init+0x2c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <HAL_GPIO_Init+0x1e4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <HAL_GPIO_Init+0x2cc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_GPIO_Init+0x1e0>
 8003180:	2303      	movs	r3, #3
 8003182:	e006      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003184:	2304      	movs	r3, #4
 8003186:	e004      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003188:	2302      	movs	r3, #2
 800318a:	e002      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003190:	2300      	movs	r3, #0
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	f002 0203 	and.w	r2, r2, #3
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	4093      	lsls	r3, r2
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031a2:	492f      	ldr	r1, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x2bc>)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	492c      	ldr	r1, [pc, #176]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4928      	ldr	r1, [pc, #160]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4922      	ldr	r1, [pc, #136]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	491e      	ldr	r1, [pc, #120]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	4918      	ldr	r1, [pc, #96]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	43db      	mvns	r3, r3
 8003222:	4914      	ldr	r1, [pc, #80]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 8003224:	4013      	ands	r3, r2
 8003226:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d021      	beq.n	8003278 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
 8003240:	e021      	b.n	8003286 <HAL_GPIO_Init+0x2e2>
 8003242:	bf00      	nop
 8003244:	10320000 	.word	0x10320000
 8003248:	10310000 	.word	0x10310000
 800324c:	10220000 	.word	0x10220000
 8003250:	10210000 	.word	0x10210000
 8003254:	10120000 	.word	0x10120000
 8003258:	10110000 	.word	0x10110000
 800325c:	40021000 	.word	0x40021000
 8003260:	40010000 	.word	0x40010000
 8003264:	40010800 	.word	0x40010800
 8003268:	40010c00 	.word	0x40010c00
 800326c:	40011000 	.word	0x40011000
 8003270:	40011400 	.word	0x40011400
 8003274:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_GPIO_Init+0x304>)
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	43db      	mvns	r3, r3
 8003280:	4909      	ldr	r1, [pc, #36]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003282:	4013      	ands	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f ae8e 	bne.w	8002fb8 <HAL_GPIO_Init+0x14>
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	372c      	adds	r7, #44	; 0x2c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]
 80032e6:	4613      	mov	r3, r2
 80032e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ea:	787b      	ldrb	r3, [r7, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f0:	887a      	ldrh	r2, [r7, #2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032f6:	e003      	b.n	8003300 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
	...

0800330c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd fe60 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40010400 	.word	0x40010400

0800333c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	420e0020 	.word	0x420e0020

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e26c      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8087 	beq.w	8003482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00c      	beq.n	800339a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d112      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d10b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06c      	beq.n	8003480 <HAL_RCC_OscConfig+0x12c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d168      	bne.n	8003480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e246      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x76>
 80033bc:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7f      	ldr	r2, [pc, #508]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e02e      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7a      	ldr	r2, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a77      	ldr	r2, [pc, #476]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0xbc>
 80033f6:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a71      	ldr	r2, [pc, #452]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6e      	ldr	r2, [pc, #440]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 8003410:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6a      	ldr	r2, [pc, #424]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff fc06 	bl	8002c40 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7ff fc02 	bl	8002c40 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1fa      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xe4>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7ff fbf2 	bl	8002c40 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7ff fbee 	bl	8002c40 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1e6      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x10c>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349a:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1ba      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4939      	ldr	r1, [pc, #228]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7ff fba7 	bl	8002c40 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7ff fba3 	bl	8002c40 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e19b      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4927      	ldr	r1, [pc, #156]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7ff fb86 	bl	8002c40 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7ff fb82 	bl	8002c40 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e17a      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03a      	beq.n	80035d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7ff fb66 	bl	8002c40 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7ff fb62 	bl	8002c40 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e15a      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003596:	2001      	movs	r0, #1
 8003598:	f000 fad8 	bl	8003b4c <RCC_Delay>
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7ff fb4c 	bl	8002c40 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	e00f      	b.n	80035cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7ff fb48 	bl	8002c40 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d908      	bls.n	80035cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e140      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	42420000 	.word	0x42420000
 80035c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e9      	bne.n	80035ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a6 	beq.w	8003732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b97      	ldr	r3, [pc, #604]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4b94      	ldr	r3, [pc, #592]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a93      	ldr	r2, [pc, #588]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b91      	ldr	r3, [pc, #580]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b8e      	ldr	r3, [pc, #568]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b8b      	ldr	r3, [pc, #556]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a8a      	ldr	r2, [pc, #552]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7ff fb09 	bl	8002c40 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7ff fb05 	bl	8002c40 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0fd      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x312>
 8003658:	4b7b      	ldr	r3, [pc, #492]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a7a      	ldr	r2, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e02d      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x334>
 800366e:	4b76      	ldr	r3, [pc, #472]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a75      	ldr	r2, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a72      	ldr	r2, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
 8003686:	e01c      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x356>
 8003690:	4b6d      	ldr	r3, [pc, #436]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a6c      	ldr	r2, [pc, #432]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 80036aa:	4b67      	ldr	r3, [pc, #412]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a66      	ldr	r2, [pc, #408]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7ff fab9 	bl	8002c40 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7ff fab5 	bl	8002c40 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0ab      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x37e>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7ff faa3 	bl	8002c40 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7ff fa9f 	bl	8002c40 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e095      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4a47      	ldr	r2, [pc, #284]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8081 	beq.w	800383e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d061      	beq.n	800380c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d146      	bne.n	80037de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7ff fa73 	bl	8002c40 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7ff fa6f 	bl	8002c40 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e067      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d108      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	492d      	ldr	r1, [pc, #180]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a19      	ldr	r1, [r3, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	430b      	orrs	r3, r1
 80037aa:	4927      	ldr	r1, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7ff fa43 	bl	8002c40 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7ff fa3f 	bl	8002c40 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e037      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x46a>
 80037dc:	e02f      	b.n	800383e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7ff fa2c 	bl	8002c40 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7ff fa28 	bl	8002c40 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e020      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x498>
 800380a:	e018      	b.n	800383e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e013      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	429a      	cmp	r2, r3
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	42420060 	.word	0x42420060

08003854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 0207 	bic.w	r2, r3, #7
 800387e:	4965      	ldr	r1, [pc, #404]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d040      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d115      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4936      	ldr	r1, [pc, #216]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7ff f97c 	bl	8002c40 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7ff f978 	bl	8002c40 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e053      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d210      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	4922      	ldr	r1, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1cc>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1d0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f8da 	bl	8002bbc <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	080069e4 	.word	0x080069e4
 8003a20:	20000030 	.word	0x20000030
 8003a24:	20000034 	.word	0x20000034

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b490      	push	{r4, r7}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a30:	1d3c      	adds	r4, r7, #4
 8003a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a38:	f240 2301 	movw	r3, #513	; 0x201
 8003a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x40>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x46>
 8003a66:	e02d      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6a:	623b      	str	r3, [r7, #32]
      break;
 8003a6c:	e02d      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c5b      	lsrs	r3, r3, #17
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa6:	fb02 f203 	mul.w	r2, r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	623b      	str	r3, [r7, #32]
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac6:	623b      	str	r3, [r7, #32]
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	; 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc90      	pop	{r4, r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	080069c4 	.word	0x080069c4
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	003d0900 	.word	0x003d0900

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000030 	.word	0x20000030

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff2 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	080069f4 	.word	0x080069f4

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffde 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0adb      	lsrs	r3, r3, #11
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	080069f4 	.word	0x080069f4

08003b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCC_Delay+0x34>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <RCC_Delay+0x38>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0a5b      	lsrs	r3, r3, #9
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b68:	bf00      	nop
  }
  while (Delay --);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f9      	bne.n	8003b68 <RCC_Delay+0x1c>
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000030 	.word	0x20000030
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d07d      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba8:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4a4b      	ldr	r2, [pc, #300]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	61d3      	str	r3, [r2, #28]
 8003bc0:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b46      	ldr	r3, [pc, #280]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d118      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bdc:	4b43      	ldr	r3, [pc, #268]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a42      	ldr	r2, [pc, #264]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be8:	f7ff f82a 	bl	8002c40 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7ff f826 	bl	8002c40 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e06d      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02e      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d027      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3c:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c42:	4a29      	ldr	r2, [pc, #164]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d014      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fff5 	bl	8002c40 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe fff1 	bl	8002c40 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e036      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ee      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4917      	ldr	r1, [pc, #92]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	490b      	ldr	r1, [pc, #44]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42420440 	.word	0x42420440

08003cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08d      	sub	sp, #52	; 0x34
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cfc:	4b5a      	ldr	r3, [pc, #360]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cfe:	f107 040c 	add.w	r4, r7, #12
 8003d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d08:	f240 2301 	movw	r3, #513	; 0x201
 8003d0c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	2300      	movs	r3, #0
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	f200 8091 	bhi.w	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d04c      	beq.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d07c      	beq.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d3c:	e089      	b.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d44:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8082 	beq.w	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	0c9b      	lsrs	r3, r3, #18
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d5e:	4413      	add	r3, r2
 8003d60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d64:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d018      	beq.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d70:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c5b      	lsrs	r3, r3, #17
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d7e:	4413      	add	r3, r2
 8003d80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d90:	4a37      	ldr	r2, [pc, #220]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da0:	e004      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	4a33      	ldr	r2, [pc, #204]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003dac:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dbe:	e04a      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dce:	e042      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003dd0:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de0:	d108      	bne.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df2:	e01f      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfe:	d109      	bne.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003e00:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003e0c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e12:	e00f      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1e:	d11c      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e20:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003e2c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e32:	e012      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e34:	e011      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e36:	f7ff fe75 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0b9b      	lsrs	r3, r3, #14
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	3301      	adds	r3, #1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e50:	e004      	b.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e5a:	bf00      	nop
    }
  }
  return (frequency);
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3734      	adds	r7, #52	; 0x34
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	080069d4 	.word	0x080069d4
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	007a1200 	.word	0x007a1200
 8003e74:	003d0900 	.word	0x003d0900
 8003e78:	aaaaaaab 	.word	0xaaaaaaab

08003e7c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e084      	b.n	8003f9c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7c5b      	ldrb	r3, [r3, #17]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe f9be 	bl	8002224 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9c8 	bl	8004244 <HAL_RTC_WaitForSynchro>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e06b      	b.n	8003f9c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fa81 	bl	80043cc <RTC_EnterInitMode>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e060      	b.n	8003f9c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0207 	bic.w	r2, r2, #7
 8003ee8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <HAL_RTC_Init+0x128>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <HAL_RTC_Init+0x128>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RTC_Init+0x128>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4926      	ldr	r1, [pc, #152]	; (8003fa4 <HAL_RTC_Init+0x128>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d003      	beq.n	8003f22 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e00e      	b.n	8003f40 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7ff fee6 	bl	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f28:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e030      	b.n	8003f9c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 010f 	bic.w	r1, r3, #15
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	0c1a      	lsrs	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	b291      	uxth	r1, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa55 	bl	800441c <RTC_ExitInitMode>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00c      	b.n	8003f9c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40006c00 	.word	0x40006c00

08003fa8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RTC_SetTime+0x20>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e080      	b.n	80040ce <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	7c1b      	ldrb	r3, [r3, #16]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RTC_SetTime+0x30>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e07a      	b.n	80040ce <HAL_RTC_SetTime+0x126>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d113      	bne.n	8004012 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ff4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	460b      	mov	r3, r1
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a5b      	subs	r3, r3, r1
 8004004:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004006:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800400c:	4413      	add	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e01e      	b.n	8004050 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa28 	bl	800446c <RTC_Bcd2ToByte>
 800401c:	4603      	mov	r3, r0
 800401e:	461a      	mov	r2, r3
 8004020:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004024:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fa1d 	bl	800446c <RTC_Bcd2ToByte>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800403e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	789b      	ldrb	r3, [r3, #2]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fa11 	bl	800446c <RTC_Bcd2ToByte>
 800404a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800404c:	4423      	add	r3, r4
 800404e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004050:	6979      	ldr	r1, [r7, #20]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f953 	bl	80042fe <RTC_WriteTimeCounter>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2204      	movs	r2, #4
 8004062:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e02f      	b.n	80040ce <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0205 	bic.w	r2, r2, #5
 800407c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f964 	bl	800434c <RTC_ReadAlarmCounter>
 8004084:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d018      	beq.n	80040c0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	429a      	cmp	r2, r3
 8004094:	d214      	bcs.n	80040c0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800409c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040a0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040a2:	6939      	ldr	r1, [r7, #16]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f96a 	bl	800437e <RTC_WriteAlarmCounter>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2204      	movs	r2, #4
 80040b4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e006      	b.n	80040ce <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd90      	pop	{r4, r7, pc}
	...

080040d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_RTC_SetDate+0x24>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e097      	b.n	8004230 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	7c1b      	ldrb	r3, [r3, #16]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_RTC_SetDate+0x34>
 8004108:	2302      	movs	r3, #2
 800410a:	e091      	b.n	8004230 <HAL_RTC_SetDate+0x158>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2202      	movs	r2, #2
 8004116:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	78da      	ldrb	r2, [r3, #3]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	785a      	ldrb	r2, [r3, #1]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	789a      	ldrb	r2, [r3, #2]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	739a      	strb	r2, [r3, #14]
 8004136:	e01a      	b.n	800416e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	78db      	ldrb	r3, [r3, #3]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f995 	bl	800446c <RTC_Bcd2ToByte>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f98c 	bl	800446c <RTC_Bcd2ToByte>
 8004154:	4603      	mov	r3, r0
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	789b      	ldrb	r3, [r3, #2]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f983 	bl	800446c <RTC_Bcd2ToByte>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	7bdb      	ldrb	r3, [r3, #15]
 8004172:	4618      	mov	r0, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	7b59      	ldrb	r1, [r3, #13]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	7b9b      	ldrb	r3, [r3, #14]
 800417c:	461a      	mov	r2, r3
 800417e:	f000 f993 	bl	80044a8 <RTC_WeekDayNum>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	7b1a      	ldrb	r2, [r3, #12]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f883 	bl	800429e <RTC_ReadTimeCounter>
 8004198:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4a26      	ldr	r2, [pc, #152]	; (8004238 <HAL_RTC_SetDate+0x160>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0adb      	lsrs	r3, r3, #11
 80041a4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b18      	cmp	r3, #24
 80041aa:	d93a      	bls.n	8004222 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4a23      	ldr	r2, [pc, #140]	; (800423c <HAL_RTC_SetDate+0x164>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	4a22      	ldr	r2, [pc, #136]	; (8004240 <HAL_RTC_SetDate+0x168>)
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f89a 	bl	80042fe <RTC_WriteTimeCounter>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2204      	movs	r2, #4
 80041d4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e027      	b.n	8004230 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f8b3 	bl	800434c <RTC_ReadAlarmCounter>
 80041e6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d018      	beq.n	8004222 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d214      	bcs.n	8004222 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80041fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004202:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f8b9 	bl	800437e <RTC_WriteAlarmCounter>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2204      	movs	r2, #4
 8004216:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e006      	b.n	8004230 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	91a2b3c5 	.word	0x91a2b3c5
 800423c:	aaaaaaab 	.word	0xaaaaaaab
 8004240:	00015180 	.word	0x00015180

08004244 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e01d      	b.n	8004296 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0208 	bic.w	r2, r2, #8
 8004268:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800426a:	f7fe fce9 	bl	8002c40 <HAL_GetTick>
 800426e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004270:	e009      	b.n	8004286 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004272:	f7fe fce5 	bl	8002c40 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004280:	d901      	bls.n	8004286 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e007      	b.n	8004296 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ee      	beq.n	8004272 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	827b      	strh	r3, [r7, #18]
 80042aa:	2300      	movs	r3, #0
 80042ac:	823b      	strh	r3, [r7, #16]
 80042ae:	2300      	movs	r3, #0
 80042b0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80042ce:	8a7a      	ldrh	r2, [r7, #18]
 80042d0:	8a3b      	ldrh	r3, [r7, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d008      	beq.n	80042e8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80042d6:	8a3b      	ldrh	r3, [r7, #16]
 80042d8:	041a      	lsls	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e004      	b.n	80042f2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80042e8:	8a7b      	ldrh	r3, [r7, #18]
 80042ea:	041a      	lsls	r2, r3, #16
 80042ec:	89fb      	ldrh	r3, [r7, #14]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80042f2:	697b      	ldr	r3, [r7, #20]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f85d 	bl	80043cc <RTC_EnterInitMode>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e011      	b.n	8004342 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	0c12      	lsrs	r2, r2, #16
 8004326:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b292      	uxth	r2, r2
 8004330:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f872 	bl	800441c <RTC_ExitInitMode>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	81fb      	strh	r3, [r7, #14]
 8004358:	2300      	movs	r3, #0
 800435a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800436c:	89fb      	ldrh	r3, [r7, #14]
 800436e:	041a      	lsls	r2, r3, #16
 8004370:	89bb      	ldrh	r3, [r7, #12]
 8004372:	4313      	orrs	r3, r2
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f81d 	bl	80043cc <RTC_EnterInitMode>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
 800439c:	e011      	b.n	80043c2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	0c12      	lsrs	r2, r2, #16
 80043a6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b292      	uxth	r2, r2
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f832 	bl	800441c <RTC_ExitInitMode>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80043d8:	f7fe fc32 	bl	8002c40 <HAL_GetTick>
 80043dc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043de:	e009      	b.n	80043f4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043e0:	f7fe fc2e 	bl	8002c40 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ee:	d901      	bls.n	80043f4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e00f      	b.n	8004414 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ee      	beq.n	80043e0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0210 	orr.w	r2, r2, #16
 8004410:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0210 	bic.w	r2, r2, #16
 8004436:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004438:	f7fe fc02 	bl	8002c40 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800443e:	e009      	b.n	8004454 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004440:	f7fe fbfe 	bl	8002c40 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800444e:	d901      	bls.n	8004454 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e007      	b.n	8004464 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ee      	beq.n	8004440 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	b2da      	uxtb	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4413      	add	r3, r2
 800449a:	b2db      	uxtb	r3, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
	...

080044a8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
 80044b4:	4613      	mov	r3, r2
 80044b6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80044c6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d82d      	bhi.n	800452a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	4613      	mov	r3, r2
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4413      	add	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <RTC_WeekDayNum+0xe4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	085a      	lsrs	r2, r3, #1
 80044e2:	78bb      	ldrb	r3, [r7, #2]
 80044e4:	441a      	add	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	441a      	add	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4926      	ldr	r1, [pc, #152]	; (8004590 <RTC_WeekDayNum+0xe8>)
 80044f8:	fba1 1303 	umull	r1, r3, r1, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3b01      	subs	r3, #1
 8004504:	4922      	ldr	r1, [pc, #136]	; (8004590 <RTC_WeekDayNum+0xe8>)
 8004506:	fba1 1303 	umull	r1, r3, r1, r3
 800450a:	09db      	lsrs	r3, r3, #7
 800450c:	4413      	add	r3, r2
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	4b20      	ldr	r3, [pc, #128]	; (8004594 <RTC_WeekDayNum+0xec>)
 8004512:	fba3 1302 	umull	r1, r3, r3, r2
 8004516:	1ad1      	subs	r1, r2, r3
 8004518:	0849      	lsrs	r1, r1, #1
 800451a:	440b      	add	r3, r1
 800451c:	0899      	lsrs	r1, r3, #2
 800451e:	460b      	mov	r3, r1
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	1a5b      	subs	r3, r3, r1
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e029      	b.n	800457e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <RTC_WeekDayNum+0xe4>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	085a      	lsrs	r2, r3, #1
 800453e:	78bb      	ldrb	r3, [r7, #2]
 8004540:	441a      	add	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	441a      	add	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	441a      	add	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4910      	ldr	r1, [pc, #64]	; (8004590 <RTC_WeekDayNum+0xe8>)
 8004550:	fba1 1303 	umull	r1, r3, r1, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	490d      	ldr	r1, [pc, #52]	; (8004590 <RTC_WeekDayNum+0xe8>)
 800455c:	fba1 1303 	umull	r1, r3, r1, r3
 8004560:	09db      	lsrs	r3, r3, #7
 8004562:	4413      	add	r3, r2
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <RTC_WeekDayNum+0xec>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	1ad1      	subs	r1, r2, r3
 800456e:	0849      	lsrs	r1, r1, #1
 8004570:	440b      	add	r3, r1
 8004572:	0899      	lsrs	r1, r3, #2
 8004574:	460b      	mov	r3, r1
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a5b      	subs	r3, r3, r1
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	b2db      	uxtb	r3, r3
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	38e38e39 	.word	0x38e38e39
 8004590:	51eb851f 	.word	0x51eb851f
 8004594:	24924925 	.word	0x24924925

08004598 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <HAL_RTCEx_BKUPWrite+0x30>)
 80045aa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	b292      	uxth	r2, r2
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	40006c00 	.word	0x40006c00

080045cc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RTCEx_BKUPRead+0x34>)
 80045e0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80045f4:	68bb      	ldr	r3, [r7, #8]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40006c00 	.word	0x40006c00

08004604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e076      	b.n	8004704 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004626:	d009      	beq.n	800463c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
 800462e:	e005      	b.n	800463c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd fe3e 	bl	80022d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	ea42 0103 	orr.w	r1, r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	0c1a      	lsrs	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f002 0204 	and.w	r2, r2, #4
 80046e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_SPI_Transmit+0x22>
 800472a:	2302      	movs	r3, #2
 800472c:	e126      	b.n	800497c <HAL_SPI_Transmit+0x270>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004736:	f7fe fa83 	bl	8002c40 <HAL_GetTick>
 800473a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004750:	e10b      	b.n	800496a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_SPI_Transmit+0x52>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004762:	e102      	b.n	800496a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d10f      	bne.n	80047cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d007      	beq.n	80047ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f2:	d14b      	bne.n	800488c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_SPI_Transmit+0xf6>
 80047fc:	8afb      	ldrh	r3, [r7, #22]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d13e      	bne.n	8004880 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004826:	e02b      	b.n	8004880 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d112      	bne.n	800485c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	86da      	strh	r2, [r3, #54]	; 0x36
 800485a:	e011      	b.n	8004880 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485c:	f7fe f9f0 	bl	8002c40 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d803      	bhi.n	8004874 <HAL_SPI_Transmit+0x168>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d102      	bne.n	800487a <HAL_SPI_Transmit+0x16e>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800487e:	e074      	b.n	800496a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ce      	bne.n	8004828 <HAL_SPI_Transmit+0x11c>
 800488a:	e04c      	b.n	8004926 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_Transmit+0x18e>
 8004894:	8afb      	ldrh	r3, [r7, #22]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d140      	bne.n	800491c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048c0:	e02c      	b.n	800491c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d113      	bne.n	80048f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80048f6:	e011      	b.n	800491c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f8:	f7fe f9a2 	bl	8002c40 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d803      	bhi.n	8004910 <HAL_SPI_Transmit+0x204>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d102      	bne.n	8004916 <HAL_SPI_Transmit+0x20a>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	77fb      	strb	r3, [r7, #31]
          goto error;
 800491a:	e026      	b.n	800496a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1cd      	bne.n	80048c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f8b2 	bl	8004a94 <SPI_EndRxTxTransaction>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e000      	b.n	800496a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497a:	7ffb      	ldrb	r3, [r7, #31]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004994:	f7fe f954 	bl	8002c40 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049a4:	f7fe f94c 	bl	8002c40 <HAL_GetTick>
 80049a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049aa:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	015b      	lsls	r3, r3, #5
 80049b0:	0d1b      	lsrs	r3, r3, #20
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ba:	e054      	b.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d050      	beq.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049c4:	f7fe f93c 	bl	8002c40 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d902      	bls.n	80049da <SPI_WaitFlagStateUntilTimeout+0x56>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d13d      	bne.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f2:	d111      	bne.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fc:	d004      	beq.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d107      	bne.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d10f      	bne.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e017      	b.n	8004a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d19b      	bne.n	80049bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000030 	.word	0x20000030

08004a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff ff6a 	bl	8004984 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e000      	b.n	8004ac8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e041      	b.n	8004b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fd fe9c 	bl	8002834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 fccc 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e03a      	b.n	8004bfe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_TIM_Base_Start_IT+0x98>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00e      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x58>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d009      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x58>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <HAL_TIM_Base_Start_IT+0x9c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x58>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_TIM_Base_Start_IT+0xa0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d111      	bne.n	8004bec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d010      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bea:	e007      	b.n	8004bfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800

08004c14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a1a      	ldr	r2, [r3, #32]
 8004c32:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <HAL_TIM_Base_Stop_IT+0x48>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	f240 4344 	movw	r3, #1092	; 0x444
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_Base_Stop_IT+0x48>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e041      	b.n	8004d06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f839 	bl	8004d0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fbfc 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_IC_Start_IT+0x1a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e013      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x42>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d104      	bne.n	8004d4a <HAL_TIM_IC_Start_IT+0x2a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e00b      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x42>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_IC_Start_IT+0x3a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	e003      	b.n	8004d62 <HAL_TIM_IC_Start_IT+0x42>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <HAL_TIM_IC_Start_IT+0x54>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e013      	b.n	8004d9c <HAL_TIM_IC_Start_IT+0x7c>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d104      	bne.n	8004d84 <HAL_TIM_IC_Start_IT+0x64>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e00b      	b.n	8004d9c <HAL_TIM_IC_Start_IT+0x7c>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d104      	bne.n	8004d94 <HAL_TIM_IC_Start_IT+0x74>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e003      	b.n	8004d9c <HAL_TIM_IC_Start_IT+0x7c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0b3      	b.n	8004f16 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_IC_Start_IT+0x9e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_IC_Start_IT+0xc6>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_IC_Start_IT+0xae>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_IC_Start_IT+0xc6>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_IC_Start_IT+0xbe>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_IC_Start_IT+0xc6>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_IC_Start_IT+0xd6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df4:	e013      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_IC_Start_IT+0xe6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e04:	e00b      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0xfe>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_IC_Start_IT+0xf6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e14:	e003      	b.n	8004e1e <HAL_TIM_IC_Start_IT+0xfe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d841      	bhi.n	8004ea8 <HAL_TIM_IC_Start_IT+0x188>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <HAL_TIM_IC_Start_IT+0x10c>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004ea9 	.word	0x08004ea9
 8004e34:	08004ea9 	.word	0x08004ea9
 8004e38:	08004ea9 	.word	0x08004ea9
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004ea9 	.word	0x08004ea9
 8004e44:	08004ea9 	.word	0x08004ea9
 8004e48:	08004ea9 	.word	0x08004ea9
 8004e4c:	08004e85 	.word	0x08004e85
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ea9 	.word	0x08004ea9
 8004e58:	08004ea9 	.word	0x08004ea9
 8004e5c:	08004e97 	.word	0x08004e97
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0202 	orr.w	r2, r2, #2
 8004e6e:	60da      	str	r2, [r3, #12]
      break;
 8004e70:	e01b      	b.n	8004eaa <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0204 	orr.w	r2, r2, #4
 8004e80:	60da      	str	r2, [r3, #12]
      break;
 8004e82:	e012      	b.n	8004eaa <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0208 	orr.w	r2, r2, #8
 8004e92:	60da      	str	r2, [r3, #12]
      break;
 8004e94:	e009      	b.n	8004eaa <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0210 	orr.w	r2, r2, #16
 8004ea4:	60da      	str	r2, [r3, #12]
      break;
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004ea8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fcff 	bl	80058b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_TIM_IC_Start_IT+0x200>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_TIM_IC_Start_IT+0x1c0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d009      	beq.n	8004ee0 <HAL_TIM_IC_Start_IT+0x1c0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <HAL_TIM_IC_Start_IT+0x204>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIM_IC_Start_IT+0x1c0>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_TIM_IC_Start_IT+0x208>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d111      	bne.n	8004f04 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d010      	beq.n	8004f14 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	e007      	b.n	8004f14 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800

08004f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0202 	mvn.w	r2, #2
 8004f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fdda 	bl	8001b28 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa7c 	bl	8005474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fa82 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0204 	mvn.w	r2, #4
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc fdb0 	bl	8001b28 <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa52 	bl	8005474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa58 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0208 	mvn.w	r2, #8
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2204      	movs	r2, #4
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc fd86 	bl	8001b28 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa28 	bl	8005474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fa2e 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b10      	cmp	r3, #16
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0210 	mvn.w	r2, #16
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2208      	movs	r2, #8
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc fd5c 	bl	8001b28 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f9fe 	bl	8005474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fa04 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0201 	mvn.w	r2, #1
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fb fd78 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fc79 	bl	80059ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d10e      	bne.n	8005108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d107      	bne.n	8005108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9c8 	bl	8005498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d10e      	bne.n	8005134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d107      	bne.n	8005134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0220 	mvn.w	r2, #32
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fc44 	bl	80059bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005152:	2302      	movs	r3, #2
 8005154:	e082      	b.n	800525c <HAL_TIM_IC_ConfigChannel+0x120>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 f9fc 	bl	8005570 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 020c 	bic.w	r2, r2, #12
 8005186:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6999      	ldr	r1, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
 800519a:	e05a      	b.n	8005252 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d11c      	bne.n	80051dc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f000 fa65 	bl	8005680 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6999      	ldr	r1, [r3, #24]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	619a      	str	r2, [r3, #24]
 80051da:	e03a      	b.n	8005252 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d11b      	bne.n	800521a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6819      	ldr	r1, [r3, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f000 fab0 	bl	8005756 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 020c 	bic.w	r2, r2, #12
 8005204:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69d9      	ldr	r1, [r3, #28]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	61da      	str	r2, [r3, #28]
 8005218:	e01b      	b.n	8005252 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6819      	ldr	r1, [r3, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f000 facf 	bl	80057cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800523c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69d9      	ldr	r1, [r3, #28]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	021a      	lsls	r2, r3, #8
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIM_ConfigClockSource+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e0b3      	b.n	80053e4 <HAL_TIM_ConfigClockSource+0x180>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800529a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b4:	d03e      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0xd0>
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ba:	f200 8087 	bhi.w	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c2:	f000 8085 	beq.w	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ca:	d87f      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052cc:	2b70      	cmp	r3, #112	; 0x70
 80052ce:	d01a      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0xa2>
 80052d0:	2b70      	cmp	r3, #112	; 0x70
 80052d2:	d87b      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052d4:	2b60      	cmp	r3, #96	; 0x60
 80052d6:	d050      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x116>
 80052d8:	2b60      	cmp	r3, #96	; 0x60
 80052da:	d877      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052dc:	2b50      	cmp	r3, #80	; 0x50
 80052de:	d03c      	beq.n	800535a <HAL_TIM_ConfigClockSource+0xf6>
 80052e0:	2b50      	cmp	r3, #80	; 0x50
 80052e2:	d873      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	d058      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x136>
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d86f      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052ec:	2b30      	cmp	r3, #48	; 0x30
 80052ee:	d064      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x156>
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d86b      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d060      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x156>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d867      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d05c      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x156>
 8005300:	2b10      	cmp	r3, #16
 8005302:	d05a      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005304:	e062      	b.n	80053cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6899      	ldr	r1, [r3, #8]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f000 faaf 	bl	8005878 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	609a      	str	r2, [r3, #8]
      break;
 8005332:	e04e      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	6899      	ldr	r1, [r3, #8]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f000 fa98 	bl	8005878 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005356:	609a      	str	r2, [r3, #8]
      break;
 8005358:	e03b      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6859      	ldr	r1, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	461a      	mov	r2, r3
 8005368:	f000 f95c 	bl	8005624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2150      	movs	r1, #80	; 0x50
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fa66 	bl	8005844 <TIM_ITRx_SetConfig>
      break;
 8005378:	e02b      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6859      	ldr	r1, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	461a      	mov	r2, r3
 8005388:	f000 f9b6 	bl	80056f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2160      	movs	r1, #96	; 0x60
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fa56 	bl	8005844 <TIM_ITRx_SetConfig>
      break;
 8005398:	e01b      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6859      	ldr	r1, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f000 f93c 	bl	8005624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2140      	movs	r1, #64	; 0x40
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fa46 	bl	8005844 <TIM_ITRx_SetConfig>
      break;
 80053b8:	e00b      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f000 fa3d 	bl	8005844 <TIM_ITRx_SetConfig>
        break;
 80053ca:	e002      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d831      	bhi.n	8005464 <HAL_TIM_ReadCapturedValue+0x78>
 8005400:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	0800543d 	.word	0x0800543d
 800540c:	08005465 	.word	0x08005465
 8005410:	08005465 	.word	0x08005465
 8005414:	08005465 	.word	0x08005465
 8005418:	08005447 	.word	0x08005447
 800541c:	08005465 	.word	0x08005465
 8005420:	08005465 	.word	0x08005465
 8005424:	08005465 	.word	0x08005465
 8005428:	08005451 	.word	0x08005451
 800542c:	08005465 	.word	0x08005465
 8005430:	08005465 	.word	0x08005465
 8005434:	08005465 	.word	0x08005465
 8005438:	0800545b 	.word	0x0800545b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005442:	60fb      	str	r3, [r7, #12]

      break;
 8005444:	e00f      	b.n	8005466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	60fb      	str	r3, [r7, #12]

      break;
 800544e:	e00a      	b.n	8005466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	60fb      	str	r3, [r7, #12]

      break;
 8005458:	e005      	b.n	8005466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	60fb      	str	r3, [r7, #12]

      break;
 8005462:	e000      	b.n	8005466 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005464:	bf00      	nop
  }

  return tmpreg;
 8005466:	68fb      	ldr	r3, [r7, #12]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
	...

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a29      	ldr	r2, [pc, #164]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d007      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a19      	ldr	r2, [pc, #100]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_Base_SetConfig+0xc0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d108      	bne.n	8005520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d103      	bne.n	8005554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	615a      	str	r2, [r3, #20]
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <TIM_TI1_SetConfig+0xa8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_TI1_SetConfig+0x46>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d007      	beq.n	80055b6 <TIM_TI1_SetConfig+0x46>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <TIM_TI1_SetConfig+0xac>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_TI1_SetConfig+0x46>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <TIM_TI1_SetConfig+0xb0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <TIM_TI1_SetConfig+0x4a>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <TIM_TI1_SetConfig+0x4c>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e003      	b.n	80055da <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f023 030a 	bic.w	r3, r3, #10
 80055f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 030a 	and.w	r3, r3, #10
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800

08005624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0201 	bic.w	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 030a 	bic.w	r3, r3, #10
 8005660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0210 	bic.w	r2, r3, #16
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	031b      	lsls	r3, r3, #12
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0210 	bic.w	r2, r3, #16
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005722:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	031b      	lsls	r3, r3, #12
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	b2db      	uxtb	r3, r3
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800580a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	031b      	lsls	r3, r3, #12
 8005810:	b29b      	uxth	r3, r3
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800581e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	031b      	lsls	r3, r3, #12
 8005824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	f043 0307 	orr.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	609a      	str	r2, [r3, #8]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	021a      	lsls	r2, r3, #8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	431a      	orrs	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4313      	orrs	r3, r2
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	609a      	str	r2, [r3, #8]
}
 80058ac:	bf00      	nop
 80058ae:	371c      	adds	r7, #28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	2201      	movs	r2, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	401a      	ands	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
	...

08005900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005914:	2302      	movs	r3, #2
 8005916:	e046      	b.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005964:	d009      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a10      	ldr	r2, [pc, #64]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d10c      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800

080059bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e03f      	b.n	8005a72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd f814 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f905 	bl	8005c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b08a      	sub	sp, #40	; 0x28
 8005a7e:	af02      	add	r7, sp, #8
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	4613      	mov	r3, r2
 8005a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d17c      	bne.n	8005b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_UART_Transmit+0x2c>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e075      	b.n	8005b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Transmit+0x3e>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e06e      	b.n	8005b96 <HAL_UART_Transmit+0x11c>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2221      	movs	r2, #33	; 0x21
 8005aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ace:	f7fd f8b7 	bl	8002c40 <HAL_GetTick>
 8005ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae8:	d108      	bne.n	8005afc <HAL_UART_Transmit+0x82>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	e003      	b.n	8005b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b0c:	e02a      	b.n	8005b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2200      	movs	r2, #0
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f840 	bl	8005b9e <UART_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e036      	b.n	8005b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	3302      	adds	r3, #2
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	e007      	b.n	8005b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	3301      	adds	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1cf      	bne.n	8005b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2140      	movs	r1, #64	; 0x40
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f810 	bl	8005b9e <UART_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
  }
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bae:	e02c      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d028      	beq.n	8005c0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <UART_WaitOnFlagUntilTimeout+0x30>
 8005bbe:	f7fd f83f 	bl	8002c40 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d21d      	bcs.n	8005c0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bdc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e00f      	b.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4013      	ands	r3, r2
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d0c3      	beq.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c6e:	f023 030c 	bic.w	r3, r3, #12
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <UART_SetConfig+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d103      	bne.n	8005ca4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c9c:	f7fd ff42 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	e002      	b.n	8005caa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fd ff2a 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005ca8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <UART_SetConfig+0x118>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	0119      	lsls	r1, r3, #4
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009a      	lsls	r2, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <UART_SetConfig+0x118>)
 8005ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2064      	movs	r0, #100	; 0x64
 8005cea:	fb00 f303 	mul.w	r3, r0, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <UART_SetConfig+0x118>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d00:	4419      	add	r1, r3
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009a      	lsls	r2, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <UART_SetConfig+0x118>)
 8005d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2064      	movs	r0, #100	; 0x64
 8005d22:	fb00 f303 	mul.w	r3, r0, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	3332      	adds	r3, #50	; 0x32
 8005d2c:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <UART_SetConfig+0x118>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40013800 	.word	0x40013800
 8005d4c:	51eb851f 	.word	0x51eb851f

08005d50 <__errno>:
 8005d50:	4b01      	ldr	r3, [pc, #4]	; (8005d58 <__errno+0x8>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	2000003c 	.word	0x2000003c

08005d5c <__libc_init_array>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	2600      	movs	r6, #0
 8005d60:	4d0c      	ldr	r5, [pc, #48]	; (8005d94 <__libc_init_array+0x38>)
 8005d62:	4c0d      	ldr	r4, [pc, #52]	; (8005d98 <__libc_init_array+0x3c>)
 8005d64:	1b64      	subs	r4, r4, r5
 8005d66:	10a4      	asrs	r4, r4, #2
 8005d68:	42a6      	cmp	r6, r4
 8005d6a:	d109      	bne.n	8005d80 <__libc_init_array+0x24>
 8005d6c:	f000 fc5c 	bl	8006628 <_init>
 8005d70:	2600      	movs	r6, #0
 8005d72:	4d0a      	ldr	r5, [pc, #40]	; (8005d9c <__libc_init_array+0x40>)
 8005d74:	4c0a      	ldr	r4, [pc, #40]	; (8005da0 <__libc_init_array+0x44>)
 8005d76:	1b64      	subs	r4, r4, r5
 8005d78:	10a4      	asrs	r4, r4, #2
 8005d7a:	42a6      	cmp	r6, r4
 8005d7c:	d105      	bne.n	8005d8a <__libc_init_array+0x2e>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d84:	4798      	blx	r3
 8005d86:	3601      	adds	r6, #1
 8005d88:	e7ee      	b.n	8005d68 <__libc_init_array+0xc>
 8005d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8e:	4798      	blx	r3
 8005d90:	3601      	adds	r6, #1
 8005d92:	e7f2      	b.n	8005d7a <__libc_init_array+0x1e>
 8005d94:	08006a30 	.word	0x08006a30
 8005d98:	08006a30 	.word	0x08006a30
 8005d9c:	08006a30 	.word	0x08006a30
 8005da0:	08006a34 	.word	0x08006a34

08005da4 <memset>:
 8005da4:	4603      	mov	r3, r0
 8005da6:	4402      	add	r2, r0
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d100      	bne.n	8005dae <memset+0xa>
 8005dac:	4770      	bx	lr
 8005dae:	f803 1b01 	strb.w	r1, [r3], #1
 8005db2:	e7f9      	b.n	8005da8 <memset+0x4>

08005db4 <siprintf>:
 8005db4:	b40e      	push	{r1, r2, r3}
 8005db6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dba:	b500      	push	{lr}
 8005dbc:	b09c      	sub	sp, #112	; 0x70
 8005dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005dc0:	9002      	str	r0, [sp, #8]
 8005dc2:	9006      	str	r0, [sp, #24]
 8005dc4:	9107      	str	r1, [sp, #28]
 8005dc6:	9104      	str	r1, [sp, #16]
 8005dc8:	4808      	ldr	r0, [pc, #32]	; (8005dec <siprintf+0x38>)
 8005dca:	4909      	ldr	r1, [pc, #36]	; (8005df0 <siprintf+0x3c>)
 8005dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd0:	9105      	str	r1, [sp, #20]
 8005dd2:	6800      	ldr	r0, [r0, #0]
 8005dd4:	a902      	add	r1, sp, #8
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	f000 f868 	bl	8005eac <_svfiprintf_r>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	b01c      	add	sp, #112	; 0x70
 8005de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de8:	b003      	add	sp, #12
 8005dea:	4770      	bx	lr
 8005dec:	2000003c 	.word	0x2000003c
 8005df0:	ffff0208 	.word	0xffff0208

08005df4 <__ssputs_r>:
 8005df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	688e      	ldr	r6, [r1, #8]
 8005dfa:	4682      	mov	sl, r0
 8005dfc:	429e      	cmp	r6, r3
 8005dfe:	460c      	mov	r4, r1
 8005e00:	4690      	mov	r8, r2
 8005e02:	461f      	mov	r7, r3
 8005e04:	d838      	bhi.n	8005e78 <__ssputs_r+0x84>
 8005e06:	898a      	ldrh	r2, [r1, #12]
 8005e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e0c:	d032      	beq.n	8005e74 <__ssputs_r+0x80>
 8005e0e:	6825      	ldr	r5, [r4, #0]
 8005e10:	6909      	ldr	r1, [r1, #16]
 8005e12:	3301      	adds	r3, #1
 8005e14:	eba5 0901 	sub.w	r9, r5, r1
 8005e18:	6965      	ldr	r5, [r4, #20]
 8005e1a:	444b      	add	r3, r9
 8005e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e24:	106d      	asrs	r5, r5, #1
 8005e26:	429d      	cmp	r5, r3
 8005e28:	bf38      	it	cc
 8005e2a:	461d      	movcc	r5, r3
 8005e2c:	0553      	lsls	r3, r2, #21
 8005e2e:	d531      	bpl.n	8005e94 <__ssputs_r+0xa0>
 8005e30:	4629      	mov	r1, r5
 8005e32:	f000 fb53 	bl	80064dc <_malloc_r>
 8005e36:	4606      	mov	r6, r0
 8005e38:	b950      	cbnz	r0, 8005e50 <__ssputs_r+0x5c>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	f8ca 3000 	str.w	r3, [sl]
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	464a      	mov	r2, r9
 8005e52:	6921      	ldr	r1, [r4, #16]
 8005e54:	f000 face 	bl	80063f4 <memcpy>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	6126      	str	r6, [r4, #16]
 8005e66:	444e      	add	r6, r9
 8005e68:	6026      	str	r6, [r4, #0]
 8005e6a:	463e      	mov	r6, r7
 8005e6c:	6165      	str	r5, [r4, #20]
 8005e6e:	eba5 0509 	sub.w	r5, r5, r9
 8005e72:	60a5      	str	r5, [r4, #8]
 8005e74:	42be      	cmp	r6, r7
 8005e76:	d900      	bls.n	8005e7a <__ssputs_r+0x86>
 8005e78:	463e      	mov	r6, r7
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	f000 fac6 	bl	8006410 <memmove>
 8005e84:	68a3      	ldr	r3, [r4, #8]
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	1b9b      	subs	r3, r3, r6
 8005e8a:	4432      	add	r2, r6
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	60a3      	str	r3, [r4, #8]
 8005e90:	6022      	str	r2, [r4, #0]
 8005e92:	e7db      	b.n	8005e4c <__ssputs_r+0x58>
 8005e94:	462a      	mov	r2, r5
 8005e96:	f000 fb7b 	bl	8006590 <_realloc_r>
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d1e1      	bne.n	8005e64 <__ssputs_r+0x70>
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	6921      	ldr	r1, [r4, #16]
 8005ea4:	f000 face 	bl	8006444 <_free_r>
 8005ea8:	e7c7      	b.n	8005e3a <__ssputs_r+0x46>
	...

08005eac <_svfiprintf_r>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	4698      	mov	r8, r3
 8005eb2:	898b      	ldrh	r3, [r1, #12]
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	460d      	mov	r5, r1
 8005eba:	4614      	mov	r4, r2
 8005ebc:	b09d      	sub	sp, #116	; 0x74
 8005ebe:	d50e      	bpl.n	8005ede <_svfiprintf_r+0x32>
 8005ec0:	690b      	ldr	r3, [r1, #16]
 8005ec2:	b963      	cbnz	r3, 8005ede <_svfiprintf_r+0x32>
 8005ec4:	2140      	movs	r1, #64	; 0x40
 8005ec6:	f000 fb09 	bl	80064dc <_malloc_r>
 8005eca:	6028      	str	r0, [r5, #0]
 8005ecc:	6128      	str	r0, [r5, #16]
 8005ece:	b920      	cbnz	r0, 8005eda <_svfiprintf_r+0x2e>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	e0d1      	b.n	800607e <_svfiprintf_r+0x1d2>
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	616b      	str	r3, [r5, #20]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee8:	2330      	movs	r3, #48	; 0x30
 8005eea:	f04f 0901 	mov.w	r9, #1
 8005eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006098 <_svfiprintf_r+0x1ec>
 8005ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005efa:	4623      	mov	r3, r4
 8005efc:	469a      	mov	sl, r3
 8005efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f02:	b10a      	cbz	r2, 8005f08 <_svfiprintf_r+0x5c>
 8005f04:	2a25      	cmp	r2, #37	; 0x25
 8005f06:	d1f9      	bne.n	8005efc <_svfiprintf_r+0x50>
 8005f08:	ebba 0b04 	subs.w	fp, sl, r4
 8005f0c:	d00b      	beq.n	8005f26 <_svfiprintf_r+0x7a>
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4622      	mov	r2, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ff6d 	bl	8005df4 <__ssputs_r>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f000 80aa 	beq.w	8006074 <_svfiprintf_r+0x1c8>
 8005f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f22:	445a      	add	r2, fp
 8005f24:	9209      	str	r2, [sp, #36]	; 0x24
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80a2 	beq.w	8006074 <_svfiprintf_r+0x1c8>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f3a:	f10a 0a01 	add.w	sl, sl, #1
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f46:	931a      	str	r3, [sp, #104]	; 0x68
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	4851      	ldr	r0, [pc, #324]	; (8006098 <_svfiprintf_r+0x1ec>)
 8005f52:	f000 fa41 	bl	80063d8 <memchr>
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	b9d8      	cbnz	r0, 8005f92 <_svfiprintf_r+0xe6>
 8005f5a:	06d0      	lsls	r0, r2, #27
 8005f5c:	bf44      	itt	mi
 8005f5e:	2320      	movmi	r3, #32
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f64:	0711      	lsls	r1, r2, #28
 8005f66:	bf44      	itt	mi
 8005f68:	232b      	movmi	r3, #43	; 0x2b
 8005f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f72:	2b2a      	cmp	r3, #42	; 0x2a
 8005f74:	d015      	beq.n	8005fa2 <_svfiprintf_r+0xf6>
 8005f76:	4654      	mov	r4, sl
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f04f 0c0a 	mov.w	ip, #10
 8005f7e:	9a07      	ldr	r2, [sp, #28]
 8005f80:	4621      	mov	r1, r4
 8005f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f86:	3b30      	subs	r3, #48	; 0x30
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d94e      	bls.n	800602a <_svfiprintf_r+0x17e>
 8005f8c:	b1b0      	cbz	r0, 8005fbc <_svfiprintf_r+0x110>
 8005f8e:	9207      	str	r2, [sp, #28]
 8005f90:	e014      	b.n	8005fbc <_svfiprintf_r+0x110>
 8005f92:	eba0 0308 	sub.w	r3, r0, r8
 8005f96:	fa09 f303 	lsl.w	r3, r9, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	46a2      	mov	sl, r4
 8005f9e:	9304      	str	r3, [sp, #16]
 8005fa0:	e7d2      	b.n	8005f48 <_svfiprintf_r+0x9c>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	1d19      	adds	r1, r3, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	9103      	str	r1, [sp, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfbb      	ittet	lt
 8005fae:	425b      	neglt	r3, r3
 8005fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb4:	9307      	strge	r3, [sp, #28]
 8005fb6:	9307      	strlt	r3, [sp, #28]
 8005fb8:	bfb8      	it	lt
 8005fba:	9204      	strlt	r2, [sp, #16]
 8005fbc:	7823      	ldrb	r3, [r4, #0]
 8005fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc0:	d10c      	bne.n	8005fdc <_svfiprintf_r+0x130>
 8005fc2:	7863      	ldrb	r3, [r4, #1]
 8005fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc6:	d135      	bne.n	8006034 <_svfiprintf_r+0x188>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	3402      	adds	r4, #2
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	9203      	str	r2, [sp, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bfb8      	it	lt
 8005fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060a8 <_svfiprintf_r+0x1fc>
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	7821      	ldrb	r1, [r4, #0]
 8005fe6:	f000 f9f7 	bl	80063d8 <memchr>
 8005fea:	b140      	cbz	r0, 8005ffe <_svfiprintf_r+0x152>
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	eba0 000a 	sub.w	r0, r0, sl
 8005ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ff6:	9b04      	ldr	r3, [sp, #16]
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	4303      	orrs	r3, r0
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006002:	2206      	movs	r2, #6
 8006004:	4825      	ldr	r0, [pc, #148]	; (800609c <_svfiprintf_r+0x1f0>)
 8006006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800600a:	f000 f9e5 	bl	80063d8 <memchr>
 800600e:	2800      	cmp	r0, #0
 8006010:	d038      	beq.n	8006084 <_svfiprintf_r+0x1d8>
 8006012:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <_svfiprintf_r+0x1f4>)
 8006014:	bb1b      	cbnz	r3, 800605e <_svfiprintf_r+0x1b2>
 8006016:	9b03      	ldr	r3, [sp, #12]
 8006018:	3307      	adds	r3, #7
 800601a:	f023 0307 	bic.w	r3, r3, #7
 800601e:	3308      	adds	r3, #8
 8006020:	9303      	str	r3, [sp, #12]
 8006022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006024:	4433      	add	r3, r6
 8006026:	9309      	str	r3, [sp, #36]	; 0x24
 8006028:	e767      	b.n	8005efa <_svfiprintf_r+0x4e>
 800602a:	460c      	mov	r4, r1
 800602c:	2001      	movs	r0, #1
 800602e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006032:	e7a5      	b.n	8005f80 <_svfiprintf_r+0xd4>
 8006034:	2300      	movs	r3, #0
 8006036:	f04f 0c0a 	mov.w	ip, #10
 800603a:	4619      	mov	r1, r3
 800603c:	3401      	adds	r4, #1
 800603e:	9305      	str	r3, [sp, #20]
 8006040:	4620      	mov	r0, r4
 8006042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006046:	3a30      	subs	r2, #48	; 0x30
 8006048:	2a09      	cmp	r2, #9
 800604a:	d903      	bls.n	8006054 <_svfiprintf_r+0x1a8>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0c5      	beq.n	8005fdc <_svfiprintf_r+0x130>
 8006050:	9105      	str	r1, [sp, #20]
 8006052:	e7c3      	b.n	8005fdc <_svfiprintf_r+0x130>
 8006054:	4604      	mov	r4, r0
 8006056:	2301      	movs	r3, #1
 8006058:	fb0c 2101 	mla	r1, ip, r1, r2
 800605c:	e7f0      	b.n	8006040 <_svfiprintf_r+0x194>
 800605e:	ab03      	add	r3, sp, #12
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	462a      	mov	r2, r5
 8006064:	4638      	mov	r0, r7
 8006066:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <_svfiprintf_r+0x1f8>)
 8006068:	a904      	add	r1, sp, #16
 800606a:	f3af 8000 	nop.w
 800606e:	1c42      	adds	r2, r0, #1
 8006070:	4606      	mov	r6, r0
 8006072:	d1d6      	bne.n	8006022 <_svfiprintf_r+0x176>
 8006074:	89ab      	ldrh	r3, [r5, #12]
 8006076:	065b      	lsls	r3, r3, #25
 8006078:	f53f af2c 	bmi.w	8005ed4 <_svfiprintf_r+0x28>
 800607c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800607e:	b01d      	add	sp, #116	; 0x74
 8006080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	ab03      	add	r3, sp, #12
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	462a      	mov	r2, r5
 800608a:	4638      	mov	r0, r7
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <_svfiprintf_r+0x1f8>)
 800608e:	a904      	add	r1, sp, #16
 8006090:	f000 f87c 	bl	800618c <_printf_i>
 8006094:	e7eb      	b.n	800606e <_svfiprintf_r+0x1c2>
 8006096:	bf00      	nop
 8006098:	080069fc 	.word	0x080069fc
 800609c:	08006a06 	.word	0x08006a06
 80060a0:	00000000 	.word	0x00000000
 80060a4:	08005df5 	.word	0x08005df5
 80060a8:	08006a02 	.word	0x08006a02

080060ac <_printf_common>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	4616      	mov	r6, r2
 80060b2:	4699      	mov	r9, r3
 80060b4:	688a      	ldr	r2, [r1, #8]
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4607      	mov	r7, r0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bfb8      	it	lt
 80060be:	4613      	movlt	r3, r2
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c6:	460c      	mov	r4, r1
 80060c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060cc:	b10a      	cbz	r2, 80060d2 <_printf_common+0x26>
 80060ce:	3301      	adds	r3, #1
 80060d0:	6033      	str	r3, [r6, #0]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	6833      	ldrmi	r3, [r6, #0]
 80060da:	3302      	addmi	r3, #2
 80060dc:	6033      	strmi	r3, [r6, #0]
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	f015 0506 	ands.w	r5, r5, #6
 80060e4:	d106      	bne.n	80060f4 <_printf_common+0x48>
 80060e6:	f104 0a19 	add.w	sl, r4, #25
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	6832      	ldr	r2, [r6, #0]
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dc28      	bgt.n	8006146 <_printf_common+0x9a>
 80060f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f8:	1e13      	subs	r3, r2, #0
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	bf18      	it	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	0692      	lsls	r2, r2, #26
 8006102:	d42d      	bmi.n	8006160 <_printf_common+0xb4>
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800610c:	47c0      	blx	r8
 800610e:	3001      	adds	r0, #1
 8006110:	d020      	beq.n	8006154 <_printf_common+0xa8>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	68e5      	ldr	r5, [r4, #12]
 8006116:	f003 0306 	and.w	r3, r3, #6
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf18      	it	ne
 800611e:	2500      	movne	r5, #0
 8006120:	6832      	ldr	r2, [r6, #0]
 8006122:	f04f 0600 	mov.w	r6, #0
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	bf08      	it	eq
 800612a:	1aad      	subeq	r5, r5, r2
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	bf08      	it	eq
 8006130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006134:	4293      	cmp	r3, r2
 8006136:	bfc4      	itt	gt
 8006138:	1a9b      	subgt	r3, r3, r2
 800613a:	18ed      	addgt	r5, r5, r3
 800613c:	341a      	adds	r4, #26
 800613e:	42b5      	cmp	r5, r6
 8006140:	d11a      	bne.n	8006178 <_printf_common+0xcc>
 8006142:	2000      	movs	r0, #0
 8006144:	e008      	b.n	8006158 <_printf_common+0xac>
 8006146:	2301      	movs	r3, #1
 8006148:	4652      	mov	r2, sl
 800614a:	4649      	mov	r1, r9
 800614c:	4638      	mov	r0, r7
 800614e:	47c0      	blx	r8
 8006150:	3001      	adds	r0, #1
 8006152:	d103      	bne.n	800615c <_printf_common+0xb0>
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615c:	3501      	adds	r5, #1
 800615e:	e7c4      	b.n	80060ea <_printf_common+0x3e>
 8006160:	2030      	movs	r0, #48	; 0x30
 8006162:	18e1      	adds	r1, r4, r3
 8006164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800616e:	4422      	add	r2, r4
 8006170:	3302      	adds	r3, #2
 8006172:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006176:	e7c5      	b.n	8006104 <_printf_common+0x58>
 8006178:	2301      	movs	r3, #1
 800617a:	4622      	mov	r2, r4
 800617c:	4649      	mov	r1, r9
 800617e:	4638      	mov	r0, r7
 8006180:	47c0      	blx	r8
 8006182:	3001      	adds	r0, #1
 8006184:	d0e6      	beq.n	8006154 <_printf_common+0xa8>
 8006186:	3601      	adds	r6, #1
 8006188:	e7d9      	b.n	800613e <_printf_common+0x92>
	...

0800618c <_printf_i>:
 800618c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	460c      	mov	r4, r1
 8006192:	7e27      	ldrb	r7, [r4, #24]
 8006194:	4691      	mov	r9, r2
 8006196:	2f78      	cmp	r7, #120	; 0x78
 8006198:	4680      	mov	r8, r0
 800619a:	469a      	mov	sl, r3
 800619c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800619e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a2:	d807      	bhi.n	80061b4 <_printf_i+0x28>
 80061a4:	2f62      	cmp	r7, #98	; 0x62
 80061a6:	d80a      	bhi.n	80061be <_printf_i+0x32>
 80061a8:	2f00      	cmp	r7, #0
 80061aa:	f000 80d9 	beq.w	8006360 <_printf_i+0x1d4>
 80061ae:	2f58      	cmp	r7, #88	; 0x58
 80061b0:	f000 80a4 	beq.w	80062fc <_printf_i+0x170>
 80061b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061bc:	e03a      	b.n	8006234 <_printf_i+0xa8>
 80061be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061c2:	2b15      	cmp	r3, #21
 80061c4:	d8f6      	bhi.n	80061b4 <_printf_i+0x28>
 80061c6:	a001      	add	r0, pc, #4	; (adr r0, 80061cc <_printf_i+0x40>)
 80061c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061cc:	08006225 	.word	0x08006225
 80061d0:	08006239 	.word	0x08006239
 80061d4:	080061b5 	.word	0x080061b5
 80061d8:	080061b5 	.word	0x080061b5
 80061dc:	080061b5 	.word	0x080061b5
 80061e0:	080061b5 	.word	0x080061b5
 80061e4:	08006239 	.word	0x08006239
 80061e8:	080061b5 	.word	0x080061b5
 80061ec:	080061b5 	.word	0x080061b5
 80061f0:	080061b5 	.word	0x080061b5
 80061f4:	080061b5 	.word	0x080061b5
 80061f8:	08006347 	.word	0x08006347
 80061fc:	08006269 	.word	0x08006269
 8006200:	08006329 	.word	0x08006329
 8006204:	080061b5 	.word	0x080061b5
 8006208:	080061b5 	.word	0x080061b5
 800620c:	08006369 	.word	0x08006369
 8006210:	080061b5 	.word	0x080061b5
 8006214:	08006269 	.word	0x08006269
 8006218:	080061b5 	.word	0x080061b5
 800621c:	080061b5 	.word	0x080061b5
 8006220:	08006331 	.word	0x08006331
 8006224:	680b      	ldr	r3, [r1, #0]
 8006226:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	600a      	str	r2, [r1, #0]
 8006230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006234:	2301      	movs	r3, #1
 8006236:	e0a4      	b.n	8006382 <_printf_i+0x1f6>
 8006238:	6825      	ldr	r5, [r4, #0]
 800623a:	6808      	ldr	r0, [r1, #0]
 800623c:	062e      	lsls	r6, r5, #24
 800623e:	f100 0304 	add.w	r3, r0, #4
 8006242:	d50a      	bpl.n	800625a <_printf_i+0xce>
 8006244:	6805      	ldr	r5, [r0, #0]
 8006246:	600b      	str	r3, [r1, #0]
 8006248:	2d00      	cmp	r5, #0
 800624a:	da03      	bge.n	8006254 <_printf_i+0xc8>
 800624c:	232d      	movs	r3, #45	; 0x2d
 800624e:	426d      	negs	r5, r5
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006254:	230a      	movs	r3, #10
 8006256:	485e      	ldr	r0, [pc, #376]	; (80063d0 <_printf_i+0x244>)
 8006258:	e019      	b.n	800628e <_printf_i+0x102>
 800625a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800625e:	6805      	ldr	r5, [r0, #0]
 8006260:	600b      	str	r3, [r1, #0]
 8006262:	bf18      	it	ne
 8006264:	b22d      	sxthne	r5, r5
 8006266:	e7ef      	b.n	8006248 <_printf_i+0xbc>
 8006268:	680b      	ldr	r3, [r1, #0]
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	1d18      	adds	r0, r3, #4
 800626e:	6008      	str	r0, [r1, #0]
 8006270:	0628      	lsls	r0, r5, #24
 8006272:	d501      	bpl.n	8006278 <_printf_i+0xec>
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	e002      	b.n	800627e <_printf_i+0xf2>
 8006278:	0669      	lsls	r1, r5, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0xe8>
 800627c:	881d      	ldrh	r5, [r3, #0]
 800627e:	2f6f      	cmp	r7, #111	; 0x6f
 8006280:	bf0c      	ite	eq
 8006282:	2308      	moveq	r3, #8
 8006284:	230a      	movne	r3, #10
 8006286:	4852      	ldr	r0, [pc, #328]	; (80063d0 <_printf_i+0x244>)
 8006288:	2100      	movs	r1, #0
 800628a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800628e:	6866      	ldr	r6, [r4, #4]
 8006290:	2e00      	cmp	r6, #0
 8006292:	bfa8      	it	ge
 8006294:	6821      	ldrge	r1, [r4, #0]
 8006296:	60a6      	str	r6, [r4, #8]
 8006298:	bfa4      	itt	ge
 800629a:	f021 0104 	bicge.w	r1, r1, #4
 800629e:	6021      	strge	r1, [r4, #0]
 80062a0:	b90d      	cbnz	r5, 80062a6 <_printf_i+0x11a>
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	d04d      	beq.n	8006342 <_printf_i+0x1b6>
 80062a6:	4616      	mov	r6, r2
 80062a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ac:	fb03 5711 	mls	r7, r3, r1, r5
 80062b0:	5dc7      	ldrb	r7, [r0, r7]
 80062b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062b6:	462f      	mov	r7, r5
 80062b8:	42bb      	cmp	r3, r7
 80062ba:	460d      	mov	r5, r1
 80062bc:	d9f4      	bls.n	80062a8 <_printf_i+0x11c>
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x14e>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07df      	lsls	r7, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x14e>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6861      	ldr	r1, [r4, #4]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	; 0x30
 80062d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062da:	1b92      	subs	r2, r2, r6
 80062dc:	6122      	str	r2, [r4, #16]
 80062de:	464b      	mov	r3, r9
 80062e0:	4621      	mov	r1, r4
 80062e2:	4640      	mov	r0, r8
 80062e4:	f8cd a000 	str.w	sl, [sp]
 80062e8:	aa03      	add	r2, sp, #12
 80062ea:	f7ff fedf 	bl	80060ac <_printf_common>
 80062ee:	3001      	adds	r0, #1
 80062f0:	d14c      	bne.n	800638c <_printf_i+0x200>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	b004      	add	sp, #16
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	4834      	ldr	r0, [pc, #208]	; (80063d0 <_printf_i+0x244>)
 80062fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006302:	680e      	ldr	r6, [r1, #0]
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	f856 5b04 	ldr.w	r5, [r6], #4
 800630a:	061f      	lsls	r7, r3, #24
 800630c:	600e      	str	r6, [r1, #0]
 800630e:	d514      	bpl.n	800633a <_printf_i+0x1ae>
 8006310:	07d9      	lsls	r1, r3, #31
 8006312:	bf44      	itt	mi
 8006314:	f043 0320 	orrmi.w	r3, r3, #32
 8006318:	6023      	strmi	r3, [r4, #0]
 800631a:	b91d      	cbnz	r5, 8006324 <_printf_i+0x198>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	f023 0320 	bic.w	r3, r3, #32
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	2310      	movs	r3, #16
 8006326:	e7af      	b.n	8006288 <_printf_i+0xfc>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	f043 0320 	orr.w	r3, r3, #32
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	2378      	movs	r3, #120	; 0x78
 8006332:	4828      	ldr	r0, [pc, #160]	; (80063d4 <_printf_i+0x248>)
 8006334:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006338:	e7e3      	b.n	8006302 <_printf_i+0x176>
 800633a:	065e      	lsls	r6, r3, #25
 800633c:	bf48      	it	mi
 800633e:	b2ad      	uxthmi	r5, r5
 8006340:	e7e6      	b.n	8006310 <_printf_i+0x184>
 8006342:	4616      	mov	r6, r2
 8006344:	e7bb      	b.n	80062be <_printf_i+0x132>
 8006346:	680b      	ldr	r3, [r1, #0]
 8006348:	6826      	ldr	r6, [r4, #0]
 800634a:	1d1d      	adds	r5, r3, #4
 800634c:	6960      	ldr	r0, [r4, #20]
 800634e:	600d      	str	r5, [r1, #0]
 8006350:	0635      	lsls	r5, r6, #24
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	d501      	bpl.n	800635a <_printf_i+0x1ce>
 8006356:	6018      	str	r0, [r3, #0]
 8006358:	e002      	b.n	8006360 <_printf_i+0x1d4>
 800635a:	0671      	lsls	r1, r6, #25
 800635c:	d5fb      	bpl.n	8006356 <_printf_i+0x1ca>
 800635e:	8018      	strh	r0, [r3, #0]
 8006360:	2300      	movs	r3, #0
 8006362:	4616      	mov	r6, r2
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	e7ba      	b.n	80062de <_printf_i+0x152>
 8006368:	680b      	ldr	r3, [r1, #0]
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	600a      	str	r2, [r1, #0]
 800636e:	681e      	ldr	r6, [r3, #0]
 8006370:	2100      	movs	r1, #0
 8006372:	4630      	mov	r0, r6
 8006374:	6862      	ldr	r2, [r4, #4]
 8006376:	f000 f82f 	bl	80063d8 <memchr>
 800637a:	b108      	cbz	r0, 8006380 <_printf_i+0x1f4>
 800637c:	1b80      	subs	r0, r0, r6
 800637e:	6060      	str	r0, [r4, #4]
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	6123      	str	r3, [r4, #16]
 8006384:	2300      	movs	r3, #0
 8006386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638a:	e7a8      	b.n	80062de <_printf_i+0x152>
 800638c:	4632      	mov	r2, r6
 800638e:	4649      	mov	r1, r9
 8006390:	4640      	mov	r0, r8
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	47d0      	blx	sl
 8006396:	3001      	adds	r0, #1
 8006398:	d0ab      	beq.n	80062f2 <_printf_i+0x166>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	079b      	lsls	r3, r3, #30
 800639e:	d413      	bmi.n	80063c8 <_printf_i+0x23c>
 80063a0:	68e0      	ldr	r0, [r4, #12]
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	4298      	cmp	r0, r3
 80063a6:	bfb8      	it	lt
 80063a8:	4618      	movlt	r0, r3
 80063aa:	e7a4      	b.n	80062f6 <_printf_i+0x16a>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4632      	mov	r2, r6
 80063b0:	4649      	mov	r1, r9
 80063b2:	4640      	mov	r0, r8
 80063b4:	47d0      	blx	sl
 80063b6:	3001      	adds	r0, #1
 80063b8:	d09b      	beq.n	80062f2 <_printf_i+0x166>
 80063ba:	3501      	adds	r5, #1
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	9903      	ldr	r1, [sp, #12]
 80063c0:	1a5b      	subs	r3, r3, r1
 80063c2:	42ab      	cmp	r3, r5
 80063c4:	dcf2      	bgt.n	80063ac <_printf_i+0x220>
 80063c6:	e7eb      	b.n	80063a0 <_printf_i+0x214>
 80063c8:	2500      	movs	r5, #0
 80063ca:	f104 0619 	add.w	r6, r4, #25
 80063ce:	e7f5      	b.n	80063bc <_printf_i+0x230>
 80063d0:	08006a0d 	.word	0x08006a0d
 80063d4:	08006a1e 	.word	0x08006a1e

080063d8 <memchr>:
 80063d8:	4603      	mov	r3, r0
 80063da:	b510      	push	{r4, lr}
 80063dc:	b2c9      	uxtb	r1, r1
 80063de:	4402      	add	r2, r0
 80063e0:	4293      	cmp	r3, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	d101      	bne.n	80063ea <memchr+0x12>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e003      	b.n	80063f2 <memchr+0x1a>
 80063ea:	7804      	ldrb	r4, [r0, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	428c      	cmp	r4, r1
 80063f0:	d1f6      	bne.n	80063e0 <memchr+0x8>
 80063f2:	bd10      	pop	{r4, pc}

080063f4 <memcpy>:
 80063f4:	440a      	add	r2, r1
 80063f6:	4291      	cmp	r1, r2
 80063f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063fc:	d100      	bne.n	8006400 <memcpy+0xc>
 80063fe:	4770      	bx	lr
 8006400:	b510      	push	{r4, lr}
 8006402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006406:	4291      	cmp	r1, r2
 8006408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800640c:	d1f9      	bne.n	8006402 <memcpy+0xe>
 800640e:	bd10      	pop	{r4, pc}

08006410 <memmove>:
 8006410:	4288      	cmp	r0, r1
 8006412:	b510      	push	{r4, lr}
 8006414:	eb01 0402 	add.w	r4, r1, r2
 8006418:	d902      	bls.n	8006420 <memmove+0x10>
 800641a:	4284      	cmp	r4, r0
 800641c:	4623      	mov	r3, r4
 800641e:	d807      	bhi.n	8006430 <memmove+0x20>
 8006420:	1e43      	subs	r3, r0, #1
 8006422:	42a1      	cmp	r1, r4
 8006424:	d008      	beq.n	8006438 <memmove+0x28>
 8006426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800642e:	e7f8      	b.n	8006422 <memmove+0x12>
 8006430:	4601      	mov	r1, r0
 8006432:	4402      	add	r2, r0
 8006434:	428a      	cmp	r2, r1
 8006436:	d100      	bne.n	800643a <memmove+0x2a>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800643e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006442:	e7f7      	b.n	8006434 <memmove+0x24>

08006444 <_free_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4605      	mov	r5, r0
 8006448:	2900      	cmp	r1, #0
 800644a:	d043      	beq.n	80064d4 <_free_r+0x90>
 800644c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006450:	1f0c      	subs	r4, r1, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	bfb8      	it	lt
 8006456:	18e4      	addlt	r4, r4, r3
 8006458:	f000 f8d0 	bl	80065fc <__malloc_lock>
 800645c:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <_free_r+0x94>)
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	4610      	mov	r0, r2
 8006462:	b933      	cbnz	r3, 8006472 <_free_r+0x2e>
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	6014      	str	r4, [r2, #0]
 8006468:	4628      	mov	r0, r5
 800646a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800646e:	f000 b8cb 	b.w	8006608 <__malloc_unlock>
 8006472:	42a3      	cmp	r3, r4
 8006474:	d90a      	bls.n	800648c <_free_r+0x48>
 8006476:	6821      	ldr	r1, [r4, #0]
 8006478:	1862      	adds	r2, r4, r1
 800647a:	4293      	cmp	r3, r2
 800647c:	bf01      	itttt	eq
 800647e:	681a      	ldreq	r2, [r3, #0]
 8006480:	685b      	ldreq	r3, [r3, #4]
 8006482:	1852      	addeq	r2, r2, r1
 8006484:	6022      	streq	r2, [r4, #0]
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	6004      	str	r4, [r0, #0]
 800648a:	e7ed      	b.n	8006468 <_free_r+0x24>
 800648c:	461a      	mov	r2, r3
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b10b      	cbz	r3, 8006496 <_free_r+0x52>
 8006492:	42a3      	cmp	r3, r4
 8006494:	d9fa      	bls.n	800648c <_free_r+0x48>
 8006496:	6811      	ldr	r1, [r2, #0]
 8006498:	1850      	adds	r0, r2, r1
 800649a:	42a0      	cmp	r0, r4
 800649c:	d10b      	bne.n	80064b6 <_free_r+0x72>
 800649e:	6820      	ldr	r0, [r4, #0]
 80064a0:	4401      	add	r1, r0
 80064a2:	1850      	adds	r0, r2, r1
 80064a4:	4283      	cmp	r3, r0
 80064a6:	6011      	str	r1, [r2, #0]
 80064a8:	d1de      	bne.n	8006468 <_free_r+0x24>
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4401      	add	r1, r0
 80064b0:	6011      	str	r1, [r2, #0]
 80064b2:	6053      	str	r3, [r2, #4]
 80064b4:	e7d8      	b.n	8006468 <_free_r+0x24>
 80064b6:	d902      	bls.n	80064be <_free_r+0x7a>
 80064b8:	230c      	movs	r3, #12
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	e7d4      	b.n	8006468 <_free_r+0x24>
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	1821      	adds	r1, r4, r0
 80064c2:	428b      	cmp	r3, r1
 80064c4:	bf01      	itttt	eq
 80064c6:	6819      	ldreq	r1, [r3, #0]
 80064c8:	685b      	ldreq	r3, [r3, #4]
 80064ca:	1809      	addeq	r1, r1, r0
 80064cc:	6021      	streq	r1, [r4, #0]
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7c9      	b.n	8006468 <_free_r+0x24>
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
 80064d6:	bf00      	nop
 80064d8:	20000108 	.word	0x20000108

080064dc <_malloc_r>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	1ccd      	adds	r5, r1, #3
 80064e0:	f025 0503 	bic.w	r5, r5, #3
 80064e4:	3508      	adds	r5, #8
 80064e6:	2d0c      	cmp	r5, #12
 80064e8:	bf38      	it	cc
 80064ea:	250c      	movcc	r5, #12
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	4606      	mov	r6, r0
 80064f0:	db01      	blt.n	80064f6 <_malloc_r+0x1a>
 80064f2:	42a9      	cmp	r1, r5
 80064f4:	d903      	bls.n	80064fe <_malloc_r+0x22>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	2000      	movs	r0, #0
 80064fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fe:	f000 f87d 	bl	80065fc <__malloc_lock>
 8006502:	4921      	ldr	r1, [pc, #132]	; (8006588 <_malloc_r+0xac>)
 8006504:	680a      	ldr	r2, [r1, #0]
 8006506:	4614      	mov	r4, r2
 8006508:	b99c      	cbnz	r4, 8006532 <_malloc_r+0x56>
 800650a:	4f20      	ldr	r7, [pc, #128]	; (800658c <_malloc_r+0xb0>)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b923      	cbnz	r3, 800651a <_malloc_r+0x3e>
 8006510:	4621      	mov	r1, r4
 8006512:	4630      	mov	r0, r6
 8006514:	f000 f862 	bl	80065dc <_sbrk_r>
 8006518:	6038      	str	r0, [r7, #0]
 800651a:	4629      	mov	r1, r5
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f85d 	bl	80065dc <_sbrk_r>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d123      	bne.n	800656e <_malloc_r+0x92>
 8006526:	230c      	movs	r3, #12
 8006528:	4630      	mov	r0, r6
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	f000 f86c 	bl	8006608 <__malloc_unlock>
 8006530:	e7e3      	b.n	80064fa <_malloc_r+0x1e>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	1b5b      	subs	r3, r3, r5
 8006536:	d417      	bmi.n	8006568 <_malloc_r+0x8c>
 8006538:	2b0b      	cmp	r3, #11
 800653a:	d903      	bls.n	8006544 <_malloc_r+0x68>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	441c      	add	r4, r3
 8006540:	6025      	str	r5, [r4, #0]
 8006542:	e004      	b.n	800654e <_malloc_r+0x72>
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	42a2      	cmp	r2, r4
 8006548:	bf0c      	ite	eq
 800654a:	600b      	streq	r3, [r1, #0]
 800654c:	6053      	strne	r3, [r2, #4]
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f85a 	bl	8006608 <__malloc_unlock>
 8006554:	f104 000b 	add.w	r0, r4, #11
 8006558:	1d23      	adds	r3, r4, #4
 800655a:	f020 0007 	bic.w	r0, r0, #7
 800655e:	1ac2      	subs	r2, r0, r3
 8006560:	d0cc      	beq.n	80064fc <_malloc_r+0x20>
 8006562:	1a1b      	subs	r3, r3, r0
 8006564:	50a3      	str	r3, [r4, r2]
 8006566:	e7c9      	b.n	80064fc <_malloc_r+0x20>
 8006568:	4622      	mov	r2, r4
 800656a:	6864      	ldr	r4, [r4, #4]
 800656c:	e7cc      	b.n	8006508 <_malloc_r+0x2c>
 800656e:	1cc4      	adds	r4, r0, #3
 8006570:	f024 0403 	bic.w	r4, r4, #3
 8006574:	42a0      	cmp	r0, r4
 8006576:	d0e3      	beq.n	8006540 <_malloc_r+0x64>
 8006578:	1a21      	subs	r1, r4, r0
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f82e 	bl	80065dc <_sbrk_r>
 8006580:	3001      	adds	r0, #1
 8006582:	d1dd      	bne.n	8006540 <_malloc_r+0x64>
 8006584:	e7cf      	b.n	8006526 <_malloc_r+0x4a>
 8006586:	bf00      	nop
 8006588:	20000108 	.word	0x20000108
 800658c:	2000010c 	.word	0x2000010c

08006590 <_realloc_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	4607      	mov	r7, r0
 8006594:	4614      	mov	r4, r2
 8006596:	460e      	mov	r6, r1
 8006598:	b921      	cbnz	r1, 80065a4 <_realloc_r+0x14>
 800659a:	4611      	mov	r1, r2
 800659c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065a0:	f7ff bf9c 	b.w	80064dc <_malloc_r>
 80065a4:	b922      	cbnz	r2, 80065b0 <_realloc_r+0x20>
 80065a6:	f7ff ff4d 	bl	8006444 <_free_r>
 80065aa:	4625      	mov	r5, r4
 80065ac:	4628      	mov	r0, r5
 80065ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b0:	f000 f830 	bl	8006614 <_malloc_usable_size_r>
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d20f      	bcs.n	80065d8 <_realloc_r+0x48>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7ff ff8e 	bl	80064dc <_malloc_r>
 80065c0:	4605      	mov	r5, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d0f2      	beq.n	80065ac <_realloc_r+0x1c>
 80065c6:	4631      	mov	r1, r6
 80065c8:	4622      	mov	r2, r4
 80065ca:	f7ff ff13 	bl	80063f4 <memcpy>
 80065ce:	4631      	mov	r1, r6
 80065d0:	4638      	mov	r0, r7
 80065d2:	f7ff ff37 	bl	8006444 <_free_r>
 80065d6:	e7e9      	b.n	80065ac <_realloc_r+0x1c>
 80065d8:	4635      	mov	r5, r6
 80065da:	e7e7      	b.n	80065ac <_realloc_r+0x1c>

080065dc <_sbrk_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	2300      	movs	r3, #0
 80065e0:	4d05      	ldr	r5, [pc, #20]	; (80065f8 <_sbrk_r+0x1c>)
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fb ff80 	bl	80024ec <_sbrk>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_sbrk_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_sbrk_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20000360 	.word	0x20000360

080065fc <__malloc_lock>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__malloc_lock+0x8>)
 80065fe:	f000 b811 	b.w	8006624 <__retarget_lock_acquire_recursive>
 8006602:	bf00      	nop
 8006604:	20000368 	.word	0x20000368

08006608 <__malloc_unlock>:
 8006608:	4801      	ldr	r0, [pc, #4]	; (8006610 <__malloc_unlock+0x8>)
 800660a:	f000 b80c 	b.w	8006626 <__retarget_lock_release_recursive>
 800660e:	bf00      	nop
 8006610:	20000368 	.word	0x20000368

08006614 <_malloc_usable_size_r>:
 8006614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006618:	1f18      	subs	r0, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	bfbc      	itt	lt
 800661e:	580b      	ldrlt	r3, [r1, r0]
 8006620:	18c0      	addlt	r0, r0, r3
 8006622:	4770      	bx	lr

08006624 <__retarget_lock_acquire_recursive>:
 8006624:	4770      	bx	lr

08006626 <__retarget_lock_release_recursive>:
 8006626:	4770      	bx	lr

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr

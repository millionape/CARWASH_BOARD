
i2c_test_c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080067d8  080067d8  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067d8  080067d8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200000a0  08006880  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006880  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f96  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab7  00000000  00000000  0003105f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970a  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eef9  00000000  00000000  0004f3da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fa19  00000000  00000000  0005e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edcec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae8  00000000  00000000  000edd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080063dc 	.word	0x080063dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080063dc 	.word	0x080063dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b55      	ldr	r3, [pc, #340]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a54      	ldr	r2, [pc, #336]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b52      	ldr	r3, [pc, #328]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b4f      	ldr	r3, [pc, #316]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a4e      	ldr	r2, [pc, #312]	; (80002c8 <MX_GPIO_Init+0x16c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b4c      	ldr	r3, [pc, #304]	; (80002c8 <MX_GPIO_Init+0x16c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b49      	ldr	r3, [pc, #292]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a48      	ldr	r2, [pc, #288]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b46      	ldr	r3, [pc, #280]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b43      	ldr	r3, [pc, #268]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a42      	ldr	r2, [pc, #264]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b40      	ldr	r3, [pc, #256]	; (80002c8 <MX_GPIO_Init+0x16c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	483d      	ldr	r0, [pc, #244]	; (80002cc <MX_GPIO_Init+0x170>)
 80001d8:	f002 ff93 	bl	8003102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 80001dc:	2200      	movs	r2, #0
 80001de:	f245 3103 	movw	r1, #21251	; 0x5303
 80001e2:	483b      	ldr	r0, [pc, #236]	; (80002d0 <MX_GPIO_Init+0x174>)
 80001e4:	f002 ff8d 	bl	8003102 <HAL_GPIO_WritePin>
                          |OUT_PIN4_Pin|OUT_PIN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_PIN3_GPIO_Port, OUT_PIN3_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	4839      	ldr	r0, [pc, #228]	; (80002d4 <MX_GPIO_Init+0x178>)
 80001f0:	f002 ff87 	bl	8003102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000202:	2301      	movs	r3, #1
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	482f      	ldr	r0, [pc, #188]	; (80002cc <MX_GPIO_Init+0x170>)
 800020e:	f002 fe07 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = USER_SW2_Pin|FRONT_SW1_PIN_Pin|FRONT_SW2_PIN_Pin|FRONT_SW3_PIN_Pin
 8000212:	23fc      	movs	r3, #252	; 0xfc
 8000214:	613b      	str	r3, [r7, #16]
                          |FRONT_SW4_PIN_Pin|FRONT_SW5_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000216:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <MX_GPIO_Init+0x17c>)
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	482b      	ldr	r0, [pc, #172]	; (80002d4 <MX_GPIO_Init+0x178>)
 8000226:	f002 fdfb 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = OUT_PIN1_Pin|OUT_PIN2_Pin|OUT_PIN6_Pin|MAX7219_CS_Pin
 800022a:	f245 3303 	movw	r3, #21251	; 0x5303
 800022e:	613b      	str	r3, [r7, #16]
                          |OUT_PIN4_Pin|OUT_PIN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000234:	2302      	movs	r3, #2
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	4823      	ldr	r0, [pc, #140]	; (80002d0 <MX_GPIO_Init+0x174>)
 8000244:	f002 fdec 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_PIN3_Pin;
 8000248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2302      	movs	r3, #2
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_PIN3_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_GPIO_Init+0x178>)
 8000262:	f002 fddd 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_SW3_Pin;
 8000266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_SW3_GPIO_Port, &GPIO_InitStruct);
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	4619      	mov	r1, r3
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <MX_GPIO_Init+0x178>)
 800027c:	f002 fdd0 	bl	8002e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2105      	movs	r1, #5
 8000284:	2008      	movs	r0, #8
 8000286:	f002 fd78 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800028a:	2008      	movs	r0, #8
 800028c:	f002 fd91 	bl	8002db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	2105      	movs	r1, #5
 8000294:	2009      	movs	r0, #9
 8000296:	f002 fd70 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800029a:	2009      	movs	r0, #9
 800029c:	f002 fd89 	bl	8002db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2105      	movs	r1, #5
 80002a4:	200a      	movs	r0, #10
 80002a6:	f002 fd68 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80002aa:	200a      	movs	r0, #10
 80002ac:	f002 fd81 	bl	8002db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2105      	movs	r1, #5
 80002b4:	2017      	movs	r0, #23
 80002b6:	f002 fd60 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002ba:	2017      	movs	r0, #23
 80002bc:	f002 fd79 	bl	8002db2 <HAL_NVIC_EnableIRQ>

}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40010800 	.word	0x40010800
 80002d8:	10110000 	.word	0x10110000

080002dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002e0:	f002 fb98 	bl	8002a14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002e4:	f000 f888 	bl	80003f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002e8:	f7ff ff38 	bl	800015c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80002ec:	f002 fa90 	bl	8002810 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80002f0:	f002 f87a 	bl	80023e8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80002f4:	f002 f8ca 	bl	800248c <MX_TIM2_Init>
	MX_TIM3_Init();
 80002f8:	f002 f914 	bl	8002524 <MX_TIM3_Init>
	MX_TIM4_Init();
 80002fc:	f002 f98e 	bl	800261c <MX_TIM4_Init>
	MX_SPI2_Init();
 8000300:	f001 fef6 	bl	80020f0 <MX_SPI2_Init>
	MX_RTC_Init();
 8000304:	f001 fe86 	bl	8002014 <MX_RTC_Init>
	MX_USART3_UART_Init();
 8000308:	f002 faac 	bl	8002864 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(400);
 800030c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000310:	f002 fbe2 	bl	8002ad8 <HAL_Delay>
	read_settings_from_eeprom();
 8000314:	f000 f8ce 	bl	80004b4 <read_settings_from_eeprom>
	HAL_Delay(400);
 8000318:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800031c:	f002 fbdc 	bl	8002ad8 <HAL_Delay>
	max7219_Init ( 7 );
 8000320:	2007      	movs	r0, #7
 8000322:	f001 fd01 	bl	8001d28 <max7219_Init>
	max7219_Decode_On ();
 8000326:	f001 fd85 	bl	8001e34 <max7219_Decode_On>
	HAL_TIM_Base_Stop_IT(&htim2);
 800032a:	4827      	ldr	r0, [pc, #156]	; (80003c8 <main+0xec>)
 800032c:	f004 fb80 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000330:	2100      	movs	r1, #0
 8000332:	4826      	ldr	r0, [pc, #152]	; (80003cc <main+0xf0>)
 8000334:	f004 fc02 	bl	8004b3c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000338:	2104      	movs	r1, #4
 800033a:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0xf0>)
 800033c:	f004 fbfe 	bl	8004b3c <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000340:	4821      	ldr	r0, [pc, #132]	; (80003c8 <main+0xec>)
 8000342:	f004 fb23 	bl	800498c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8000346:	4822      	ldr	r0, [pc, #136]	; (80003d0 <main+0xf4>)
 8000348:	f004 fb72 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim1);
 800034c:	4821      	ldr	r0, [pc, #132]	; (80003d4 <main+0xf8>)
 800034e:	f004 fb6f 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <main+0xf8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f06f 0201 	mvn.w	r2, #1
 800035a:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xf8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
	DEV_ID =  HAL_GetDEVID();
 8000364:	f002 fbe6 	bl	8002b34 <HAL_GetDEVID>
 8000368:	4602      	mov	r2, r0
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <main+0xfc>)
 800036c:	601a      	str	r2, [r3, #0]
	REV_ID = HAL_GetREVID();
 800036e:	f002 fbd5 	bl	8002b1c <HAL_GetREVID>
 8000372:	4602      	mov	r2, r0
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <main+0x100>)
 8000376:	601a      	str	r2, [r3, #0]

	sprintf(dev_id_buffer, "$DVID%d-%d&\r\n",(int)DEV_ID,(int)REV_ID);
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <main+0xfc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <main+0x100>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4917      	ldr	r1, [pc, #92]	; (80003e0 <main+0x104>)
 8000384:	4817      	ldr	r0, [pc, #92]	; (80003e4 <main+0x108>)
 8000386:	f005 fc17 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dev_id_buffer, strlen(dev_id_buffer), HAL_MAX_DELAY);
 800038a:	4816      	ldr	r0, [pc, #88]	; (80003e4 <main+0x108>)
 800038c:	f7ff fede 	bl	800014c <strlen>
 8000390:	4603      	mov	r3, r0
 8000392:	b29a      	uxth	r2, r3
 8000394:	f04f 33ff 	mov.w	r3, #4294967295
 8000398:	4912      	ldr	r1, [pc, #72]	; (80003e4 <main+0x108>)
 800039a:	4813      	ldr	r0, [pc, #76]	; (80003e8 <main+0x10c>)
 800039c:	f005 fa6f 	bl	800587e <HAL_UART_Transmit>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80003a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a4:	f002 fb98 	bl	8002ad8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)){
 80003a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ac:	480f      	ldr	r0, [pc, #60]	; (80003ec <main+0x110>)
 80003ae:	f002 fe91 	bl	80030d4 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0f3      	beq.n	80003a0 <main+0xc4>
			credit = 0;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <main+0x114>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
			system_function_start = false;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <main+0x118>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80003c4:	e7ec      	b.n	80003a0 <main+0xc4>
 80003c6:	bf00      	nop
 80003c8:	20000294 	.word	0x20000294
 80003cc:	20000204 	.word	0x20000204
 80003d0:	200001bc 	.word	0x200001bc
 80003d4:	2000024c 	.word	0x2000024c
 80003d8:	200000bc 	.word	0x200000bc
 80003dc:	200000c0 	.word	0x200000c0
 80003e0:	080063f4 	.word	0x080063f4
 80003e4:	20000110 	.word	0x20000110
 80003e8:	2000031c 	.word	0x2000031c
 80003ec:	40010800 	.word	0x40010800
 80003f0:	200000e4 	.word	0x200000e4
 80003f4:	200000f0 	.word	0x200000f0

080003f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f005 fbce 	bl	8005ba8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000428:	2309      	movs	r3, #9
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	2301      	movs	r3, #1
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	2302      	movs	r3, #2
 8000440:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000446:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000448:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800044c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fe92 	bl	800317c <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800045e:	f001 fc5d 	bl	8001d1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f003 f8fc 	bl	800367c <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800048a:	f001 fc47 	bl	8001d1c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800048e:	2301      	movs	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000496:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fa8a 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xb2>
	{
		Error_Handler();
 80004a6:	f001 fc39 	bl	8001d1c <Error_Handler>
	}
}
 80004aa:	bf00      	nop
 80004ac:	3750      	adds	r7, #80	; 0x50
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <read_settings_from_eeprom>:

/* USER CODE BEGIN 4 */
void read_settings_from_eeprom(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
	F1_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80004ba:	2101      	movs	r1, #1
 80004bc:	487a      	ldr	r0, [pc, #488]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004be:	f003 ff93 	bl	80043e8 <HAL_RTCEx_BKUPRead>
 80004c2:	4603      	mov	r3, r0
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b79      	ldr	r3, [pc, #484]	; (80006ac <read_settings_from_eeprom+0x1f8>)
 80004c8:	701a      	strb	r2, [r3, #0]
	F2_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80004ca:	2102      	movs	r1, #2
 80004cc:	4876      	ldr	r0, [pc, #472]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004ce:	f003 ff8b 	bl	80043e8 <HAL_RTCEx_BKUPRead>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b76      	ldr	r3, [pc, #472]	; (80006b0 <read_settings_from_eeprom+0x1fc>)
 80004d8:	701a      	strb	r2, [r3, #0]
	F3_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80004da:	2103      	movs	r1, #3
 80004dc:	4872      	ldr	r0, [pc, #456]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004de:	f003 ff83 	bl	80043e8 <HAL_RTCEx_BKUPRead>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b73      	ldr	r3, [pc, #460]	; (80006b4 <read_settings_from_eeprom+0x200>)
 80004e8:	701a      	strb	r2, [r3, #0]
	F4_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80004ea:	2104      	movs	r1, #4
 80004ec:	486e      	ldr	r0, [pc, #440]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004ee:	f003 ff7b 	bl	80043e8 <HAL_RTCEx_BKUPRead>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b70      	ldr	r3, [pc, #448]	; (80006b8 <read_settings_from_eeprom+0x204>)
 80004f8:	701a      	strb	r2, [r3, #0]
	F5_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 80004fa:	2105      	movs	r1, #5
 80004fc:	486a      	ldr	r0, [pc, #424]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 80004fe:	f003 ff73 	bl	80043e8 <HAL_RTCEx_BKUPRead>
 8000502:	4603      	mov	r3, r0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b6d      	ldr	r3, [pc, #436]	; (80006bc <read_settings_from_eeprom+0x208>)
 8000508:	701a      	strb	r2, [r3, #0]
	credit = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 800050a:	2106      	movs	r1, #6
 800050c:	4866      	ldr	r0, [pc, #408]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 800050e:	f003 ff6b 	bl	80043e8 <HAL_RTCEx_BKUPRead>
 8000512:	4602      	mov	r2, r0
 8000514:	4b6a      	ldr	r3, [pc, #424]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 8000516:	601a      	str	r2, [r3, #0]
	if(credit > 2){
 8000518:	4b69      	ldr	r3, [pc, #420]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d903      	bls.n	8000528 <read_settings_from_eeprom+0x74>
		system_function_start = true;
 8000520:	4b68      	ldr	r3, [pc, #416]	; (80006c4 <read_settings_from_eeprom+0x210>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e002      	b.n	800052e <read_settings_from_eeprom+0x7a>
	}else{
		credit = 0;
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"eeprom read DURATION 1 is %d \r\n",F1_DURATION);
 800052e:	4b5f      	ldr	r3, [pc, #380]	; (80006ac <read_settings_from_eeprom+0x1f8>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4963      	ldr	r1, [pc, #396]	; (80006c8 <read_settings_from_eeprom+0x214>)
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fb3c 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe02 	bl	800014c <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	485e      	ldr	r0, [pc, #376]	; (80006cc <read_settings_from_eeprom+0x218>)
 8000554:	f005 f993 	bl	800587e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 2 is %d \r\n",F2_DURATION);
 8000558:	4b55      	ldr	r3, [pc, #340]	; (80006b0 <read_settings_from_eeprom+0x1fc>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	495b      	ldr	r1, [pc, #364]	; (80006d0 <read_settings_from_eeprom+0x21c>)
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fb27 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fded 	bl	800014c <strlen>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	1d39      	adds	r1, r7, #4
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	4853      	ldr	r0, [pc, #332]	; (80006cc <read_settings_from_eeprom+0x218>)
 800057e:	f005 f97e 	bl	800587e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 3 is %d \r\n",F3_DURATION);
 8000582:	4b4c      	ldr	r3, [pc, #304]	; (80006b4 <read_settings_from_eeprom+0x200>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4951      	ldr	r1, [pc, #324]	; (80006d4 <read_settings_from_eeprom+0x220>)
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fb12 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fdd8 	bl	800014c <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4849      	ldr	r0, [pc, #292]	; (80006cc <read_settings_from_eeprom+0x218>)
 80005a8:	f005 f969 	bl	800587e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 4 is %d \r\n",F4_DURATION);
 80005ac:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <read_settings_from_eeprom+0x204>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4948      	ldr	r1, [pc, #288]	; (80006d8 <read_settings_from_eeprom+0x224>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fafd 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fdc3 	bl	800014c <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	483e      	ldr	r0, [pc, #248]	; (80006cc <read_settings_from_eeprom+0x218>)
 80005d2:	f005 f954 	bl	800587e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 5 is %d \r\n",F5_DURATION);
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <read_settings_from_eeprom+0x208>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	493e      	ldr	r1, [pc, #248]	; (80006dc <read_settings_from_eeprom+0x228>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fae8 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdae 	bl	800014c <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4834      	ldr	r0, [pc, #208]	; (80006cc <read_settings_from_eeprom+0x218>)
 80005fc:	f005 f93f 	bl	800587e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read CREDIT is %d \r\n",(int)credit);
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <read_settings_from_eeprom+0x20c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4935      	ldr	r1, [pc, #212]	; (80006e0 <read_settings_from_eeprom+0x22c>)
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fad4 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fd9a 	bl	800014c <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <read_settings_from_eeprom+0x218>)
 8000624:	f005 f92b 	bl	800587e <HAL_UART_Transmit>

	if(F1_DURATION == 0 || F2_DURATION == 0 || F3_DURATION == 0 || F4_DURATION == 0 || F5_DURATION == 0){
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <read_settings_from_eeprom+0x1f8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d013      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <read_settings_from_eeprom+0x1fc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00e      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <read_settings_from_eeprom+0x200>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <read_settings_from_eeprom+0x204>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <read_settings_from_eeprom+0x1a6>
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <read_settings_from_eeprom+0x208>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d122      	bne.n	80006a0 <read_settings_from_eeprom+0x1ec>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, default_credit_duration);
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <read_settings_from_eeprom+0x230>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 8000664:	f003 fea6 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, default_credit_duration);
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <read_settings_from_eeprom+0x230>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	2102      	movs	r1, #2
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 8000672:	f003 fe9f 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, default_credit_duration);
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	2103      	movs	r1, #3
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 8000680:	f003 fe98 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, default_credit_duration);
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2104      	movs	r1, #4
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 800068e:	f003 fe91 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, default_credit_duration);
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <read_settings_from_eeprom+0x230>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	2105      	movs	r1, #5
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <read_settings_from_eeprom+0x1f4>)
 800069c:	f003 fe8a 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
	}
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000150 	.word	0x20000150
 80006ac:	20000013 	.word	0x20000013
 80006b0:	20000014 	.word	0x20000014
 80006b4:	20000015 	.word	0x20000015
 80006b8:	20000016 	.word	0x20000016
 80006bc:	20000017 	.word	0x20000017
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	200000f0 	.word	0x200000f0
 80006c8:	08006404 	.word	0x08006404
 80006cc:	2000031c 	.word	0x2000031c
 80006d0:	08006424 	.word	0x08006424
 80006d4:	08006444 	.word	0x08006444
 80006d8:	08006464 	.word	0x08006464
 80006dc:	08006484 	.word	0x08006484
 80006e0:	080064a4 	.word	0x080064a4
 80006e4:	20000000 	.word	0x20000000

080006e8 <reset_all_output>:
void reset_all_output(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // pin b0 --> out 1
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <reset_all_output+0x4c>)
 80006f2:	f002 fd06 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // pin b1 --> out 2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2102      	movs	r1, #2
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <reset_all_output+0x4c>)
 80006fc:	f002 fd01 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // pin a8 --> out 3
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <reset_all_output+0x50>)
 8000708:	f002 fcfb 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // pin b8 --> out 4
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <reset_all_output+0x4c>)
 8000714:	f002 fcf5 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // pin b9 --> out 5
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <reset_all_output+0x4c>)
 8000720:	f002 fcef 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // pin b12 --> out 6
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <reset_all_output+0x4c>)
 800072c:	f002 fce9 	bl	8003102 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010c00 	.word	0x40010c00
 8000738:	40010800 	.word	0x40010800

0800073c <set_output_to>:
void set_output_to(uint8_t pin){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	switch(pin){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	3b03      	subs	r3, #3
 800074a:	2b04      	cmp	r3, #4
 800074c:	d82d      	bhi.n	80007aa <set_output_to+0x6e>
 800074e:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <set_output_to+0x18>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000769 	.word	0x08000769
 8000758:	08000775 	.word	0x08000775
 800075c:	08000781 	.word	0x08000781
 8000760:	0800078f 	.word	0x0800078f
 8000764:	0800079d 	.word	0x0800079d
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // pin b0 --> out 1
 8000768:	2201      	movs	r2, #1
 800076a:	2101      	movs	r1, #1
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <set_output_to+0x80>)
 800076e:	f002 fcc8 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 8000772:	e01f      	b.n	80007b4 <set_output_to+0x78>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // pin b1 --> out 2
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <set_output_to+0x80>)
 800077a:	f002 fcc2 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 800077e:	e019      	b.n	80007b4 <set_output_to+0x78>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // pin a8 --> out 3
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <set_output_to+0x84>)
 8000788:	f002 fcbb 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 800078c:	e012      	b.n	80007b4 <set_output_to+0x78>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // pin b8 --> out 4
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <set_output_to+0x80>)
 8000796:	f002 fcb4 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 800079a:	e00b      	b.n	80007b4 <set_output_to+0x78>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // pin b9 --> out 5
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <set_output_to+0x80>)
 80007a4:	f002 fcad 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 80007a8:	e004      	b.n	80007b4 <set_output_to+0x78>
	default:
		reset_all_output();
 80007aa:	f7ff ff9d 	bl	80006e8 <reset_all_output>
		max7219_Turn_On();
 80007ae:	f001 fb31 	bl	8001e14 <max7219_Turn_On>
		break;
 80007b2:	bf00      	nop
	}

}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40010800 	.word	0x40010800

080007c4 <segment_display_int>:

void segment_display_int(int number){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	max7219_Decode_On();
 80007cc:	f001 fb32 	bl	8001e34 <max7219_Decode_On>
	max7219_Clean ();
 80007d0:	f001 fad2 	bl	8001d78 <max7219_Clean>
	if(number < 10){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	dc04      	bgt.n	80007e4 <segment_display_int+0x20>
		max7219_PrintItos (DIGIT_1, number );
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fb91 	bl	8001f04 <max7219_PrintItos>
	}else if(number >= 10 && number < 100){
		max7219_PrintItos (DIGIT_2, number );
	}else{
		max7219_PrintItos (DIGIT_3, number );
	}
}
 80007e2:	e00e      	b.n	8000802 <segment_display_int+0x3e>
	}else if(number >= 10 && number < 100){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b09      	cmp	r3, #9
 80007e8:	dd07      	ble.n	80007fa <segment_display_int+0x36>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b63      	cmp	r3, #99	; 0x63
 80007ee:	dc04      	bgt.n	80007fa <segment_display_int+0x36>
		max7219_PrintItos (DIGIT_2, number );
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	2002      	movs	r0, #2
 80007f4:	f001 fb86 	bl	8001f04 <max7219_PrintItos>
}
 80007f8:	e003      	b.n	8000802 <segment_display_int+0x3e>
		max7219_PrintItos (DIGIT_3, number );
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2003      	movs	r0, #3
 80007fe:	f001 fb81 	bl	8001f04 <max7219_PrintItos>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <segment_display_function_settings>:
void segment_display_function_settings(int func_number,int value){
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
	max7219_Decode_On();
 8000814:	f001 fb0e 	bl	8001e34 <max7219_Decode_On>
	max7219_Clean ();
 8000818:	f001 faae 	bl	8001d78 <max7219_Clean>
	if(value < 10){
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2b09      	cmp	r3, #9
 8000820:	dc04      	bgt.n	800082c <segment_display_function_settings+0x22>
		max7219_PrintItos (DIGIT_1, value );
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2001      	movs	r0, #1
 8000826:	f001 fb6d 	bl	8001f04 <max7219_PrintItos>
 800082a:	e009      	b.n	8000840 <segment_display_function_settings+0x36>
	}else if(value >= 10 && value < 100){
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b09      	cmp	r3, #9
 8000830:	dd06      	ble.n	8000840 <segment_display_function_settings+0x36>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2b63      	cmp	r3, #99	; 0x63
 8000836:	dc03      	bgt.n	8000840 <segment_display_function_settings+0x36>
		max7219_PrintItos (DIGIT_2, value );
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	2002      	movs	r0, #2
 800083c:	f001 fb62 	bl	8001f04 <max7219_PrintItos>
	}
	max7219_PrintDigit(DIGIT_3,func_number,true);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	2003      	movs	r0, #3
 800084a:	f001 fb03 	bl	8001e54 <max7219_PrintDigit>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <segment_display_standby>:
void segment_display_standby(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	max7219_Clean ();
 800085c:	f001 fa8c 	bl	8001d78 <max7219_Clean>
	max7219_Decode_On();
 8000860:	f001 fae8 	bl	8001e34 <max7219_Decode_On>
	max7219_Clean ();
 8000864:	f001 fa88 	bl	8001d78 <max7219_Clean>
	if(displayEnable == true){
 8000868:	4b60      	ldr	r3, [pc, #384]	; (80009ec <segment_display_standby+0x194>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 80a8 	beq.w	80009c4 <segment_display_standby+0x16c>
		switch(standby_counter){
 8000874:	4b5e      	ldr	r3, [pc, #376]	; (80009f0 <segment_display_standby+0x198>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b06      	cmp	r3, #6
 800087a:	f200 8081 	bhi.w	8000980 <segment_display_standby+0x128>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <segment_display_standby+0x2c>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	080008a1 	.word	0x080008a1
 8000888:	080008c1 	.word	0x080008c1
 800088c:	080008e1 	.word	0x080008e1
 8000890:	08000901 	.word	0x08000901
 8000894:	08000921 	.word	0x08000921
 8000898:	08000941 	.word	0x08000941
 800089c:	08000961 	.word	0x08000961
		case 0:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 80008a0:	2200      	movs	r2, #0
 80008a2:	210a      	movs	r1, #10
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 fad5 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	2002      	movs	r0, #2
 80008b0:	f001 fad0 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 80008b4:	2200      	movs	r2, #0
 80008b6:	210f      	movs	r1, #15
 80008b8:	2003      	movs	r0, #3
 80008ba:	f001 facb 	bl	8001e54 <max7219_PrintDigit>
			break;
 80008be:	e06f      	b.n	80009a0 <segment_display_standby+0x148>
		case 1:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 80008c0:	2200      	movs	r2, #0
 80008c2:	210f      	movs	r1, #15
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 fac5 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210a      	movs	r1, #10
 80008ce:	2002      	movs	r0, #2
 80008d0:	f001 fac0 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 80008d4:	2200      	movs	r2, #0
 80008d6:	210f      	movs	r1, #15
 80008d8:	2003      	movs	r0, #3
 80008da:	f001 fabb 	bl	8001e54 <max7219_PrintDigit>
			break;
 80008de:	e05f      	b.n	80009a0 <segment_display_standby+0x148>
		case 2:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 80008e0:	2200      	movs	r2, #0
 80008e2:	210f      	movs	r1, #15
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 fab5 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	2002      	movs	r0, #2
 80008f0:	f001 fab0 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 80008f4:	2200      	movs	r2, #0
 80008f6:	210a      	movs	r1, #10
 80008f8:	2003      	movs	r0, #3
 80008fa:	f001 faab 	bl	8001e54 <max7219_PrintDigit>
			break;
 80008fe:	e04f      	b.n	80009a0 <segment_display_standby+0x148>
		case 3:
			max7219_PrintDigit(DIGIT_1,BLANK,false);
 8000900:	2200      	movs	r2, #0
 8000902:	210f      	movs	r1, #15
 8000904:	2001      	movs	r0, #1
 8000906:	f001 faa5 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800090a:	2200      	movs	r2, #0
 800090c:	210a      	movs	r1, #10
 800090e:	2002      	movs	r0, #2
 8000910:	f001 faa0 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000914:	2200      	movs	r2, #0
 8000916:	210f      	movs	r1, #15
 8000918:	2003      	movs	r0, #3
 800091a:	f001 fa9b 	bl	8001e54 <max7219_PrintDigit>
			break;
 800091e:	e03f      	b.n	80009a0 <segment_display_standby+0x148>
		case 4:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000920:	2200      	movs	r2, #0
 8000922:	210a      	movs	r1, #10
 8000924:	2001      	movs	r0, #1
 8000926:	f001 fa95 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,BLANK,false);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	2002      	movs	r0, #2
 8000930:	f001 fa90 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,BLANK,false);
 8000934:	2200      	movs	r2, #0
 8000936:	210f      	movs	r1, #15
 8000938:	2003      	movs	r0, #3
 800093a:	f001 fa8b 	bl	8001e54 <max7219_PrintDigit>
			break;
 800093e:	e02f      	b.n	80009a0 <segment_display_standby+0x148>
		case 5:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000940:	2200      	movs	r2, #0
 8000942:	210a      	movs	r1, #10
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fa85 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800094a:	2200      	movs	r2, #0
 800094c:	210a      	movs	r1, #10
 800094e:	2002      	movs	r0, #2
 8000950:	f001 fa80 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000954:	2200      	movs	r2, #0
 8000956:	210a      	movs	r1, #10
 8000958:	2003      	movs	r0, #3
 800095a:	f001 fa7b 	bl	8001e54 <max7219_PrintDigit>
			break;
 800095e:	e01f      	b.n	80009a0 <segment_display_standby+0x148>
		case 6:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000960:	2200      	movs	r2, #0
 8000962:	210a      	movs	r1, #10
 8000964:	2001      	movs	r0, #1
 8000966:	f001 fa75 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800096a:	2200      	movs	r2, #0
 800096c:	210a      	movs	r1, #10
 800096e:	2002      	movs	r0, #2
 8000970:	f001 fa70 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000974:	2200      	movs	r2, #0
 8000976:	210a      	movs	r1, #10
 8000978:	2003      	movs	r0, #3
 800097a:	f001 fa6b 	bl	8001e54 <max7219_PrintDigit>
			break;
 800097e:	e00f      	b.n	80009a0 <segment_display_standby+0x148>
		default:
			max7219_PrintDigit(DIGIT_1,MINUS,false);
 8000980:	2200      	movs	r2, #0
 8000982:	210a      	movs	r1, #10
 8000984:	2001      	movs	r0, #1
 8000986:	f001 fa65 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_2,MINUS,false);
 800098a:	2200      	movs	r2, #0
 800098c:	210a      	movs	r1, #10
 800098e:	2002      	movs	r0, #2
 8000990:	f001 fa60 	bl	8001e54 <max7219_PrintDigit>
			max7219_PrintDigit(DIGIT_3,MINUS,false);
 8000994:	2200      	movs	r2, #0
 8000996:	210a      	movs	r1, #10
 8000998:	2003      	movs	r0, #3
 800099a:	f001 fa5b 	bl	8001e54 <max7219_PrintDigit>
			break;
 800099e:	bf00      	nop
		}
		if(standby_counter >= 6){
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <segment_display_standby+0x198>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d903      	bls.n	80009b0 <segment_display_standby+0x158>
			standby_counter = 0;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <segment_display_standby+0x198>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e005      	b.n	80009bc <segment_display_standby+0x164>
		}else{
			standby_counter += 1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <segment_display_standby+0x198>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <segment_display_standby+0x198>)
 80009ba:	701a      	strb	r2, [r3, #0]
		}
		//		max7219_PrintDigit(DIGIT_1,MINUS,false);
		//		max7219_PrintDigit(DIGIT_2,MINUS,false);
		//		max7219_PrintDigit(DIGIT_3,MINUS,false);
		displayEnable = false;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <segment_display_standby+0x194>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		max7219_PrintDigit(DIGIT_2,BLANK,false);
		max7219_PrintDigit(DIGIT_3,BLANK,false);
		displayEnable = true;
	}

}
 80009c2:	e011      	b.n	80009e8 <segment_display_standby+0x190>
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 80009c4:	2200      	movs	r2, #0
 80009c6:	210f      	movs	r1, #15
 80009c8:	2001      	movs	r0, #1
 80009ca:	f001 fa43 	bl	8001e54 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	2002      	movs	r0, #2
 80009d4:	f001 fa3e 	bl	8001e54 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 80009d8:	2200      	movs	r2, #0
 80009da:	210f      	movs	r1, #15
 80009dc:	2003      	movs	r0, #3
 80009de:	f001 fa39 	bl	8001e54 <max7219_PrintDigit>
		displayEnable = true;
 80009e2:	4b02      	ldr	r3, [pc, #8]	; (80009ec <segment_display_standby+0x194>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	200000fc 	.word	0x200000fc

080009f4 <iot_send_credit>:
	max7219_Clean ();
	max7219_PrintDigit(DIGIT_1,BLANK,false);
	max7219_PrintDigit(DIGIT_2,BLANK,false);
	max7219_PrintDigit(DIGIT_3,BLANK,false);
}
void iot_send_credit(uint16_t credit){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
	char cmd_buffer[25];
	sprintf(cmd_buffer,"$CRIN_%d$\r\n",(unsigned int)credit);
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	490a      	ldr	r1, [pc, #40]	; (8000a30 <iot_send_credit+0x3c>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f005 f8d6 	bl	8005bb8 <siprintf>
#ifdef DEBUG
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fb9b 	bl	800014c <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f107 010c 	add.w	r1, r7, #12
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <iot_send_credit+0x40>)
 8000a24:	f004 ff2b 	bl	800587e <HAL_UART_Transmit>
#else
	HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
#endif
}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	080064c0 	.word	0x080064c0
 8000a34:	2000031c 	.word	0x2000031c

08000a38 <iot_send_current_credit>:
void iot_send_current_credit(uint16_t credit){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	char cmd_buffer[25];
	sprintf(cmd_buffer,"$CURC_%d$\r\n",(unsigned int)credit);
 8000a42:	88fa      	ldrh	r2, [r7, #6]
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	490a      	ldr	r1, [pc, #40]	; (8000a74 <iot_send_current_credit+0x3c>)
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 f8b4 	bl	8005bb8 <siprintf>
#ifdef DEBUG
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fb79 	bl	800014c <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f107 010c 	add.w	r1, r7, #12
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <iot_send_current_credit+0x40>)
 8000a68:	f004 ff09 	bl	800587e <HAL_UART_Transmit>
#else
	HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	080064cc 	.word	0x080064cc
 8000a78:	2000031c 	.word	0x2000031c

08000a7c <iot_send_mode>:
void iot_send_mode(uint8_t mode){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	char cmd_buffer[25];
	sprintf(cmd_buffer,"$MODE_%d$\r\n",(unsigned int)mode);
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	490a      	ldr	r1, [pc, #40]	; (8000ab8 <iot_send_mode+0x3c>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 f892 	bl	8005bb8 <siprintf>
#ifdef DEBUG
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fb57 	bl	800014c <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f107 010c 	add.w	r1, r7, #12
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <iot_send_mode+0x40>)
 8000aac:	f004 fee7 	bl	800587e <HAL_UART_Transmit>
#else
	HAL_UART_Transmit(&huart3, (uint8_t *)cmd_buffer, strlen(cmd_buffer), HAL_MAX_DELAY);
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	080064d8 	.word	0x080064d8
 8000abc:	2000031c 	.word	0x2000031c

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	; 0x60
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { /// tick every 1s
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a9f      	ldr	r2, [pc, #636]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	f040 80bc 	bne.w	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
		max7219_Turn_On();
 8000ad4:	f001 f99e 	bl	8001e14 <max7219_Turn_On>
		//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, 2);
		//		char tmp[25];
		//		uint8_t mapped_value = calculate_adc(adcBuffer[0]);
		if(clearButton == true){
 8000ad8:	4b9d      	ldr	r3, [pc, #628]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d044      	beq.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0xaa>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1){
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	489c      	ldr	r0, [pc, #624]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000ae4:	f002 faf6 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d112      	bne.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_UART_Transmit(&huart1, "---> CLEAR BTN >>PRESS<< !!!\r\n", 30, HAL_MAX_DELAY);
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	221e      	movs	r2, #30
 8000af4:	4998      	ldr	r1, [pc, #608]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000af6:	4899      	ldr	r0, [pc, #612]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000af8:	f004 fec1 	bl	800587e <HAL_UART_Transmit>
				selected_button = 0;
 8000afc:	4b98      	ldr	r3, [pc, #608]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000b02:	f7ff fdf1 	bl	80006e8 <reset_all_output>
				clearButtonCounter += 1;
 8000b06:	4b97      	ldr	r3, [pc, #604]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b95      	ldr	r3, [pc, #596]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e008      	b.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x66>
			}else{
				clearButton = false;
 8000b14:	4b8e      	ldr	r3, [pc, #568]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000b1a:	4b92      	ldr	r3, [pc, #584]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000b20:	4891      	ldr	r0, [pc, #580]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b22:	f003 ff85 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
			}
			if(clearButtonCounter > 5){
 8000b26:	4b8f      	ldr	r3, [pc, #572]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d91d      	bls.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0xaa>
				HAL_UART_Transmit(&huart1, "---> CLEAR CREDITS !!!\r\n", 24, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	2218      	movs	r2, #24
 8000b34:	498d      	ldr	r1, [pc, #564]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b36:	4889      	ldr	r0, [pc, #548]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b38:	f004 fea1 	bl	800587e <HAL_UART_Transmit>
				clearButton = false;
 8000b3c:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
				clearButtonCounter = 0;
 8000b42:	4b88      	ldr	r3, [pc, #544]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
				credit = 0;
 8000b48:	4b89      	ldr	r3, [pc, #548]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
				system_function_start = false;
 8000b4e:	4b89      	ldr	r3, [pc, #548]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
				selected_button = 0;
 8000b54:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
				reset_all_output();
 8000b5a:	f7ff fdc5 	bl	80006e8 <reset_all_output>
				clearButtonCounter = 0;
 8000b5e:	4b81      	ldr	r3, [pc, #516]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8000b64:	4880      	ldr	r0, [pc, #512]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b66:	f003 ff63 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
			}
		}
		if (selected_menu > 0) {
 8000b6a:	4b83      	ldr	r3, [pc, #524]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d05c      	beq.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16e>
			HAL_TIM_Base_Stop_IT(&htim2); //stop main program
 8000b74:	4881      	ldr	r0, [pc, #516]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b76:	f003 ff5b 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
			switch (selected_menu) {
 8000b7a:	4b7f      	ldr	r3, [pc, #508]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	3b01      	subs	r3, #1
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d862      	bhi.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000ba1 	.word	0x08000ba1
 8000b90:	08000bb9 	.word	0x08000bb9
 8000b94:	08000bd1 	.word	0x08000bd1
 8000b98:	08000bf3 	.word	0x08000bf3
 8000b9c:	08000c15 	.word	0x08000c15
			case 1:
				//				max7219_PrintDigit(DIGIT_3,16,true);
				segment_display_function_settings(selected_menu,F1_DURATION);
 8000ba0:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b75      	ldr	r3, [pc, #468]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	f7ff fe2a 	bl	800080a <segment_display_function_settings>
				//				max7219_PrintDigit(DIGIT_2,NUM_1,false);
				//				memset(tmp, 0, sizeof tmp);
				//				sprintf(tmp, "F1 VALUE : %d \r\n", (unsigned int) mapped_value);
				//				HAL_UART_Transmit(&huart1, tmp, strlen(tmp), HAL_MAX_DELAY);
				//				F1_DURATION = mapped_value;
				break;
 8000bb6:	e049      	b.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 2:
				segment_display_function_settings(selected_menu,F2_DURATION);
 8000bb8:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b70      	ldr	r3, [pc, #448]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4610      	mov	r0, r2
 8000bca:	f7ff fe1e 	bl	800080a <segment_display_function_settings>
				break;
 8000bce:	e03d      	b.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 3:
				max7219_PrintDigit(DIGIT_3,18,true);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2112      	movs	r1, #18
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f001 f93d 	bl	8001e54 <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F3_DURATION);
 8000bda:	4b67      	ldr	r3, [pc, #412]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	4610      	mov	r0, r2
 8000bec:	f7ff fe0d 	bl	800080a <segment_display_function_settings>
				break;
 8000bf0:	e02c      	b.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 4:
				max7219_PrintDigit(DIGIT_3,19,true);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2113      	movs	r1, #19
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f001 f92c 	bl	8001e54 <max7219_PrintDigit>
				segment_display_function_settings(selected_menu,F4_DURATION);
 8000bfc:	4b5e      	ldr	r3, [pc, #376]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	f7ff fdfc 	bl	800080a <segment_display_function_settings>
				break;
 8000c12:	e01b      	b.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
			case 5:
				segment_display_function_settings(selected_menu,F5_DURATION);
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	4610      	mov	r0, r2
 8000c26:	f7ff fdf0 	bl	800080a <segment_display_function_settings>
				break;
 8000c2a:	bf00      	nop
 8000c2c:	e00e      	b.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
			}
		} else {
			max7219_Decode_On();
 8000c2e:	f001 f901 	bl	8001e34 <max7219_Decode_On>
			HAL_TIM_Base_Start_IT(&htim2);
 8000c32:	4852      	ldr	r0, [pc, #328]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c34:	f003 feaa 	bl	800498c <HAL_TIM_Base_Start_IT>
			if(clearButton == false){
 8000c38:	4b45      	ldr	r3, [pc, #276]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_TIM_PeriodElapsedCallback+0x18c>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000c46:	4848      	ldr	r0, [pc, #288]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000c48:	f003 fef2 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if (htim->Instance == TIM2) { /// tick every 1ms
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c54:	f040 80c2 	bne.w	8000ddc <HAL_TIM_PeriodElapsedCallback+0x31c>
//		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
		char credit_tmp_msg[55];
		if(last_credit_insert > 0){
 8000c58:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01e      	beq.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x1de>
			iot_send_credit(last_credit_insert);
 8000c60:	4b4c      	ldr	r3, [pc, #304]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fec5 	bl	80009f4 <iot_send_credit>
			sprintf(credit_tmp_msg,"last credit inserted: %d \r\n",(unsigned int)last_credit_insert);
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4948      	ldr	r1, [pc, #288]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 ff9e 	bl	8005bb8 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fa63 	bl	800014c <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f107 010c 	add.w	r1, r7, #12
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	4832      	ldr	r0, [pc, #200]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000c94:	f004 fdf3 	bl	800587e <HAL_UART_Transmit>
			last_credit_insert = 0;
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
		}
		if(last_credit_insert_bank > 0){
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d01e      	beq.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x224>
			iot_send_credit(last_credit_insert);
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fea2 	bl	80009f4 <iot_send_credit>
			sprintf(credit_tmp_msg,"last bank credit inserted: %d \r\n",(unsigned int)last_credit_insert_bank);
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4939      	ldr	r1, [pc, #228]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 ff7b 	bl	8005bb8 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)credit_tmp_msg, strlen(credit_tmp_msg), HAL_MAX_DELAY);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fa40 	bl	800014c <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	4820      	ldr	r0, [pc, #128]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cda:	f004 fdd0 	bl	800587e <HAL_UART_Transmit>
			last_credit_insert_bank = 0;
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
		}
		if(tim2_round_counter >= 10){
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b09      	cmp	r3, #9
 8000cea:	d90c      	bls.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x246>
			HAL_UART_Transmit(&huart1, (uint8_t*)"TIM2 TICK!!\r\n", 13, HAL_MAX_DELAY);
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	220d      	movs	r2, #13
 8000cf2:	492d      	ldr	r1, [pc, #180]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cf4:	4819      	ldr	r0, [pc, #100]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cf6:	f004 fdc2 	bl	800587e <HAL_UART_Transmit>
			logic_runner();
 8000cfa:	f000 fd8d 	bl	8001818 <logic_runner>
			tim2_round_counter = 0;
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e06a      	b.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x31c>
		}else{
			if((tim2_round_counter%3) == 0){
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d10:	0859      	lsrs	r1, r3, #1
 8000d12:	460b      	mov	r3, r1
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	440b      	add	r3, r1
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d14b      	bne.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x2f8>
				if (selected_button != 0) {
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d044      	beq.n	8000db4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
					if(displayToggle){
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x280>
						max7219_Turn_On();
 8000d34:	f001 f86e 	bl	8001e14 <max7219_Turn_On>
						displayToggle = false;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e03b      	b.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x2f8>
					}else{
						max7219_Turn_Off();
 8000d40:	f001 f870 	bl	8001e24 <max7219_Turn_Off>
						displayToggle = true;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e035      	b.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8000d4c:	40000800 	.word	0x40000800
 8000d50:	200000fd 	.word	0x200000fd
 8000d54:	40010800 	.word	0x40010800
 8000d58:	080064e4 	.word	0x080064e4
 8000d5c:	2000031c 	.word	0x2000031c
 8000d60:	200000e8 	.word	0x200000e8
 8000d64:	200000fe 	.word	0x200000fe
 8000d68:	200001bc 	.word	0x200001bc
 8000d6c:	08006504 	.word	0x08006504
 8000d70:	200000e4 	.word	0x200000e4
 8000d74:	200000f0 	.word	0x200000f0
 8000d78:	200000e1 	.word	0x200000e1
 8000d7c:	20000294 	.word	0x20000294
 8000d80:	20000013 	.word	0x20000013
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000015 	.word	0x20000015
 8000d8c:	20000016 	.word	0x20000016
 8000d90:	20000017 	.word	0x20000017
 8000d94:	200000f8 	.word	0x200000f8
 8000d98:	08006520 	.word	0x08006520
 8000d9c:	200000fa 	.word	0x200000fa
 8000da0:	0800653c 	.word	0x0800653c
 8000da4:	200000ff 	.word	0x200000ff
 8000da8:	08006560 	.word	0x08006560
 8000dac:	aaaaaaab 	.word	0xaaaaaaab
 8000db0:	2000000d 	.word	0x2000000d
					}
				}else{
					max7219_Turn_On();
 8000db4:	f001 f82e 	bl	8001e14 <max7219_Turn_On>
				}
			}
			if(credit <= 0){
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d107      	bne.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x310>
				if((tim2_round_counter&2) == 0){
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x310>
					segment_display_standby();
 8000dcc:	f7ff fd44 	bl	8000858 <segment_display_standby>
				}
			}

			tim2_round_counter += 1;
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000dda:	701a      	strb	r2, [r3, #0]

		}
	}
	if (htim->Instance == TIM1) { /// tick every 1000ms
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d136      	bne.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x394>
		stop_and_clear_tim1();
 8000de6:	f000 fded 	bl	80019c4 <stop_and_clear_tim1>
		//		enable_all_exti_it();
		HAL_UART_Transmit(&huart1, (uint8_t*)"TIM SW DEBOUNCE TICK!\r\n", 23, HAL_MAX_DELAY);
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2217      	movs	r2, #23
 8000df0:	491d      	ldr	r1, [pc, #116]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000df2:	481e      	ldr	r0, [pc, #120]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000df4:	f004 fd43 	bl	800587e <HAL_UART_Transmit>
		char tmp[25];
		sprintf(tmp, "selected mode %d \r\n", (unsigned int) selected_button);
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e04:	491b      	ldr	r1, [pc, #108]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fed6 	bl	8005bb8 <siprintf>
		reset_all_output();
 8000e0c:	f7ff fc6c 	bl	80006e8 <reset_all_output>
		set_output_to(selected_button);
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc90 	bl	800073c <set_output_to>
		iot_send_mode(selected_button);
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe2a 	bl	8000a7c <iot_send_mode>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp, strlen(tmp), HAL_MAX_DELAY);
 8000e28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f98d 	bl	800014c <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000e40:	f004 fd1d 	bl	800587e <HAL_UART_Transmit>
		if(selected_menu <= 0){
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x394>
			HAL_TIM_Base_Start_IT(&htim2);
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000e50:	f003 fd9c 	bl	800498c <HAL_TIM_Base_Start_IT>
		}

	}
}
 8000e54:	bf00      	nop
 8000e56:	3760      	adds	r7, #96	; 0x60
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000e4 	.word	0x200000e4
 8000e60:	200000ff 	.word	0x200000ff
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	08006570 	.word	0x08006570
 8000e6c:	2000031c 	.word	0x2000031c
 8000e70:	200000e8 	.word	0x200000e8
 8000e74:	08006588 	.word	0x08006588
 8000e78:	200000e1 	.word	0x200000e1
 8000e7c:	20000294 	.word	0x20000294

08000e80 <disable_all_exti_it>:
void disable_all_exti_it(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000e84:	2008      	movs	r0, #8
 8000e86:	f001 ffa2 	bl	8002dce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000e8a:	2009      	movs	r0, #9
 8000e8c:	f001 ff9f 	bl	8002dce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f001 ff9c 	bl	8002dce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000e96:	2017      	movs	r0, #23
 8000e98:	f001 ff99 	bl	8002dce <HAL_NVIC_DisableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <enable_all_exti_it>:
void enable_all_exti_it(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8000ea4:	2008      	movs	r0, #8
 8000ea6:	f001 ffac 	bl	8002e02 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000eaa:	2009      	movs	r0, #9
 8000eac:	f001 ffa9 	bl	8002e02 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f001 ffa6 	bl	8002e02 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000eb6:	2017      	movs	r0, #23
 8000eb8:	f001 ffa3 	bl	8002e02 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ebc:	2008      	movs	r0, #8
 8000ebe:	f001 ff78 	bl	8002db2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ec2:	2009      	movs	r0, #9
 8000ec4:	f001 ff75 	bl	8002db2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f001 ff72 	bl	8002db2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ece:	2017      	movs	r0, #23
 8000ed0:	f001 ff6f 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b0b0      	sub	sp, #192	; 0xc0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	disable_all_exti_it();
 8000ee2:	f7ff ffcd 	bl	8000e80 <disable_all_exti_it>
	char message_sw2[] = "Switch [2] pressed!\r\n";
 8000ee6:	4bc0      	ldr	r3, [pc, #768]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x310>)
 8000ee8:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000eec:	461d      	mov	r5, r3
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef6:	6020      	str	r0, [r4, #0]
 8000ef8:	3404      	adds	r4, #4
 8000efa:	8021      	strh	r1, [r4, #0]
	char message_sw3[] = "FRONT SW [1] pressed!\r\n";
 8000efc:	4bbb      	ldr	r3, [pc, #748]	; (80011ec <HAL_GPIO_EXTI_Callback+0x314>)
 8000efe:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f0c:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw4[] = "FRONT SW [2] pressed!\r\n";
 8000f10:	4bb7      	ldr	r3, [pc, #732]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x318>)
 8000f12:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000f16:	461d      	mov	r5, r3
 8000f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f20:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw5[] = "FRONT SW [3] pressed!\r\n";
 8000f24:	4bb3      	ldr	r3, [pc, #716]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000f26:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f34:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw6[] = "FRONT SW [4] pressed!\r\n";
 8000f38:	4baf      	ldr	r3, [pc, #700]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x320>)
 8000f3a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f48:	e884 0003 	stmia.w	r4, {r0, r1}
	char message_sw7[] = "FRONT SW [5] pressed!\r\n";
 8000f4c:	4bab      	ldr	r3, [pc, #684]	; (80011fc <HAL_GPIO_EXTI_Callback+0x324>)
 8000f4e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f52:	461d      	mov	r5, r3
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f5c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t tickstart = HAL_GetTick();
 8000f60:	f001 fdb0 	bl	8002ac4 <HAL_GetTick>
 8000f64:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	char tick_msg[35];
	sprintf(tick_msg,"---- sysTick : %d\r\n",tickstart);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f70:	49a3      	ldr	r1, [pc, #652]	; (8001200 <HAL_GPIO_EXTI_Callback+0x328>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fe20 	bl	8005bb8 <siprintf>
	if( (tickstart - lastTimePress)<=50){
 8000f78:	4ba2      	ldr	r3, [pc, #648]	; (8001204 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b32      	cmp	r3, #50	; 0x32
 8000f84:	d809      	bhi.n	8000f9a <HAL_GPIO_EXTI_Callback+0xc2>
		HAL_UART_Transmit(&huart1,"too many times press !!!!\r\n", 27,HAL_MAX_DELAY);
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	221b      	movs	r2, #27
 8000f8c:	499e      	ldr	r1, [pc, #632]	; (8001208 <HAL_GPIO_EXTI_Callback+0x330>)
 8000f8e:	489f      	ldr	r0, [pc, #636]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 8000f90:	f004 fc75 	bl	800587e <HAL_UART_Transmit>
		enable_all_exti_it();
 8000f94:	f7ff ff84 	bl	8000ea0 <enable_all_exti_it>
 8000f98:	e18a      	b.n	80012b0 <HAL_GPIO_EXTI_Callback+0x3d8>
		return;
	}else{
		lastTimePress = tickstart;
 8000f9a:	4a9a      	ldr	r2, [pc, #616]	; (8001204 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fa0:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)tick_msg, strlen(tick_msg),
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f8d0 	bl	800014c <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f107 0108 	add.w	r1, r7, #8
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	4894      	ldr	r0, [pc, #592]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 8000fba:	f004 fc60 	bl	800587e <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	if (GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d131      	bne.n	8001028 <HAL_GPIO_EXTI_Callback+0x150>
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4892      	ldr	r0, [pc, #584]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 8000fc8:	f002 f884 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d12a      	bne.n	8001028 <HAL_GPIO_EXTI_Callback+0x150>
		enable_all_exti_it();
 8000fd2:	f7ff ff65 	bl	8000ea0 <enable_all_exti_it>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000fd6:	488f      	ldr	r0, [pc, #572]	; (8001214 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000fd8:	f003 fd2a 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_sw2, strlen(message_sw2),
 8000fdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8b3 	bl	800014c <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	4886      	ldr	r0, [pc, #536]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 8000ff4:	f004 fc43 	bl	800587e <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		selected_menu += 1;
 8000ff8:	4b87      	ldr	r3, [pc, #540]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b85      	ldr	r3, [pc, #532]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 8001004:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8001006:	4885      	ldr	r0, [pc, #532]	; (800121c <HAL_GPIO_EXTI_Callback+0x344>)
 8001008:	f003 fcc0 	bl	800498c <HAL_TIM_Base_Start_IT>
		if (selected_menu > 5) {
 800100c:	4b82      	ldr	r3, [pc, #520]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b05      	cmp	r3, #5
 8001014:	d908      	bls.n	8001028 <HAL_GPIO_EXTI_Callback+0x150>
			selected_menu = 0;
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 800101c:	487f      	ldr	r0, [pc, #508]	; (800121c <HAL_GPIO_EXTI_Callback+0x344>)
 800101e:	f003 fd07 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8001022:	487c      	ldr	r0, [pc, #496]	; (8001214 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001024:	f003 fcb2 	bl	800498c <HAL_TIM_Base_Start_IT>
		}
	}
	if(selected_menu > 0){
 8001028:	4b7b      	ldr	r3, [pc, #492]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01c      	beq.n	800106c <HAL_GPIO_EXTI_Callback+0x194>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 8001032:	2108      	movs	r1, #8
 8001034:	4876      	ldr	r0, [pc, #472]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 8001036:	f002 f84d 	bl	80030d4 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d106      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x176>
			set_add_duration_of_function(selected_menu);
 8001040:	4b75      	ldr	r3, [pc, #468]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f98e 	bl	8001368 <set_add_duration_of_function>
 800104c:	e12b      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 800104e:	2110      	movs	r1, #16
 8001050:	486f      	ldr	r0, [pc, #444]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 8001052:	f002 f83f 	bl	80030d4 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 8124 	bne.w	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
			set_substract_duration_of_function(selected_menu);
 800105e:	4b6e      	ldr	r3, [pc, #440]	; (8001218 <HAL_GPIO_EXTI_Callback+0x340>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fa15 	bl	8001494 <set_substract_duration_of_function>
 800106a:	e11c      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
		}
	}
	else if (system_function_start) {
 800106c:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <HAL_GPIO_EXTI_Callback+0x348>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8117 	beq.w	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001078:	4866      	ldr	r0, [pc, #408]	; (8001214 <HAL_GPIO_EXTI_Callback+0x33c>)
 800107a:	f003 fcd9 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 800107e:	4869      	ldr	r0, [pc, #420]	; (8001224 <HAL_GPIO_EXTI_Callback+0x34c>)
 8001080:	f003 fcd6 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001084:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_GPIO_EXTI_Callback+0x34c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800108c:	4b61      	ldr	r3, [pc, #388]	; (8001214 <HAL_GPIO_EXTI_Callback+0x33c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
		displayToggle = true;
 8001094:	4b64      	ldr	r3, [pc, #400]	; (8001228 <HAL_GPIO_EXTI_Callback+0x350>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
		max7219_Turn_On();
 800109a:	f000 febb 	bl	8001e14 <max7219_Turn_On>
		switch (GPIO_Pin) {
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	d05a      	beq.n	800115a <HAL_GPIO_EXTI_Callback+0x282>
 80010a4:	2b20      	cmp	r3, #32
 80010a6:	dc04      	bgt.n	80010b2 <HAL_GPIO_EXTI_Callback+0x1da>
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d008      	beq.n	80010be <HAL_GPIO_EXTI_Callback+0x1e6>
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d02d      	beq.n	800110c <HAL_GPIO_EXTI_Callback+0x234>
 80010b0:	e0f9      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
 80010b2:	2b40      	cmp	r3, #64	; 0x40
 80010b4:	d078      	beq.n	80011a8 <HAL_GPIO_EXTI_Callback+0x2d0>
 80010b6:	2b80      	cmp	r3, #128	; 0x80
 80010b8:	f000 80c0 	beq.w	800123c <HAL_GPIO_EXTI_Callback+0x364>
 80010bc:	e0f3      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
		case GPIO_PIN_3:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80010be:	2108      	movs	r1, #8
 80010c0:	4853      	ldr	r0, [pc, #332]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 80010c2:	f002 f807 	bl	80030d4 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 80e3 	bne.w	8001294 <HAL_GPIO_EXTI_Callback+0x3bc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw3, strlen(message_sw3),
 80010ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f83a 	bl	800014c <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	4849      	ldr	r0, [pc, #292]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 80010e6:	f004 fbca 	bl	800587e <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 3) {
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d105      	bne.n	8001100 <HAL_GPIO_EXTI_Callback+0x228>
					selected_button = 0;
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 80010fa:	f7ff faf5 	bl	80006e8 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 3;
				}
			}
			break;
 80010fe:	e0c9      	b.n	8001294 <HAL_GPIO_EXTI_Callback+0x3bc>
					reset_all_output();
 8001100:	f7ff faf2 	bl	80006e8 <reset_all_output>
					selected_button = 3;
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 8001106:	2203      	movs	r2, #3
 8001108:	701a      	strb	r2, [r3, #0]
			break;
 800110a:	e0c3      	b.n	8001294 <HAL_GPIO_EXTI_Callback+0x3bc>
		case GPIO_PIN_4:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 800110c:	2110      	movs	r1, #16
 800110e:	4840      	ldr	r0, [pc, #256]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 8001110:	f001 ffe0 	bl	80030d4 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	f040 80be 	bne.w	8001298 <HAL_GPIO_EXTI_Callback+0x3c0>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw4, strlen(message_sw3),
 800111c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f813 	bl	800014c <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	4836      	ldr	r0, [pc, #216]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 8001134:	f004 fba3 	bl	800587e <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 4) {
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b04      	cmp	r3, #4
 8001140:	d105      	bne.n	800114e <HAL_GPIO_EXTI_Callback+0x276>
					selected_button = 0;
 8001142:	4b3a      	ldr	r3, [pc, #232]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001148:	f7ff face 	bl	80006e8 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 4;
				}
			}
			break;
 800114c:	e0a4      	b.n	8001298 <HAL_GPIO_EXTI_Callback+0x3c0>
					reset_all_output();
 800114e:	f7ff facb 	bl	80006e8 <reset_all_output>
					selected_button = 4;
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 8001154:	2204      	movs	r2, #4
 8001156:	701a      	strb	r2, [r3, #0]
			break;
 8001158:	e09e      	b.n	8001298 <HAL_GPIO_EXTI_Callback+0x3c0>
		case GPIO_PIN_5:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 800115a:	2120      	movs	r1, #32
 800115c:	482c      	ldr	r0, [pc, #176]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 800115e:	f001 ffb9 	bl	80030d4 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b01      	cmp	r3, #1
 8001166:	f040 8099 	bne.w	800129c <HAL_GPIO_EXTI_Callback+0x3c4>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw5, strlen(message_sw3),
 800116a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800116e:	4618      	mov	r0, r3
 8001170:	f7fe ffec 	bl	800014c <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	4822      	ldr	r0, [pc, #136]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 8001182:	f004 fb7c 	bl	800587e <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 5) {
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b05      	cmp	r3, #5
 800118e:	d105      	bne.n	800119c <HAL_GPIO_EXTI_Callback+0x2c4>
					selected_button = 0;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001196:	f7ff faa7 	bl	80006e8 <reset_all_output>
				} else {
					reset_all_output();
					selected_button = 5;
				}
			}
			break;
 800119a:	e07f      	b.n	800129c <HAL_GPIO_EXTI_Callback+0x3c4>
					reset_all_output();
 800119c:	f7ff faa4 	bl	80006e8 <reset_all_output>
					selected_button = 5;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	701a      	strb	r2, [r3, #0]
			break;
 80011a6:	e079      	b.n	800129c <HAL_GPIO_EXTI_Callback+0x3c4>
		case GPIO_PIN_6:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	4819      	ldr	r0, [pc, #100]	; (8001210 <HAL_GPIO_EXTI_Callback+0x338>)
 80011ac:	f001 ff92 	bl	80030d4 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d174      	bne.n	80012a0 <HAL_GPIO_EXTI_Callback+0x3c8>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw6, strlen(message_sw3),
 80011b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7fe ffc6 	bl	800014c <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <HAL_GPIO_EXTI_Callback+0x334>)
 80011ce:	f004 fb56 	bl	800587e <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 6) {
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d129      	bne.n	8001230 <HAL_GPIO_EXTI_Callback+0x358>
					reset_all_output();
 80011dc:	f7ff fa84 	bl	80006e8 <reset_all_output>
					selected_button = 0;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_GPIO_EXTI_Callback+0x354>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
				} else {
					reset_all_output();
					selected_button = 6;
				}
			}
			break;
 80011e6:	e05b      	b.n	80012a0 <HAL_GPIO_EXTI_Callback+0x3c8>
 80011e8:	080065cc 	.word	0x080065cc
 80011ec:	080065e4 	.word	0x080065e4
 80011f0:	080065fc 	.word	0x080065fc
 80011f4:	08006614 	.word	0x08006614
 80011f8:	0800662c 	.word	0x0800662c
 80011fc:	08006644 	.word	0x08006644
 8001200:	0800659c 	.word	0x0800659c
 8001204:	200000f4 	.word	0x200000f4
 8001208:	080065b0 	.word	0x080065b0
 800120c:	2000031c 	.word	0x2000031c
 8001210:	40010800 	.word	0x40010800
 8001214:	20000294 	.word	0x20000294
 8001218:	200000e1 	.word	0x200000e1
 800121c:	200001bc 	.word	0x200001bc
 8001220:	200000f0 	.word	0x200000f0
 8001224:	2000024c 	.word	0x2000024c
 8001228:	2000000d 	.word	0x2000000d
 800122c:	200000e8 	.word	0x200000e8
					reset_all_output();
 8001230:	f7ff fa5a 	bl	80006e8 <reset_all_output>
					selected_button = 6;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001236:	2206      	movs	r2, #6
 8001238:	701a      	strb	r2, [r3, #0]
			break;
 800123a:	e031      	b.n	80012a0 <HAL_GPIO_EXTI_Callback+0x3c8>
		case GPIO_PIN_7:
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) {
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	481f      	ldr	r0, [pc, #124]	; (80012bc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001240:	f001 ff48 	bl	80030d4 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12c      	bne.n	80012a4 <HAL_GPIO_EXTI_Callback+0x3cc>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_sw7, strlen(message_sw3),
 800124a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff7c 	bl	800014c <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	4817      	ldr	r0, [pc, #92]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001262:	f004 fb0c 	bl	800587e <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				if (selected_button == 7) {
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b07      	cmp	r3, #7
 800126e:	d10b      	bne.n	8001288 <HAL_GPIO_EXTI_Callback+0x3b0>
					selected_button = 0;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
					reset_all_output();
 8001276:	f7ff fa37 	bl	80006e8 <reset_all_output>
					clearButton = true;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x3ec>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim4);
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x3f0>)
 8001282:	f003 fb83 	bl	800498c <HAL_TIM_Base_Start_IT>
				} else {
					reset_all_output();
					selected_button = 7;
				}
			}
			break;
 8001286:	e00d      	b.n	80012a4 <HAL_GPIO_EXTI_Callback+0x3cc>
					reset_all_output();
 8001288:	f7ff fa2e 	bl	80006e8 <reset_all_output>
					selected_button = 7;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x3e0>)
 800128e:	2207      	movs	r2, #7
 8001290:	701a      	strb	r2, [r3, #0]
			break;
 8001292:	e007      	b.n	80012a4 <HAL_GPIO_EXTI_Callback+0x3cc>
			break;
 8001294:	bf00      	nop
 8001296:	e006      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 8001298:	bf00      	nop
 800129a:	e004      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 800129c:	bf00      	nop
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 80012a0:	bf00      	nop
 80012a2:	e000      	b.n	80012a6 <HAL_GPIO_EXTI_Callback+0x3ce>
			break;
 80012a4:	bf00      	nop
	}
	//	uint32_t i = 100000;
	//	while (i-- > 0) {
	//		asm("nop");
	//	}
	enable_all_exti_it();
 80012a6:	f7ff fdfb 	bl	8000ea0 <enable_all_exti_it>
	HAL_TIM_Base_Start_IT(&htim1);
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_Callback+0x3f4>)
 80012ac:	f003 fb6e 	bl	800498c <HAL_TIM_Base_Start_IT>
}
 80012b0:	37c0      	adds	r7, #192	; 0xc0
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bdb0      	pop	{r4, r5, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000e8 	.word	0x200000e8
 80012bc:	40010800 	.word	0x40010800
 80012c0:	2000031c 	.word	0x2000031c
 80012c4:	200000fd 	.word	0x200000fd
 80012c8:	200001bc 	.word	0x200001bc
 80012cc:	2000024c 	.word	0x2000024c

080012d0 <eeprom_write>:
void eeprom_write(uint8_t addr, uint8_t data){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	460a      	mov	r2, r1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	71bb      	strb	r3, [r7, #6]
	 *   0x05   |  F5_DURATION
	 *
	 *	 0x06   |  credit
	 *
	 * */
	switch(addr){
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d839      	bhi.n	800135c <eeprom_write+0x8c>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <eeprom_write+0x20>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001309 	.word	0x08001309
 80012f4:	08001317 	.word	0x08001317
 80012f8:	08001325 	.word	0x08001325
 80012fc:	08001333 	.word	0x08001333
 8001300:	08001341 	.word	0x08001341
 8001304:	0800134f 	.word	0x0800134f
	case 0x01:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	461a      	mov	r2, r3
 800130c:	2101      	movs	r1, #1
 800130e:	4815      	ldr	r0, [pc, #84]	; (8001364 <eeprom_write+0x94>)
 8001310:	f003 f850 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		break;
 8001314:	e022      	b.n	800135c <eeprom_write+0x8c>
	case 0x02:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, data);
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	461a      	mov	r2, r3
 800131a:	2102      	movs	r1, #2
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <eeprom_write+0x94>)
 800131e:	f003 f849 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		break;
 8001322:	e01b      	b.n	800135c <eeprom_write+0x8c>
	case 0x03:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, data);
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	461a      	mov	r2, r3
 8001328:	2103      	movs	r1, #3
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <eeprom_write+0x94>)
 800132c:	f003 f842 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		break;
 8001330:	e014      	b.n	800135c <eeprom_write+0x8c>
	case 0x04:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	461a      	mov	r2, r3
 8001336:	2104      	movs	r1, #4
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <eeprom_write+0x94>)
 800133a:	f003 f83b 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		break;
 800133e:	e00d      	b.n	800135c <eeprom_write+0x8c>
	case 0x05:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, data);
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	461a      	mov	r2, r3
 8001344:	2105      	movs	r1, #5
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <eeprom_write+0x94>)
 8001348:	f003 f834 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		break;
 800134c:	e006      	b.n	800135c <eeprom_write+0x8c>
	case 0x06:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, data);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	461a      	mov	r2, r3
 8001352:	2106      	movs	r1, #6
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <eeprom_write+0x94>)
 8001356:	f003 f82d 	bl	80043b4 <HAL_RTCEx_BKUPWrite>
		break;
 800135a:	bf00      	nop
	}

}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000150 	.word	0x20000150

08001368 <set_add_duration_of_function>:
//uint8_t eeprom_read(uint8_t addr){
//	uint8_t recv_data;
//	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 0xFF, &recv_data, 1, HAL_MAX_DELAY);
//}
void set_add_duration_of_function(uint8_t _selected_menu){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d07e      	beq.n	8001476 <set_add_duration_of_function+0x10e>
		switch (_selected_menu) {
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	3b01      	subs	r3, #1
 800137c:	2b04      	cmp	r3, #4
 800137e:	d87a      	bhi.n	8001476 <set_add_duration_of_function+0x10e>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <set_add_duration_of_function+0x20>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	0800139d 	.word	0x0800139d
 800138c:	080013c5 	.word	0x080013c5
 8001390:	080013ed 	.word	0x080013ed
 8001394:	08001415 	.word	0x08001415
 8001398:	0800143d 	.word	0x0800143d
		case 1:
			if(F1_DURATION < 99){
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <set_add_duration_of_function+0x118>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b62      	cmp	r3, #98	; 0x62
 80013a4:	d85e      	bhi.n	8001464 <set_add_duration_of_function+0xfc>
				F1_DURATION += 1;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <set_add_duration_of_function+0x118>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b33      	ldr	r3, [pc, #204]	; (8001480 <set_add_duration_of_function+0x118>)
 80013b2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <set_add_duration_of_function+0x118>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff ff87 	bl	80012d0 <eeprom_write>
			}
			break;
 80013c2:	e04f      	b.n	8001464 <set_add_duration_of_function+0xfc>
		case 2:
			if(F2_DURATION < 99){
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <set_add_duration_of_function+0x11c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b62      	cmp	r3, #98	; 0x62
 80013cc:	d84c      	bhi.n	8001468 <set_add_duration_of_function+0x100>
				F2_DURATION += 1;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <set_add_duration_of_function+0x11c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <set_add_duration_of_function+0x11c>)
 80013da:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <set_add_duration_of_function+0x11c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff ff73 	bl	80012d0 <eeprom_write>
			}
			break;
 80013ea:	e03d      	b.n	8001468 <set_add_duration_of_function+0x100>
		case 3:
			if(F3_DURATION < 99){
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <set_add_duration_of_function+0x120>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b62      	cmp	r3, #98	; 0x62
 80013f4:	d83a      	bhi.n	800146c <set_add_duration_of_function+0x104>
				F3_DURATION += 1;
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <set_add_duration_of_function+0x120>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <set_add_duration_of_function+0x120>)
 8001402:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <set_add_duration_of_function+0x120>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	2003      	movs	r0, #3
 800140e:	f7ff ff5f 	bl	80012d0 <eeprom_write>
			}
			break;
 8001412:	e02b      	b.n	800146c <set_add_duration_of_function+0x104>
		case 4:
			if(F4_DURATION < 99){
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <set_add_duration_of_function+0x124>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b62      	cmp	r3, #98	; 0x62
 800141c:	d828      	bhi.n	8001470 <set_add_duration_of_function+0x108>
				F4_DURATION += 1;
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <set_add_duration_of_function+0x124>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <set_add_duration_of_function+0x124>)
 800142a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <set_add_duration_of_function+0x124>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	2004      	movs	r0, #4
 8001436:	f7ff ff4b 	bl	80012d0 <eeprom_write>
			}
			break;
 800143a:	e019      	b.n	8001470 <set_add_duration_of_function+0x108>
		case 5:
			if(F5_DURATION < 99){
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <set_add_duration_of_function+0x128>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b62      	cmp	r3, #98	; 0x62
 8001444:	d816      	bhi.n	8001474 <set_add_duration_of_function+0x10c>
				F5_DURATION += 1;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <set_add_duration_of_function+0x128>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <set_add_duration_of_function+0x128>)
 8001452:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <set_add_duration_of_function+0x128>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	2005      	movs	r0, #5
 800145e:	f7ff ff37 	bl	80012d0 <eeprom_write>
			}
			break;
 8001462:	e007      	b.n	8001474 <set_add_duration_of_function+0x10c>
			break;
 8001464:	bf00      	nop
 8001466:	e006      	b.n	8001476 <set_add_duration_of_function+0x10e>
			break;
 8001468:	bf00      	nop
 800146a:	e004      	b.n	8001476 <set_add_duration_of_function+0x10e>
			break;
 800146c:	bf00      	nop
 800146e:	e002      	b.n	8001476 <set_add_duration_of_function+0x10e>
			break;
 8001470:	bf00      	nop
 8001472:	e000      	b.n	8001476 <set_add_duration_of_function+0x10e>
			break;
 8001474:	bf00      	nop
		}
	}
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000013 	.word	0x20000013
 8001484:	20000014 	.word	0x20000014
 8001488:	20000015 	.word	0x20000015
 800148c:	20000016 	.word	0x20000016
 8001490:	20000017 	.word	0x20000017

08001494 <set_substract_duration_of_function>:

void set_substract_duration_of_function(uint8_t _selected_menu){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d07e      	beq.n	80015a2 <set_substract_duration_of_function+0x10e>
		switch (_selected_menu) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d87a      	bhi.n	80015a2 <set_substract_duration_of_function+0x10e>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <set_substract_duration_of_function+0x20>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014c9 	.word	0x080014c9
 80014b8:	080014f1 	.word	0x080014f1
 80014bc:	08001519 	.word	0x08001519
 80014c0:	08001541 	.word	0x08001541
 80014c4:	08001569 	.word	0x08001569
		case 1:
			if(F1_DURATION >1){
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <set_substract_duration_of_function+0x118>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d95e      	bls.n	8001590 <set_substract_duration_of_function+0xfc>
				F1_DURATION -= 1;
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <set_substract_duration_of_function+0x118>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <set_substract_duration_of_function+0x118>)
 80014de:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <set_substract_duration_of_function+0x118>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fef1 	bl	80012d0 <eeprom_write>
			}
			break;
 80014ee:	e04f      	b.n	8001590 <set_substract_duration_of_function+0xfc>
		case 2:
			if(F2_DURATION >1){
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <set_substract_duration_of_function+0x11c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d94c      	bls.n	8001594 <set_substract_duration_of_function+0x100>
				F2_DURATION -= 1;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <set_substract_duration_of_function+0x11c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <set_substract_duration_of_function+0x11c>)
 8001506:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <set_substract_duration_of_function+0x11c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4619      	mov	r1, r3
 8001510:	2002      	movs	r0, #2
 8001512:	f7ff fedd 	bl	80012d0 <eeprom_write>
			}
			break;
 8001516:	e03d      	b.n	8001594 <set_substract_duration_of_function+0x100>
		case 3:
			if(F3_DURATION >1){
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <set_substract_duration_of_function+0x120>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d93a      	bls.n	8001598 <set_substract_duration_of_function+0x104>
				F3_DURATION -= 1;
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <set_substract_duration_of_function+0x120>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <set_substract_duration_of_function+0x120>)
 800152e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <set_substract_duration_of_function+0x120>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff fec9 	bl	80012d0 <eeprom_write>
			}
			break;
 800153e:	e02b      	b.n	8001598 <set_substract_duration_of_function+0x104>
		case 4:
			if(F4_DURATION >1){
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <set_substract_duration_of_function+0x124>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d928      	bls.n	800159c <set_substract_duration_of_function+0x108>
				F4_DURATION -= 1;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <set_substract_duration_of_function+0x124>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <set_substract_duration_of_function+0x124>)
 8001556:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <set_substract_duration_of_function+0x124>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	2004      	movs	r0, #4
 8001562:	f7ff feb5 	bl	80012d0 <eeprom_write>
			}
			break;
 8001566:	e019      	b.n	800159c <set_substract_duration_of_function+0x108>
		case 5:
			if(F5_DURATION >1){
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <set_substract_duration_of_function+0x128>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d916      	bls.n	80015a0 <set_substract_duration_of_function+0x10c>
				F5_DURATION -= 1;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <set_substract_duration_of_function+0x128>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <set_substract_duration_of_function+0x128>)
 800157e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <set_substract_duration_of_function+0x128>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	2005      	movs	r0, #5
 800158a:	f7ff fea1 	bl	80012d0 <eeprom_write>
			}
			break;
 800158e:	e007      	b.n	80015a0 <set_substract_duration_of_function+0x10c>
			break;
 8001590:	bf00      	nop
 8001592:	e006      	b.n	80015a2 <set_substract_duration_of_function+0x10e>
			break;
 8001594:	bf00      	nop
 8001596:	e004      	b.n	80015a2 <set_substract_duration_of_function+0x10e>
			break;
 8001598:	bf00      	nop
 800159a:	e002      	b.n	80015a2 <set_substract_duration_of_function+0x10e>
			break;
 800159c:	bf00      	nop
 800159e:	e000      	b.n	80015a2 <set_substract_duration_of_function+0x10e>
			break;
 80015a0:	bf00      	nop
		}
	}
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000013 	.word	0x20000013
 80015b0:	20000014 	.word	0x20000014
 80015b4:	20000015 	.word	0x20000015
 80015b8:	20000016 	.word	0x20000016
 80015bc:	20000017 	.word	0x20000017

080015c0 <add_coin_credit>:
void add_coin_credit(uint32_t pulse_width) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if (pulse_width <= (coin_acceptor_pulse_width + creditPulseOffset)
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <add_coin_credit+0xec>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <add_coin_credit+0xf0>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4293      	cmp	r3, r2
 80015dc:	d84b      	bhi.n	8001676 <add_coin_credit+0xb6>
			&& (pulse_width
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <add_coin_credit+0xec>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <add_coin_credit+0xf0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	461a      	mov	r2, r3
			&& (pulse_width
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d340      	bcc.n	8001676 <add_coin_credit+0xb6>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <add_coin_credit+0xf4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	492d      	ldr	r1, [pc, #180]	; (80016b8 <add_coin_credit+0xf8>)
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fad8 	bl	8005bb8 <siprintf>
				(int)coin_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fd9d 	bl	800014c <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f107 0108 	add.w	r1, r7, #8
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	4827      	ldr	r0, [pc, #156]	; (80016bc <add_coin_credit+0xfc>)
 8001620:	f004 f92d 	bl	800587e <HAL_UART_Transmit>
		credit += coin_credit_per_pulse;
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <add_coin_credit+0xf4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <add_coin_credit+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4413      	add	r3, r2
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <add_coin_credit+0x100>)
 8001634:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <add_coin_credit+0x100>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800163e:	4293      	cmp	r3, r2
 8001640:	d903      	bls.n	800164a <add_coin_credit+0x8a>
			credit = 999;
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <add_coin_credit+0x100>)
 8001644:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001648:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <add_coin_credit+0x100>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f8b8 	bl	80007c4 <segment_display_int>

		if (credit >= minimum_credit_to_start) {
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <add_coin_credit+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <add_coin_credit+0x104>)
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	4293      	cmp	r3, r2
 800165e:	d320      	bcc.n	80016a2 <add_coin_credit+0xe2>
			system_function_start = true;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <add_coin_credit+0x108>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	2219      	movs	r2, #25
 800166c:	4917      	ldr	r1, [pc, #92]	; (80016cc <add_coin_credit+0x10c>)
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <add_coin_credit+0xfc>)
 8001670:	f004 f905 	bl	800587e <HAL_UART_Transmit>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 8001674:	e015      	b.n	80016a2 <add_coin_credit+0xe2>
					HAL_MAX_DELAY);
		}
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800167c:	4914      	ldr	r1, [pc, #80]	; (80016d0 <add_coin_credit+0x110>)
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fa9a 	bl	8005bb8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 8001684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fd5f 	bl	800014c <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <add_coin_credit+0xfc>)
 800169c:	f004 f8ef 	bl	800587e <HAL_UART_Transmit>
	}
}
 80016a0:	e000      	b.n	80016a4 <add_coin_credit+0xe4>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 80016a2:	bf00      	nop
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000000f 	.word	0x2000000f
 80016b0:	20000010 	.word	0x20000010
 80016b4:	20000012 	.word	0x20000012
 80016b8:	0800665c 	.word	0x0800665c
 80016bc:	2000031c 	.word	0x2000031c
 80016c0:	200000e4 	.word	0x200000e4
 80016c4:	20000004 	.word	0x20000004
 80016c8:	200000f0 	.word	0x200000f0
 80016cc:	08006674 	.word	0x08006674
 80016d0:	08006690 	.word	0x08006690

080016d4 <add_bank_note_credit>:
void add_bank_note_credit(uint32_t pulse_width) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b09e      	sub	sp, #120	; 0x78
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	if (pulse_width <= bank_acceptor_pulse_width + creditPulseOffset
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <add_bank_note_credit+0x118>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <add_bank_note_credit+0x11c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d862      	bhi.n	80017b8 <add_bank_note_credit+0xe4>
			&& pulse_width
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <add_bank_note_credit+0x118>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <add_bank_note_credit+0x11c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	461a      	mov	r2, r3
			&& pulse_width
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4293      	cmp	r3, r2
 8001706:	d357      	bcc.n	80017b8 <add_bank_note_credit+0xe4>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 8001708:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <add_bank_note_credit+0x120>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001714:	4938      	ldr	r1, [pc, #224]	; (80017f8 <add_bank_note_credit+0x124>)
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fa4e 	bl	8005bb8 <siprintf>
				bank_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800171c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd13 	bl	800014c <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	4832      	ldr	r0, [pc, #200]	; (80017fc <add_bank_note_credit+0x128>)
 8001734:	f004 f8a3 	bl	800587e <HAL_UART_Transmit>
		credit += bank_credit_per_pulse;
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <add_bank_note_credit+0x120>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <add_bank_note_credit+0x12c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4413      	add	r3, r2
 8001746:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <add_bank_note_credit+0x12c>)
 8001748:	6013      	str	r3, [r2, #0]
		//		eeprom_write(0x06,credit);
		if(credit >= 999){
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <add_bank_note_credit+0x12c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001752:	4293      	cmp	r3, r2
 8001754:	d903      	bls.n	800175e <add_bank_note_credit+0x8a>
			credit = 999;
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <add_bank_note_credit+0x12c>)
 8001758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175c:	601a      	str	r2, [r3, #0]
		}
		segment_display_int(credit);
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <add_bank_note_credit+0x12c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f82e 	bl	80007c4 <segment_display_int>
		if (credit >= minimum_credit_to_start) {
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <add_bank_note_credit+0x12c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a25      	ldr	r2, [pc, #148]	; (8001804 <add_bank_note_credit+0x130>)
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	4293      	cmp	r3, r2
 8001772:	d309      	bcc.n	8001788 <add_bank_note_credit+0xb4>
			system_function_start = true;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <add_bank_note_credit+0x134>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2219      	movs	r2, #25
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <add_bank_note_credit+0x138>)
 8001782:	481e      	ldr	r0, [pc, #120]	; (80017fc <add_bank_note_credit+0x128>)
 8001784:	f004 f87b 	bl	800587e <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		char tmp_msg2[35];
		sprintf(tmp_msg2, "current credit : %d \r\n", (int)credit);
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <add_bank_note_credit+0x12c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	491f      	ldr	r1, [pc, #124]	; (8001810 <add_bank_note_credit+0x13c>)
 8001794:	4618      	mov	r0, r3
 8001796:	f004 fa0f 	bl	8005bb8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg2, strlen(tmp_msg2),
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fcd4 	bl	800014c <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 010c 	add.w	r1, r7, #12
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <add_bank_note_credit+0x128>)
 80017b2:	f004 f864 	bl	800587e <HAL_UART_Transmit>
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 80017b6:	e014      	b.n	80017e2 <add_bank_note_credit+0x10e>
				HAL_MAX_DELAY);
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017be:	4915      	ldr	r1, [pc, #84]	; (8001814 <add_bank_note_credit+0x140>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 f9f9 	bl	8005bb8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 80017c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fcbe 	bl	800014c <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	4807      	ldr	r0, [pc, #28]	; (80017fc <add_bank_note_credit+0x128>)
 80017de:	f004 f84e 	bl	800587e <HAL_UART_Transmit>
	}
}
 80017e2:	bf00      	nop
 80017e4:	3778      	adds	r7, #120	; 0x78
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000000e 	.word	0x2000000e
 80017f0:	20000010 	.word	0x20000010
 80017f4:	20000011 	.word	0x20000011
 80017f8:	0800665c 	.word	0x0800665c
 80017fc:	2000031c 	.word	0x2000031c
 8001800:	200000e4 	.word	0x200000e4
 8001804:	20000004 	.word	0x20000004
 8001808:	200000f0 	.word	0x200000f0
 800180c:	08006674 	.word	0x08006674
 8001810:	080066b0 	.word	0x080066b0
 8001814:	08006690 	.word	0x08006690

08001818 <logic_runner>:

void logic_runner() {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	iot_send_current_credit(credit);
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <logic_runner+0x130>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f908 	bl	8000a38 <iot_send_current_credit>
	eeprom_write(0x06,credit);
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <logic_runner+0x130>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	2006      	movs	r0, #6
 8001832:	f7ff fd4d 	bl	80012d0 <eeprom_write>
	if (selected_button != 0) {
 8001836:	4b45      	ldr	r3, [pc, #276]	; (800194c <logic_runner+0x134>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <logic_runner+0x32>
		logic_runner_round_counter += 1;
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <logic_runner+0x138>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a42      	ldr	r2, [pc, #264]	; (8001950 <logic_runner+0x138>)
 8001848:	6013      	str	r3, [r2, #0]
	}
	switch(selected_button){
 800184a:	4b40      	ldr	r3, [pc, #256]	; (800194c <logic_runner+0x134>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3b03      	subs	r3, #3
 8001852:	2b04      	cmp	r3, #4
 8001854:	d82f      	bhi.n	80018b6 <logic_runner+0x9e>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <logic_runner+0x44>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	08001871 	.word	0x08001871
 8001860:	0800187f 	.word	0x0800187f
 8001864:	0800188d 	.word	0x0800188d
 8001868:	0800189b 	.word	0x0800189b
 800186c:	080018a9 	.word	0x080018a9
	case 3:
		duration_per_1credit = F1_DURATION;
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <logic_runner+0x13c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	4b37      	ldr	r3, [pc, #220]	; (8001958 <logic_runner+0x140>)
 800187a:	601a      	str	r2, [r3, #0]
		break;
 800187c:	e01f      	b.n	80018be <logic_runner+0xa6>
	case 4:
		duration_per_1credit = F2_DURATION;
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <logic_runner+0x144>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <logic_runner+0x140>)
 8001888:	601a      	str	r2, [r3, #0]
		break;
 800188a:	e018      	b.n	80018be <logic_runner+0xa6>
	case 5:
		duration_per_1credit = F3_DURATION;
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <logic_runner+0x148>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <logic_runner+0x140>)
 8001896:	601a      	str	r2, [r3, #0]
		break;
 8001898:	e011      	b.n	80018be <logic_runner+0xa6>
	case 6:
		duration_per_1credit = F4_DURATION;
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <logic_runner+0x14c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <logic_runner+0x140>)
 80018a4:	601a      	str	r2, [r3, #0]
		break;
 80018a6:	e00a      	b.n	80018be <logic_runner+0xa6>
	case 7:
		duration_per_1credit = F5_DURATION;
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <logic_runner+0x150>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <logic_runner+0x140>)
 80018b2:	601a      	str	r2, [r3, #0]
		break;
 80018b4:	e003      	b.n	80018be <logic_runner+0xa6>
	default:
		duration_per_1credit = 10;
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <logic_runner+0x140>)
 80018b8:	220a      	movs	r2, #10
 80018ba:	601a      	str	r2, [r3, #0]
		break;
 80018bc:	bf00      	nop
	}

	if (logic_runner_round_counter >= duration_per_1credit && credit > 0) {
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <logic_runner+0x138>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <logic_runner+0x140>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	db1f      	blt.n	800190a <logic_runner+0xf2>
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <logic_runner+0x130>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01b      	beq.n	800190a <logic_runner+0xf2>
		logic_runner_round_counter = 0;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <logic_runner+0x138>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)"took 1 credit\r\n", 15, HAL_MAX_DELAY);
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	220f      	movs	r2, #15
 80018de:	4923      	ldr	r1, [pc, #140]	; (800196c <logic_runner+0x154>)
 80018e0:	4823      	ldr	r0, [pc, #140]	; (8001970 <logic_runner+0x158>)
 80018e2:	f003 ffcc 	bl	800587e <HAL_UART_Transmit>
		credit -= 1;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <logic_runner+0x130>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a16      	ldr	r2, [pc, #88]	; (8001948 <logic_runner+0x130>)
 80018ee:	6013      	str	r3, [r2, #0]
		if(credit < 255){
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <logic_runner+0x130>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2bfe      	cmp	r3, #254	; 0xfe
 80018f6:	d806      	bhi.n	8001906 <logic_runner+0xee>
			//			eeprom_write(0x06,credit);
			HAL_UART_Transmit(&huart1, (uint8_t *)"writing credit value\r\n", 22,
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	2216      	movs	r2, #22
 80018fe:	491d      	ldr	r1, [pc, #116]	; (8001974 <logic_runner+0x15c>)
 8001900:	481b      	ldr	r0, [pc, #108]	; (8001970 <logic_runner+0x158>)
 8001902:	f003 ffbc 	bl	800587e <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		serial_display_credit();
 8001906:	f000 f83b 	bl	8001980 <serial_display_credit>
	}
	if (credit <= 0) {
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <logic_runner+0x130>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d112      	bne.n	8001938 <logic_runner+0x120>
		//		segment_display_standby();
		reset_all_output();
 8001912:	f7fe fee9 	bl	80006e8 <reset_all_output>
		HAL_UART_Transmit(&huart1, (uint8_t *)"time up !, disable all functions\r\n", 34,
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	2222      	movs	r2, #34	; 0x22
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <logic_runner+0x160>)
 800191e:	4814      	ldr	r0, [pc, #80]	; (8001970 <logic_runner+0x158>)
 8001920:	f003 ffad 	bl	800587e <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		credit = 0;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <logic_runner+0x130>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
		//		eeprom_write(0x06,0);
		system_function_start = false;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <logic_runner+0x164>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		selected_button = 0;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <logic_runner+0x134>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
	}else{
		segment_display_int(credit);
	}
}
 8001936:	e004      	b.n	8001942 <logic_runner+0x12a>
		segment_display_int(credit);
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <logic_runner+0x130>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe ff41 	bl	80007c4 <segment_display_int>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200000e4 	.word	0x200000e4
 800194c:	200000e8 	.word	0x200000e8
 8001950:	200000ec 	.word	0x200000ec
 8001954:	20000013 	.word	0x20000013
 8001958:	20000008 	.word	0x20000008
 800195c:	20000014 	.word	0x20000014
 8001960:	20000015 	.word	0x20000015
 8001964:	20000016 	.word	0x20000016
 8001968:	20000017 	.word	0x20000017
 800196c:	080066c8 	.word	0x080066c8
 8001970:	2000031c 	.word	0x2000031c
 8001974:	080066d8 	.word	0x080066d8
 8001978:	080066f0 	.word	0x080066f0
 800197c:	200000f0 	.word	0x200000f0

08001980 <serial_display_credit>:

void serial_display_credit() {
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
	char buffer[35];
	sprintf(buffer, "current credit : %d \r\n", (int)credit);
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <serial_display_credit+0x38>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	490b      	ldr	r1, [pc, #44]	; (80019bc <serial_display_credit+0x3c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f004 f911 	bl	8005bb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fbd7 	bl	800014c <strlen>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	1d39      	adds	r1, r7, #4
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <serial_display_credit+0x40>)
 80019aa:	f003 ff68 	bl	800587e <HAL_UART_Transmit>
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200000e4 	.word	0x200000e4
 80019bc:	080066b0 	.word	0x080066b0
 80019c0:	2000031c 	.word	0x2000031c

080019c4 <stop_and_clear_tim1>:
void stop_and_clear_tim1() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <stop_and_clear_tim1+0x20>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop_IT(&htim1);
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <stop_and_clear_tim1+0x20>)
 80019d2:	f003 f82d 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 80019d6:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <stop_and_clear_tim1+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f06f 0201 	mvn.w	r2, #1
 80019de:	611a      	str	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000024c 	.word	0x2000024c

080019e8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	//	HAL_UART_Transmit(&huart2, message3, strlen(message3), HAL_MAX_DELAY);
	//	stop_and_clear_tim1();
	max7219_Turn_On();
 80019f0:	f000 fa10 	bl	8001e14 <max7219_Turn_On>
	HAL_TIM_Base_Stop_IT(&htim2);
 80019f4:	4884      	ldr	r0, [pc, #528]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x220>)
 80019f6:	f003 f81b 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80019fa:	4b83      	ldr	r3, [pc, #524]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x220>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001a02:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f06f 0201 	mvn.w	r2, #1
 8001a0a:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Stop_IT(&htim1);
 8001a0c:	487f      	ldr	r0, [pc, #508]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a0e:	f003 f80f 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f06f 0201 	mvn.w	r2, #1
 8001a22:	611a      	str	r2, [r3, #16]


	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a79      	ldr	r2, [pc, #484]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f040 8095 	bne.w	8001b5a <HAL_TIM_IC_CaptureCallback+0x172>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f1b      	ldrb	r3, [r3, #28]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	f040 8090 	bne.w	8001b5a <HAL_TIM_IC_CaptureCallback+0x172>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH1 INT\r\n", 9, HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	2209      	movs	r2, #9
 8001a40:	4974      	ldr	r1, [pc, #464]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001a42:	4875      	ldr	r0, [pc, #468]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001a44:	f003 ff1b 	bl	800587e <HAL_UART_Transmit>
		if (Is_First_Captured == 0) // if the first value is not captured
 8001a48:	4b74      	ldr	r3, [pc, #464]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x234>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11a      	bne.n	8001a88 <HAL_TIM_IC_CaptureCallback+0xa0>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f003 fbcb 	bl	80051f0 <HAL_TIM_ReadCapturedValue>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001a5e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001a60:	4b6e      	ldr	r3, [pc, #440]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x234>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
			 (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\
				 ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\
				 ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) :\
				 ((__HANDLE__)->Instance->CCER &= (uint16_t)~TIM_CCER_CC4P))*/

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a1a      	ldr	r2, [r3, #32]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 020a 	bic.w	r2, r2, #10
 8001a74:	621a      	str	r2, [r3, #32]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0202 	orr.w	r2, r2, #2
 8001a84:	621a      	str	r2, [r3, #32]
 8001a86:	e068      	b.n	8001b5a <HAL_TIM_IC_CaptureCallback+0x172>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 8001a88:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x234>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d163      	bne.n	8001b5a <HAL_TIM_IC_CaptureCallback+0x172>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f003 fbab 	bl	80051f0 <HAL_TIM_ReadCapturedValue>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001a9e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
			//			burst_bank_credit += bank_credit_per_pulse;
			//			burst_counter = 0;
			//			start_debounce_counter = true;
			if (IC_Val2 > IC_Val1) {
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d907      	bls.n	8001ac4 <HAL_TIM_IC_CaptureCallback+0xdc>
				Difference = IC_Val2 - IC_Val1;
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_TIM_IC_CaptureCallback+0xfc>
			}

			else if (IC_Val1 > IC_Val2) {
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d909      	bls.n	8001ae4 <HAL_TIM_IC_CaptureCallback+0xfc>
				Difference = ((uint16_t) 0xffff - IC_Val1) + IC_Val2;
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ade:	33ff      	adds	r3, #255	; 0xff
 8001ae0:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001ae2:	6013      	str	r3, [r2, #0]
			}
			Is_First_Captured = 0; // set it back to false
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x234>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 020a 	bic.w	r2, r2, #10
 8001af8:	621a      	str	r2, [r3, #32]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a12      	ldr	r2, [r2, #32]
 8001b04:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);

			add_bank_note_credit(Difference/1000);
 8001b06:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_TIM_IC_CaptureCallback+0x244>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fdde 	bl	80016d4 <add_bank_note_credit>
			last_credit_insert_bank += bank_credit_per_pulse;
 8001b18:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001b2a:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH1:captured val : %d \r\n",(int)Difference);
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4940      	ldr	r1, [pc, #256]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 f83d 	bl	8005bb8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fb02 	bl	800014c <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f107 010c 	add.w	r1, r7, #12
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	4830      	ldr	r0, [pc, #192]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b56:	f003 fe92 	bl	800587e <HAL_UART_Transmit>
			//			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
			//			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
	if (htim->Instance == TIM3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	f040 80c0 	bne.w	8001ce6 <HAL_TIM_IC_CaptureCallback+0x2fe>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if the interrupt source is channel1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7f1b      	ldrb	r3, [r3, #28]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 80bb 	bne.w	8001ce6 <HAL_TIM_IC_CaptureCallback+0x2fe>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH2 INT\r\n", 9, HAL_MAX_DELAY);
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	2209      	movs	r2, #9
 8001b76:	4931      	ldr	r1, [pc, #196]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001b78:	4827      	ldr	r0, [pc, #156]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b7a:	f003 fe80 	bl	800587e <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001b7e:	4822      	ldr	r0, [pc, #136]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001b80:	f002 ff56 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim1);
 8001b84:	4821      	ldr	r0, [pc, #132]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x224>)
 8001b86:	f002 ff53 	bl	8004a30 <HAL_TIM_Base_Stop_IT>
		if (coin_Is_First_Captured == 0) // if the first value is not captured
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11a      	bne.n	8001bca <HAL_TIM_IC_CaptureCallback+0x1e2>
		{
			coin_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001b94:	2104      	movs	r1, #4
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f003 fb2a 	bl	80051f0 <HAL_TIM_ReadCapturedValue>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001ba0:	601a      	str	r2, [r3, #0]
			coin_Is_First_Captured = 1;  // set the first captured as true
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bb6:	621a      	str	r2, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	621a      	str	r2, [r3, #32]
 8001bc8:	e08d      	b.n	8001ce6 <HAL_TIM_IC_CaptureCallback+0x2fe>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (coin_Is_First_Captured == 1) // if the first is already captured
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 8088 	bne.w	8001ce6 <HAL_TIM_IC_CaptureCallback+0x2fe>
		{
			coin_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f003 fb09 	bl	80051f0 <HAL_TIM_ReadCapturedValue>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001be2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
			if (coin_IC_Val2 > coin_IC_Val1) {
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d92b      	bls.n	8001c50 <HAL_TIM_IC_CaptureCallback+0x268>
				coin_Difference = coin_IC_Val2 - coin_IC_Val1;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_TIM_IC_CaptureCallback+0x264>)
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e033      	b.n	8001c70 <HAL_TIM_IC_CaptureCallback+0x288>
 8001c08:	20000294 	.word	0x20000294
 8001c0c:	2000024c 	.word	0x2000024c
 8001c10:	40000400 	.word	0x40000400
 8001c14:	08006714 	.word	0x08006714
 8001c18:	2000031c 	.word	0x2000031c
 8001c1c:	200000d0 	.word	0x200000d0
 8001c20:	200000c4 	.word	0x200000c4
 8001c24:	200000c8 	.word	0x200000c8
 8001c28:	200000cc 	.word	0x200000cc
 8001c2c:	10624dd3 	.word	0x10624dd3
 8001c30:	20000011 	.word	0x20000011
 8001c34:	200000fa 	.word	0x200000fa
 8001c38:	08006720 	.word	0x08006720
 8001c3c:	0800673c 	.word	0x0800673c
 8001c40:	200000e0 	.word	0x200000e0
 8001c44:	200000d4 	.word	0x200000d4
 8001c48:	200000d8 	.word	0x200000d8
 8001c4c:	200000dc 	.word	0x200000dc
			}

			else if (coin_IC_Val1 > coin_IC_Val2) {
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d909      	bls.n	8001c70 <HAL_TIM_IC_CaptureCallback+0x288>
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
																																																																																																						+ coin_IC_Val2;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c6a:	33ff      	adds	r3, #255	; 0xff
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1)
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_TIM_IC_CaptureCallback+0x314>)
 8001c6e:	6013      	str	r3, [r2, #0]
			}
			coin_Is_First_Captured = 0; // set it back to false
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c84:	621a      	str	r2, [r3, #32]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a12      	ldr	r2, [r2, #32]
 8001c90:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			add_coin_credit(coin_Difference/1000);
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_TIM_IC_CaptureCallback+0x314>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc8e 	bl	80015c0 <add_coin_credit>
			last_credit_insert += coin_credit_per_pulse;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001cb6:	801a      	strh	r2, [r3, #0]
			char tmpp[35];
			sprintf(tmpp,"CH2:captured val : %d \r\n",(int)coin_Difference);
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_TIM_IC_CaptureCallback+0x314>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4913      	ldr	r1, [pc, #76]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 ff77 	bl	8005bb8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fa3c 	bl	800014c <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 010c 	add.w	r1, r7, #12
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001ce2:	f003 fdcc 	bl	800587e <HAL_UART_Transmit>
			// set polarity to rising edge
			//			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
			//			__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001ce8:	f002 fe50 	bl	800498c <HAL_TIM_Base_Start_IT>
}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200000d4 	.word	0x200000d4
 8001cf8:	200000d8 	.word	0x200000d8
 8001cfc:	200000dc 	.word	0x200000dc
 8001d00:	200000e0 	.word	0x200000e0
 8001d04:	10624dd3 	.word	0x10624dd3
 8001d08:	20000012 	.word	0x20000012
 8001d0c:	200000f8 	.word	0x200000f8
 8001d10:	08006748 	.word	0x08006748
 8001d14:	2000031c 	.word	0x2000031c
 8001d18:	20000294 	.word	0x20000294

08001d1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_On();
 8001d32:	f000 f86f 	bl	8001e14 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8001d36:	2107      	movs	r1, #7
 8001d38:	200b      	movs	r0, #11
 8001d3a:	f000 f841 	bl	8001dc0 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f806 	bl	8001d52 <max7219_SetIntensivity>
	max7219_Clean();
 8001d46:	f000 f817 	bl	8001d78 <max7219_Clean>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	d805      	bhi.n	8001d6e <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4619      	mov	r1, r3
 8001d66:	200a      	movs	r0, #10
 8001d68:	f000 f82a 	bl	8001dc0 <max7219_SendData>
 8001d6c:	e000      	b.n	8001d70 <max7219_SetIntensivity+0x1e>
		return;
 8001d6e:	bf00      	nop
}
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <max7219_Clean>:

void max7219_Clean()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <max7219_Clean+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	d101      	bne.n	8001d8e <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	e00b      	b.n	8001dac <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f80d 	bl	8001dc0 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b07      	cmp	r3, #7
 8001db0:	ddf0      	ble.n	8001d94 <max7219_Clean+0x1c>
	}
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000100 	.word	0x20000100

08001dc0 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <max7219_SendData+0x4c>)
 8001dd8:	f001 f993 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001ddc:	1df9      	adds	r1, r7, #7
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	2201      	movs	r2, #1
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <max7219_SendData+0x50>)
 8001de6:	f002 fb9f 	bl	8004528 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001dea:	1db9      	adds	r1, r7, #6
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	2201      	movs	r2, #1
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <max7219_SendData+0x50>)
 8001df4:	f002 fb98 	bl	8004528 <HAL_SPI_Transmit>
	CS_RESET();
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <max7219_SendData+0x4c>)
 8001e00:	f001 f97f 	bl	8003102 <HAL_GPIO_WritePin>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	20000164 	.word	0x20000164

08001e14 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	200c      	movs	r0, #12
 8001e1c:	f7ff ffd0 	bl	8001dc0 <max7219_SendData>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <max7219_Turn_Off>:

void max7219_Turn_Off(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x00);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	200c      	movs	r0, #12
 8001e2c:	f7ff ffc8 	bl	8001dc0 <max7219_SendData>
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <max7219_Decode_On>:

void max7219_Decode_On(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <max7219_Decode_On+0x1c>)
 8001e3a:	22ff      	movs	r2, #255	; 0xff
 8001e3c:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <max7219_Decode_On+0x1c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	2009      	movs	r0, #9
 8001e46:	f7ff ffbb 	bl	8001dc0 <max7219_SendData>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000100 	.word	0x20000100

08001e54 <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	4613      	mov	r3, r2
 8001e64:	717b      	strb	r3, [r7, #5]
	if(position > NUMBER_OF_DIGITS)
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d844      	bhi.n	8001ef6 <max7219_PrintDigit+0xa2>
	{
		return;
	}

	if(point)
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <max7219_PrintDigit+0x60>
	{
		if(decodeMode == 0x00)
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <max7219_PrintDigit+0xac>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10e      	bne.n	8001e98 <max7219_PrintDigit+0x44>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f8b9 	bl	8001ff4 <getSymbol>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff95 	bl	8001dc0 <max7219_SendData>
 8001e96:	e02f      	b.n	8001ef8 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <max7219_PrintDigit+0xac>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	d12b      	bne.n	8001ef8 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff87 	bl	8001dc0 <max7219_SendData>
 8001eb2:	e021      	b.n	8001ef8 <max7219_PrintDigit+0xa4>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <max7219_PrintDigit+0xac>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10e      	bne.n	8001eda <max7219_PrintDigit+0x86>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f898 	bl	8001ff4 <getSymbol>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff74 	bl	8001dc0 <max7219_SendData>
 8001ed8:	e00e      	b.n	8001ef8 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <max7219_PrintDigit+0xac>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d10a      	bne.n	8001ef8 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff66 	bl	8001dc0 <max7219_SendData>
 8001ef4:	e000      	b.n	8001ef8 <max7219_PrintDigit+0xa4>
		return;
 8001ef6:	bf00      	nop
		}
	}
}
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000100 	.word	0x20000100

08001f04 <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8001f10:	21ff      	movs	r1, #255	; 0xff
 8001f12:	2009      	movs	r0, #9
 8001f14:	f7ff ff54 	bl	8001dc0 <max7219_SendData>

	int32_t i;

	if (value < 0)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da0d      	bge.n	8001f3a <max7219_PrintItos+0x36>
	{
		if(position > 0)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <max7219_PrintItos+0x30>
		{
			max7219_SendData(position, MINUS);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	210a      	movs	r1, #10
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff49 	bl	8001dc0 <max7219_SendData>
			position--;
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	425b      	negs	r3, r3
 8001f38:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 8001f3e:	e005      	b.n	8001f4c <max7219_PrintItos+0x48>
	{
		i *= 10;
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	dcf3      	bgt.n	8001f40 <max7219_PrintItos+0x3c>
	}

	if(position > 0)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <max7219_PrintItos+0x74>
	{
		max7219_SendData(position, value/i);
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff27 	bl	8001dc0 <max7219_SendData>
		position--;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <max7219_PrintItos+0xe8>)
 8001f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f80:	1092      	asrs	r2, r2, #2
 8001f82:	17db      	asrs	r3, r3, #31
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 8001f88:	e022      	b.n	8001fd0 <max7219_PrintItos+0xcc>
	{
		if(position > 0)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d017      	beq.n	8001fc0 <max7219_PrintItos+0xbc>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fa2:	fb02 f201 	mul.w	r2, r2, r1
 8001fa6:	1a9a      	subs	r2, r3, r2
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff03 	bl	8001dc0 <max7219_SendData>
			position--;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <max7219_PrintItos+0xe8>)
 8001fc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc8:	1092      	asrs	r2, r2, #2
 8001fca:	17db      	asrs	r3, r3, #31
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	dcd9      	bgt.n	8001f8a <max7219_PrintItos+0x86>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <max7219_PrintItos+0xec>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	2009      	movs	r0, #9
 8001fde:	f7ff feef 	bl	8001dc0 <max7219_SendData>

	return position;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	66666667 	.word	0x66666667
 8001ff0:	20000100 	.word	0x20000100

08001ff4 <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <getSymbol+0x1c>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	b29b      	uxth	r3, r3
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000018 	.word	0x20000018

08002014 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2100      	movs	r1, #0
 800201e:	460a      	mov	r2, r1
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	460a      	mov	r2, r1
 8002024:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <MX_RTC_Init+0x8c>)
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <MX_RTC_Init+0x90>)
 800202e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_RTC_Init+0x8c>)
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_RTC_Init+0x8c>)
 800203a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002040:	4817      	ldr	r0, [pc, #92]	; (80020a0 <MX_RTC_Init+0x8c>)
 8002042:	f001 fe29 	bl	8003c98 <HAL_RTC_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800204c:	f7ff fe66 	bl	8001d1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002050:	2300      	movs	r3, #0
 8002052:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002054:	2300      	movs	r3, #0
 8002056:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002058:	2300      	movs	r3, #0
 800205a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	480f      	ldr	r0, [pc, #60]	; (80020a0 <MX_RTC_Init+0x8c>)
 8002064:	f001 feae 	bl	8003dc4 <HAL_RTC_SetTime>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800206e:	f7ff fe55 	bl	8001d1c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002072:	2301      	movs	r3, #1
 8002074:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002076:	2301      	movs	r3, #1
 8002078:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800207a:	2301      	movs	r3, #1
 800207c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800207e:	2300      	movs	r3, #0
 8002080:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002082:	463b      	mov	r3, r7
 8002084:	2201      	movs	r2, #1
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_RTC_Init+0x8c>)
 800208a:	f001 ff33 	bl	8003ef4 <HAL_RTC_SetDate>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002094:	f7ff fe42 	bl	8001d1c <Error_Handler>
  }

}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000150 	.word	0x20000150
 80020a4:	40002800 	.word	0x40002800

080020a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_RTC_MspInit+0x3c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d110      	bne.n	80020dc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80020ba:	f001 f853 	bl	8003164 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RTC_MspInit+0x40>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_RTC_MspInit+0x40>)
 80020c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_RTC_MspInit+0x40>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RTC_MspInit+0x44>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40002800 	.word	0x40002800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	4242043c 	.word	0x4242043c

080020f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_SPI2_Init+0x64>)
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <MX_SPI2_Init+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002100:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_SPI2_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_SPI2_Init+0x64>)
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002120:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_SPI2_Init+0x64>)
 8002124:	2208      	movs	r2, #8
 8002126:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_SPI2_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_SPI2_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_SPI2_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_SPI2_Init+0x64>)
 800213c:	220a      	movs	r2, #10
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_SPI2_Init+0x64>)
 8002142:	f002 f96d 	bl	8004420 <HAL_SPI_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800214c:	f7ff fde6 	bl	8001d1c <Error_Handler>
  }

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000164 	.word	0x20000164
 8002158:	40003800 	.word	0x40003800

0800215c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <HAL_SPI_MspInit+0x74>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d124      	bne.n	80021c6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_SPI_MspInit+0x78>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_SPI_MspInit+0x78>)
 8002182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_SPI_MspInit+0x78>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_SPI_MspInit+0x78>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_SPI_MspInit+0x78>)
 800219a:	f043 0308 	orr.w	r3, r3, #8
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_SPI_MspInit+0x78>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80021ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80021b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_SPI_MspInit+0x7c>)
 80021c2:	f000 fe2d 	bl	8002e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021c6:	bf00      	nop
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40003800 	.word	0x40003800
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010c00 	.word	0x40010c00

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_MspInit+0xa4>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_MspInit+0xa4>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_MspInit+0xa4>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_MspInit+0xa4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_MspInit+0xa4>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_MspInit+0xa4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2101      	movs	r1, #1
 8002216:	f06f 000b 	mvn.w	r0, #11
 800221a:	f000 fdae 	bl	8002d7a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2101      	movs	r1, #1
 8002222:	f06f 000a 	mvn.w	r0, #10
 8002226:	f000 fda8 	bl	8002d7a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2101      	movs	r1, #1
 800222e:	f06f 0009 	mvn.w	r0, #9
 8002232:	f000 fda2 	bl	8002d7a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2101      	movs	r1, #1
 800223a:	f06f 0004 	mvn.w	r0, #4
 800223e:	f000 fd9c 	bl	8002d7a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2101      	movs	r1, #1
 8002246:	f06f 0003 	mvn.w	r0, #3
 800224a:	f000 fd96 	bl	8002d7a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2101      	movs	r1, #1
 8002252:	f06f 0001 	mvn.w	r0, #1
 8002256:	f000 fd90 	bl	8002d7a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_MspInit+0xa8>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_MspInit+0xa8>)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <HardFault_Handler+0x4>

0800229a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <MemManage_Handler+0x4>

080022a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <BusFault_Handler+0x4>

080022a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <UsageFault_Handler+0x4>

080022ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d4:	f000 fbe4 	bl	8002aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80022e0:	2004      	movs	r0, #4
 80022e2:	f000 ff27 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}

080022ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80022ee:	2008      	movs	r0, #8
 80022f0:	f000 ff20 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022fc:	2010      	movs	r0, #16
 80022fe:	f000 ff19 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}

08002306 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800230a:	2020      	movs	r0, #32
 800230c:	f000 ff12 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002310:	2040      	movs	r0, #64	; 0x40
 8002312:	f000 ff0f 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002316:	2080      	movs	r0, #128	; 0x80
 8002318:	f000 ff0c 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM1_UP_IRQHandler+0x10>)
 8002326:	f002 fd0f 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000024c 	.word	0x2000024c

08002334 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <TIM2_IRQHandler+0x10>)
 800233a:	f002 fd05 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000294 	.word	0x20000294

08002348 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <TIM3_IRQHandler+0x10>)
 800234e:	f002 fcfb 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000204 	.word	0x20000204

0800235c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <TIM4_IRQHandler+0x10>)
 8002362:	f002 fcf1 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200001bc 	.word	0x200001bc

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f003 fbd8 	bl	8005b54 <__errno>
 80023a4:	4602      	mov	r2, r0
 80023a6:	230c      	movs	r3, #12
 80023a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20005000 	.word	0x20005000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	20000104 	.word	0x20000104
 80023d8:	20000368 	.word	0x20000368

080023dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	463b      	mov	r3, r7
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_TIM1_Init+0x9c>)
 8002406:	4a20      	ldr	r2, [pc, #128]	; (8002488 <MX_TIM1_Init+0xa0>)
 8002408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 524;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MX_TIM1_Init+0x9c>)
 800240c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8002410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_TIM1_Init+0x9c>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_TIM1_Init+0x9c>)
 800241a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800241e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_TIM1_Init+0x9c>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_TIM1_Init+0x9c>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_TIM1_Init+0x9c>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <MX_TIM1_Init+0x9c>)
 8002434:	f002 fa5a 	bl	80048ec <HAL_TIM_Base_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800243e:	f7ff fc6d 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002448:	f107 0308 	add.w	r3, r7, #8
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <MX_TIM1_Init+0x9c>)
 8002450:	f002 fe16 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800245a:	f7ff fc5f 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002466:	463b      	mov	r3, r7
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_TIM1_Init+0x9c>)
 800246c:	f003 f94a 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002476:	f7ff fc51 	bl	8001d1c <Error_Handler>
  }

}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000024c 	.word	0x2000024c
 8002488:	40012c00 	.word	0x40012c00

0800248c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <MX_TIM2_Init+0x94>)
 80024aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 74;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MX_TIM2_Init+0x94>)
 80024b2:	224a      	movs	r2, #74	; 0x4a
 80024b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_TIM2_Init+0x94>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <MX_TIM2_Init+0x94>)
 80024be:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80024c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_TIM2_Init+0x94>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <MX_TIM2_Init+0x94>)
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d0:	4813      	ldr	r0, [pc, #76]	; (8002520 <MX_TIM2_Init+0x94>)
 80024d2:	f002 fa0b 	bl	80048ec <HAL_TIM_Base_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024dc:	f7ff fc1e 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_TIM2_Init+0x94>)
 80024ee:	f002 fdc7 	bl	8005080 <HAL_TIM_ConfigClockSource>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024f8:	f7ff fc10 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_TIM2_Init+0x94>)
 800250a:	f003 f8fb 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002514:	f7ff fc02 	bl	8001d1c <Error_Handler>
  }

}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000294 	.word	0x20000294

08002524 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0318 	add.w	r3, r7, #24
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002542:	463b      	mov	r3, r7
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <MX_TIM3_Init+0xf0>)
 8002550:	4a31      	ldr	r2, [pc, #196]	; (8002618 <MX_TIM3_Init+0xf4>)
 8002552:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <MX_TIM3_Init+0xf0>)
 8002556:	2247      	movs	r2, #71	; 0x47
 8002558:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <MX_TIM3_Init+0xf0>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <MX_TIM3_Init+0xf0>)
 8002562:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <MX_TIM3_Init+0xf0>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <MX_TIM3_Init+0xf0>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002574:	4827      	ldr	r0, [pc, #156]	; (8002614 <MX_TIM3_Init+0xf0>)
 8002576:	f002 f9b9 	bl	80048ec <HAL_TIM_Base_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002580:	f7ff fbcc 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002588:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800258a:	f107 0318 	add.w	r3, r7, #24
 800258e:	4619      	mov	r1, r3
 8002590:	4820      	ldr	r0, [pc, #128]	; (8002614 <MX_TIM3_Init+0xf0>)
 8002592:	f002 fd75 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800259c:	f7ff fbbe 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80025a0:	481c      	ldr	r0, [pc, #112]	; (8002614 <MX_TIM3_Init+0xf0>)
 80025a2:	f002 fa73 	bl	8004a8c <HAL_TIM_IC_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80025ac:	f7ff fbb6 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	4619      	mov	r1, r3
 80025be:	4815      	ldr	r0, [pc, #84]	; (8002614 <MX_TIM3_Init+0xf0>)
 80025c0:	f003 f8a0 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80025ca:	f7ff fba7 	bl	8001d1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025d2:	2301      	movs	r3, #1
 80025d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 80025da:	2305      	movs	r3, #5
 80025dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	4619      	mov	r1, r3
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <MX_TIM3_Init+0xf0>)
 80025e6:	f002 fcb7 	bl	8004f58 <HAL_TIM_IC_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80025f0:	f7ff fb94 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2204      	movs	r2, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <MX_TIM3_Init+0xf0>)
 80025fc:	f002 fcac 	bl	8004f58 <HAL_TIM_IC_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002606:	f7ff fb89 	bl	8001d1c <Error_Handler>
  }

}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	; 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000204 	.word	0x20000204
 8002618:	40000400 	.word	0x40000400

0800261c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <MX_TIM4_Init+0x94>)
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <MX_TIM4_Init+0x98>)
 800263c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1124;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <MX_TIM4_Init+0x94>)
 8002640:	f240 4264 	movw	r2, #1124	; 0x464
 8002644:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <MX_TIM4_Init+0x94>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <MX_TIM4_Init+0x94>)
 800264e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002652:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <MX_TIM4_Init+0x94>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <MX_TIM4_Init+0x94>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002660:	4813      	ldr	r0, [pc, #76]	; (80026b0 <MX_TIM4_Init+0x94>)
 8002662:	f002 f943 	bl	80048ec <HAL_TIM_Base_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800266c:	f7ff fb56 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	4619      	mov	r1, r3
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <MX_TIM4_Init+0x94>)
 800267e:	f002 fcff 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002688:	f7ff fb48 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002694:	463b      	mov	r3, r7
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_TIM4_Init+0x94>)
 800269a:	f003 f833 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026a4:	f7ff fb3a 	bl	8001d1c <Error_Handler>
  }

}
 80026a8:	bf00      	nop
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200001bc 	.word	0x200001bc
 80026b4:	40000800 	.word	0x40000800

080026b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_TIM_Base_MspInit+0x140>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d114      	bne.n	8002702 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d8:	4b48      	ldr	r3, [pc, #288]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a47      	ldr	r2, [pc, #284]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 80026de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b45      	ldr	r3, [pc, #276]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2103      	movs	r1, #3
 80026f4:	2019      	movs	r0, #25
 80026f6:	f000 fb40 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80026fa:	2019      	movs	r0, #25
 80026fc:	f000 fb59 	bl	8002db2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002700:	e076      	b.n	80027f0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d114      	bne.n	8002736 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	61d3      	str	r3, [r2, #28]
 8002718:	4b38      	ldr	r3, [pc, #224]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2104      	movs	r1, #4
 8002728:	201c      	movs	r0, #28
 800272a:	f000 fb26 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800272e:	201c      	movs	r0, #28
 8002730:	f000 fb3f 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 8002734:	e05c      	b.n	80027f0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a31      	ldr	r2, [pc, #196]	; (8002800 <HAL_TIM_Base_MspInit+0x148>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d13e      	bne.n	80027be <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	61d3      	str	r3, [r2, #28]
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002770:	2330      	movs	r3, #48	; 0x30
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002778:	2302      	movs	r3, #2
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4820      	ldr	r0, [pc, #128]	; (8002804 <HAL_TIM_Base_MspInit+0x14c>)
 8002784:	f000 fb4c 	bl	8002e20 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_TIM_Base_MspInit+0x150>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_TIM_Base_MspInit+0x150>)
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2101      	movs	r1, #1
 80027b0:	201d      	movs	r0, #29
 80027b2:	f000 fae2 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027b6:	201d      	movs	r0, #29
 80027b8:	f000 fafb 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 80027bc:	e018      	b.n	80027f0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM4)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_TIM_Base_MspInit+0x154>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d113      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	61d3      	str	r3, [r2, #28]
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_TIM_Base_MspInit+0x144>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2103      	movs	r1, #3
 80027e4:	201e      	movs	r0, #30
 80027e6:	f000 fac8 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027ea:	201e      	movs	r0, #30
 80027ec:	f000 fae1 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 80027f0:	bf00      	nop
 80027f2:	3730      	adds	r7, #48	; 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	40000400 	.word	0x40000400
 8002804:	40010c00 	.word	0x40010c00
 8002808:	40010000 	.word	0x40010000
 800280c:	40000800 	.word	0x40000800

08002810 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_USART1_UART_Init+0x4c>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <MX_USART1_UART_Init+0x50>)
 8002818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <MX_USART1_UART_Init+0x4c>)
 800281c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_USART1_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_USART1_UART_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_USART1_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_USART1_UART_Init+0x4c>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_USART1_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_USART1_UART_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_USART1_UART_Init+0x4c>)
 8002848:	f002 ffcc 	bl	80057e4 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002852:	f7ff fa63 	bl	8001d1c <Error_Handler>
  }

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000031c 	.word	0x2000031c
 8002860:	40013800 	.word	0x40013800

08002864 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <MX_USART3_UART_Init+0x50>)
 800286c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 800288a:	220c      	movs	r2, #12
 800288c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_USART3_UART_Init+0x4c>)
 800289c:	f002 ffa2 	bl	80057e4 <HAL_UART_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028a6:	f7ff fa39 	bl	8001d1c <Error_Handler>
  }

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200002dc 	.word	0x200002dc
 80028b4:	40004800 	.word	0x40004800

080028b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0318 	add.w	r3, r7, #24
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <HAL_UART_MspInit+0xfc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d132      	bne.n	800293e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_UART_MspInit+0x100>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a36      	ldr	r2, [pc, #216]	; (80029b8 <HAL_UART_MspInit+0x100>)
 80028de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_UART_MspInit+0x100>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_UART_MspInit+0x100>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <HAL_UART_MspInit+0x100>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <HAL_UART_MspInit+0x100>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0318 	add.w	r3, r7, #24
 800291a:	4619      	mov	r1, r3
 800291c:	4827      	ldr	r0, [pc, #156]	; (80029bc <HAL_UART_MspInit+0x104>)
 800291e:	f000 fa7f 	bl	8002e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4619      	mov	r1, r3
 8002936:	4821      	ldr	r0, [pc, #132]	; (80029bc <HAL_UART_MspInit+0x104>)
 8002938:	f000 fa72 	bl	8002e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800293c:	e036      	b.n	80029ac <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_UART_MspInit+0x108>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d131      	bne.n	80029ac <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_UART_MspInit+0x100>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_UART_MspInit+0x100>)
 800294e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002952:	61d3      	str	r3, [r2, #28]
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_UART_MspInit+0x100>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_UART_MspInit+0x100>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_UART_MspInit+0x100>)
 8002966:	f043 0308 	orr.w	r3, r3, #8
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_UART_MspInit+0x100>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f107 0318 	add.w	r3, r7, #24
 800298a:	4619      	mov	r1, r3
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <HAL_UART_MspInit+0x10c>)
 800298e:	f000 fa47 	bl	8002e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0318 	add.w	r3, r7, #24
 80029a4:	4619      	mov	r1, r3
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <HAL_UART_MspInit+0x10c>)
 80029a8:	f000 fa3a 	bl	8002e20 <HAL_GPIO_Init>
}
 80029ac:	bf00      	nop
 80029ae:	3728      	adds	r7, #40	; 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010800 	.word	0x40010800
 80029c0:	40004800 	.word	0x40004800
 80029c4:	40010c00 	.word	0x40010c00

080029c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029ca:	e003      	b.n	80029d4 <LoopCopyDataInit>

080029cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029d2:	3104      	adds	r1, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029d4:	480a      	ldr	r0, [pc, #40]	; (8002a00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029dc:	d3f6      	bcc.n	80029cc <CopyDataInit>
  ldr r2, =_sbss
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029e0:	e002      	b.n	80029e8 <LoopFillZerobss>

080029e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029e4:	f842 3b04 	str.w	r3, [r2], #4

080029e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029ec:	d3f9      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ee:	f7ff fcf5 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f2:	f003 f8b5 	bl	8005b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029f6:	f7fd fc71 	bl	80002dc <main>
  bx lr
 80029fa:	4770      	bx	lr
  ldr r3, =_sidata
 80029fc:	080067e0 	.word	0x080067e0
  ldr r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a04:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 8002a08:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 8002a0c:	20000364 	.word	0x20000364

08002a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC1_2_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_Init+0x28>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_Init+0x28>)
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a24:	2003      	movs	r0, #3
 8002a26:	f000 f99d 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f000 f808 	bl	8002a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a30:	f7ff fbd4 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40022000 	.word	0x40022000

08002a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_InitTick+0x54>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_InitTick+0x58>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f9c3 	bl	8002dea <HAL_SYSTICK_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00e      	b.n	8002a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d80a      	bhi.n	8002a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a74:	2200      	movs	r2, #0
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f000 f97d 	bl	8002d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a80:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <HAL_InitTick+0x5c>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000030 	.word	0x20000030
 8002a98:	20000038 	.word	0x20000038
 8002a9c:	20000034 	.word	0x20000034

08002aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_IncTick+0x1c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_IncTick+0x20>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a03      	ldr	r2, [pc, #12]	; (8002ac0 <HAL_IncTick+0x20>)
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	20000038 	.word	0x20000038
 8002ac0:	2000035c 	.word	0x2000035c

08002ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <HAL_GetTick+0x10>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	2000035c 	.word	0x2000035c

08002ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_GetTick>
 8002ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d005      	beq.n	8002afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_Delay+0x40>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afe:	bf00      	nop
 8002b00:	f7ff ffe0 	bl	8002ac4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8f7      	bhi.n	8002b00 <HAL_Delay+0x28>
  {
  }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000038 	.word	0x20000038

08002b1c <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetREVID+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0c1b      	lsrs	r3, r3, #16
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e0042000 	.word	0xe0042000

08002b34 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_GetDEVID+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	e0042000 	.word	0xe0042000

08002b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4906      	ldr	r1, [pc, #24]	; (8002be4 <__NVIC_EnableIRQ+0x34>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100

08002be8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db10      	blt.n	8002c1c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4909      	ldr	r1, [pc, #36]	; (8002c28 <__NVIC_DisableIRQ+0x40>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	3320      	adds	r3, #32
 8002c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c18:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000e100 	.word	0xe000e100

08002c2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0c      	blt.n	8002c58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <__NVIC_ClearPendingIRQ+0x38>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db0a      	blt.n	8002c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <__NVIC_SetPriority+0x4c>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00a      	b.n	8002ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <__NVIC_SetPriority+0x50>)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	761a      	strb	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff90 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff feed 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff02 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff90 	bl	8002cbc <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff5f 	bl	8002c68 <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fef5 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff03 	bl	8002be8 <__NVIC_DisableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ff94 	bl	8002d20 <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff0b 	bl	8002c2c <__NVIC_ClearPendingIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b08b      	sub	sp, #44	; 0x2c
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	e127      	b.n	8003084 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e34:	2201      	movs	r2, #1
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8116 	bne.w	800307e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b12      	cmp	r3, #18
 8002e58:	d034      	beq.n	8002ec4 <HAL_GPIO_Init+0xa4>
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d80d      	bhi.n	8002e7a <HAL_GPIO_Init+0x5a>
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d02b      	beq.n	8002eba <HAL_GPIO_Init+0x9a>
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d804      	bhi.n	8002e70 <HAL_GPIO_Init+0x50>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d031      	beq.n	8002ece <HAL_GPIO_Init+0xae>
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d01c      	beq.n	8002ea8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e6e:	e048      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d043      	beq.n	8002efc <HAL_GPIO_Init+0xdc>
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d01b      	beq.n	8002eb0 <HAL_GPIO_Init+0x90>
          break;
 8002e78:	e043      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e7a:	4a89      	ldr	r2, [pc, #548]	; (80030a0 <HAL_GPIO_Init+0x280>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d026      	beq.n	8002ece <HAL_GPIO_Init+0xae>
 8002e80:	4a87      	ldr	r2, [pc, #540]	; (80030a0 <HAL_GPIO_Init+0x280>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d806      	bhi.n	8002e94 <HAL_GPIO_Init+0x74>
 8002e86:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_GPIO_Init+0x284>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d020      	beq.n	8002ece <HAL_GPIO_Init+0xae>
 8002e8c:	4a86      	ldr	r2, [pc, #536]	; (80030a8 <HAL_GPIO_Init+0x288>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_GPIO_Init+0xae>
          break;
 8002e92:	e036      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e94:	4a85      	ldr	r2, [pc, #532]	; (80030ac <HAL_GPIO_Init+0x28c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d019      	beq.n	8002ece <HAL_GPIO_Init+0xae>
 8002e9a:	4a85      	ldr	r2, [pc, #532]	; (80030b0 <HAL_GPIO_Init+0x290>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d016      	beq.n	8002ece <HAL_GPIO_Init+0xae>
 8002ea0:	4a84      	ldr	r2, [pc, #528]	; (80030b4 <HAL_GPIO_Init+0x294>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_GPIO_Init+0xae>
          break;
 8002ea6:	e02c      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	623b      	str	r3, [r7, #32]
          break;
 8002eae:	e028      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	623b      	str	r3, [r7, #32]
          break;
 8002eb8:	e023      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	623b      	str	r3, [r7, #32]
          break;
 8002ec2:	e01e      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	623b      	str	r3, [r7, #32]
          break;
 8002ecc:	e019      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	623b      	str	r3, [r7, #32]
          break;
 8002eda:	e012      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	611a      	str	r2, [r3, #16]
          break;
 8002eee:	e008      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	615a      	str	r2, [r3, #20]
          break;
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
          break;
 8002f00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2bff      	cmp	r3, #255	; 0xff
 8002f06:	d801      	bhi.n	8002f0c <HAL_GPIO_Init+0xec>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	e001      	b.n	8002f10 <HAL_GPIO_Init+0xf0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2bff      	cmp	r3, #255	; 0xff
 8002f16:	d802      	bhi.n	8002f1e <HAL_GPIO_Init+0xfe>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x104>
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	3b08      	subs	r3, #8
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	401a      	ands	r2, r3
 8002f36:	6a39      	ldr	r1, [r7, #32]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8096 	beq.w	800307e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_GPIO_Init+0x298>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_GPIO_Init+0x298>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6193      	str	r3, [r2, #24]
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_GPIO_Init+0x298>)
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f6a:	4a54      	ldr	r2, [pc, #336]	; (80030bc <HAL_GPIO_Init+0x29c>)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_GPIO_Init+0x2a0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0x19e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_GPIO_Init+0x2a4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00d      	beq.n	8002fba <HAL_GPIO_Init+0x19a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a49      	ldr	r2, [pc, #292]	; (80030c8 <HAL_GPIO_Init+0x2a8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_Init+0x196>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a48      	ldr	r2, [pc, #288]	; (80030cc <HAL_GPIO_Init+0x2ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_GPIO_Init+0x192>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x1a0>
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	e004      	b.n	8002fc0 <HAL_GPIO_Init+0x1a0>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_Init+0x1a0>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_GPIO_Init+0x1a0>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	f002 0203 	and.w	r2, r2, #3
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fd0:	493a      	ldr	r1, [pc, #232]	; (80030bc <HAL_GPIO_Init+0x29c>)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4938      	ldr	r1, [pc, #224]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
 8002ff6:	e006      	b.n	8003006 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4933      	ldr	r1, [pc, #204]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003002:	4013      	ands	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	492e      	ldr	r1, [pc, #184]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
 800301e:	e006      	b.n	800302e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003020:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	43db      	mvns	r3, r3
 8003028:	4929      	ldr	r1, [pc, #164]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 800302a:	4013      	ands	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800303a:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	4924      	ldr	r1, [pc, #144]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
 8003046:	e006      	b.n	8003056 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	43db      	mvns	r3, r3
 8003050:	491f      	ldr	r1, [pc, #124]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003052:	4013      	ands	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003062:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	491a      	ldr	r1, [pc, #104]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	60cb      	str	r3, [r1, #12]
 800306e:	e006      	b.n	800307e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	43db      	mvns	r3, r3
 8003078:	4915      	ldr	r1, [pc, #84]	; (80030d0 <HAL_GPIO_Init+0x2b0>)
 800307a:	4013      	ands	r3, r2
 800307c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	f47f aed0 	bne.w	8002e34 <HAL_GPIO_Init+0x14>
  }
}
 8003094:	bf00      	nop
 8003096:	372c      	adds	r7, #44	; 0x2c
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	10210000 	.word	0x10210000
 80030a4:	10110000 	.word	0x10110000
 80030a8:	10120000 	.word	0x10120000
 80030ac:	10310000 	.word	0x10310000
 80030b0:	10320000 	.word	0x10320000
 80030b4:	10220000 	.word	0x10220000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40010800 	.word	0x40010800
 80030c4:	40010c00 	.word	0x40010c00
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40011400 	.word	0x40011400
 80030d0:	40010400 	.word	0x40010400

080030d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e001      	b.n	80030f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	807b      	strh	r3, [r7, #2]
 800310e:	4613      	mov	r3, r2
 8003110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003112:	787b      	ldrb	r3, [r7, #1]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003118:	887a      	ldrh	r2, [r7, #2]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800311e:	e003      	b.n	8003128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	041a      	lsls	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	611a      	str	r2, [r3, #16]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
	...

08003134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fec0 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40010400 	.word	0x40010400

08003164 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_PWR_EnableBkUpAccess+0x14>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	420e0020 	.word	0x420e0020

0800317c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e26c      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8087 	beq.w	80032aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800319c:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d112      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d10b      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x12c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d168      	bne.n	80032a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e246      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x76>
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7f      	ldr	r2, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e02e      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0xbc>
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003238:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff fc34 	bl	8002ac4 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff fc30 	bl	8002ac4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1fa      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xe4>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff fc20 	bl	8002ac4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff fc1c 	bl	8002ac4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1e6      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x10c>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b6:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
 80032ce:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1ba      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4939      	ldr	r1, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7ff fbd5 	bl	8002ac4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff fbd1 	bl	8002ac4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e19b      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4927      	ldr	r1, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7ff fbb4 	bl	8002ac4 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7ff fbb0 	bl	8002ac4 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e17a      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03a      	beq.n	8003400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d019      	beq.n	80033c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7ff fb94 	bl	8002ac4 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a0:	f7ff fb90 	bl	8002ac4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e15a      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033be:	2001      	movs	r0, #1
 80033c0:	f000 fada 	bl	8003978 <RCC_Delay>
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033cc:	f7ff fb7a 	bl	8002ac4 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	e00f      	b.n	80033f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7ff fb76 	bl	8002ac4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d908      	bls.n	80033f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e140      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	42420000 	.word	0x42420000
 80033f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b9e      	ldr	r3, [pc, #632]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e9      	bne.n	80033d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a6 	beq.w	800355a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b97      	ldr	r3, [pc, #604]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b94      	ldr	r3, [pc, #592]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a93      	ldr	r2, [pc, #588]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b91      	ldr	r3, [pc, #580]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b8e      	ldr	r3, [pc, #568]	; (8003674 <HAL_RCC_OscConfig+0x4f8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b8b      	ldr	r3, [pc, #556]	; (8003674 <HAL_RCC_OscConfig+0x4f8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a8a      	ldr	r2, [pc, #552]	; (8003674 <HAL_RCC_OscConfig+0x4f8>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7ff fb37 	bl	8002ac4 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7ff fb33 	bl	8002ac4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0fd      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x312>
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6213      	str	r3, [r2, #32]
 800348c:	e02d      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x334>
 8003496:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a75      	ldr	r2, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a72      	ldr	r2, [pc, #456]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	e01c      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x356>
 80034b8:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a6c      	ldr	r2, [pc, #432]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6213      	str	r3, [r2, #32]
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a66      	ldr	r2, [pc, #408]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	4b64      	ldr	r3, [pc, #400]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a63      	ldr	r2, [pc, #396]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7ff fae7 	bl	8002ac4 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7ff fae3 	bl	8002ac4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0ab      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b57      	ldr	r3, [pc, #348]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCC_OscConfig+0x37e>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7ff fad1 	bl	8002ac4 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7ff facd 	bl	8002ac4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e095      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	4b48      	ldr	r3, [pc, #288]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a47      	ldr	r2, [pc, #284]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8081 	beq.w	8003666 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d061      	beq.n	8003634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d146      	bne.n	8003606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_OscConfig+0x4fc>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7ff faa1 	bl	8002ac4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7ff fa9d 	bl	8002ac4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e067      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	4b35      	ldr	r3, [pc, #212]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	492d      	ldr	r1, [pc, #180]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a19      	ldr	r1, [r3, #32]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	430b      	orrs	r3, r1
 80035d2:	4927      	ldr	r1, [pc, #156]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x4fc>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7ff fa71 	bl	8002ac4 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7ff fa6d 	bl	8002ac4 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e037      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x46a>
 8003604:	e02f      	b.n	8003666 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_RCC_OscConfig+0x4fc>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7ff fa5a 	bl	8002ac4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7ff fa56 	bl	8002ac4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e020      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x498>
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e013      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_OscConfig+0x4f4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	429a      	cmp	r2, r3
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	42420060 	.word	0x42420060

0800367c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e073      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7ff f9aa 	bl	8002ac4 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7ff f9a6 	bl	8002ac4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e053      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d210      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4601      	mov	r1, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	fa21 f303 	lsr.w	r3, r1, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1cc>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1d0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f908 	bl	8002a40 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000
 8003840:	40021000 	.word	0x40021000
 8003844:	0800678c 	.word	0x0800678c
 8003848:	20000030 	.word	0x20000030
 800384c:	20000034 	.word	0x20000034

08003850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b490      	push	{r4, r7}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003858:	1d3c      	adds	r4, r7, #4
 800385a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b04      	cmp	r3, #4
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x40>
 800388a:	2b08      	cmp	r3, #8
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x46>
 800388e:	e02d      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003890:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003892:	623b      	str	r3, [r7, #32]
      break;
 8003894:	e02d      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038a2:	4413      	add	r3, r2
 80038a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	0c5b      	lsrs	r3, r3, #17
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038c2:	4413      	add	r3, r2
 80038c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4a0f      	ldr	r2, [pc, #60]	; (800390c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ce:	fb02 f203 	mul.w	r2, r2, r3
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	e004      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	623b      	str	r3, [r7, #32]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ee:	623b      	str	r3, [r7, #32]
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc90      	pop	{r4, r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08006764 	.word	0x08006764
 8003904:	08006774 	.word	0x08006774
 8003908:	40021000 	.word	0x40021000
 800390c:	007a1200 	.word	0x007a1200
 8003910:	003d0900 	.word	0x003d0900

08003914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003918:	4b02      	ldr	r3, [pc, #8]	; (8003924 <HAL_RCC_GetHCLKFreq+0x10>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	20000030 	.word	0x20000030

08003928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800392c:	f7ff fff2 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003930:	4601      	mov	r1, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4a03      	ldr	r2, [pc, #12]	; (800394c <HAL_RCC_GetPCLK1Freq+0x24>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	0800679c 	.word	0x0800679c

08003950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003954:	f7ff ffde 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003958:	4601      	mov	r1, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0adb      	lsrs	r3, r3, #11
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003966:	5cd3      	ldrb	r3, [r2, r3]
 8003968:	fa21 f303 	lsr.w	r3, r1, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	0800679c 	.word	0x0800679c

08003978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <RCC_Delay+0x34>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <RCC_Delay+0x38>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a5b      	lsrs	r3, r3, #9
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003994:	bf00      	nop
  }
  while (Delay --);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <RCC_Delay+0x1c>
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000030 	.word	0x20000030
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	61d3      	str	r3, [r2, #28]
 80039ec:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d118      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a14:	f7ff f856 	bl	8002ac4 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7ff f852 	bl	8002ac4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e06d      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d027      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a68:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d014      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7ff f821 	bl	8002ac4 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7ff f81d 	bl	8002ac4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e036      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4917      	ldr	r1, [pc, #92]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	490b      	ldr	r1, [pc, #44]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42420440 	.word	0x42420440

08003b20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b08d      	sub	sp, #52	; 0x34
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b28:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003b2a:	f107 040c 	add.w	r4, r7, #12
 8003b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d07f      	beq.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d002      	beq.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d048      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b5c:	e08b      	b.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b64:	4b48      	ldr	r3, [pc, #288]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d07f      	beq.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b82:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0c5b      	lsrs	r3, r3, #17
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bae:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bca:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d102      	bne.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bdc:	e048      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bec:	e040      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	d108      	bne.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c10:	e01f      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003c2a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c30:	e00f      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3c:	d11a      	bne.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d014      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003c4a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c50:	e010      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003c52:	e00f      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c54:	f7ff fe7c 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0b9b      	lsrs	r3, r3, #14
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	3301      	adds	r3, #1
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003c74:	bf00      	nop
    }
  }
  return (frequency);
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3734      	adds	r7, #52	; 0x34
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd90      	pop	{r4, r7, pc}
 8003c80:	08006778 	.word	0x08006778
 8003c84:	08006788 	.word	0x08006788
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	003d0900 	.word	0x003d0900
 8003c94:	aaaaaaab 	.word	0xaaaaaaab

08003c98 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e084      	b.n	8003db8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7c5b      	ldrb	r3, [r3, #17]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe f9f2 	bl	80020a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9c8 	bl	8004060 <HAL_RTC_WaitForSynchro>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06b      	b.n	8003db8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa81 	bl	80041e8 <RTC_EnterInitMode>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e060      	b.n	8003db8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0207 	bic.w	r2, r2, #7
 8003d04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003d0e:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4926      	ldr	r1, [pc, #152]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d003      	beq.n	8003d3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e00e      	b.n	8003d5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7ff feee 	bl	8003b20 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e030      	b.n	8003db8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 010f 	bic.w	r1, r3, #15
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0c1a      	lsrs	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	b291      	uxth	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa55 	bl	8004238 <RTC_ExitInitMode>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2204      	movs	r2, #4
 8003d98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00c      	b.n	8003db8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003db6:	2300      	movs	r3, #0
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40006c00 	.word	0x40006c00

08003dc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_RTC_SetTime+0x20>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e080      	b.n	8003eea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	7c1b      	ldrb	r3, [r3, #16]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_RTC_SetTime+0x30>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e07a      	b.n	8003eea <HAL_RTC_SetTime+0x126>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d113      	bne.n	8003e2e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e10:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a5b      	subs	r3, r3, r1
 8003e20:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e22:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e28:	4413      	add	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e01e      	b.n	8003e6c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa28 	bl	8004288 <RTC_Bcd2ToByte>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e40:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fa1d 	bl	8004288 <RTC_Bcd2ToByte>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e5a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	789b      	ldrb	r3, [r3, #2]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fa11 	bl	8004288 <RTC_Bcd2ToByte>
 8003e66:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e68:	4423      	add	r3, r4
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f953 	bl	800411a <RTC_WriteTimeCounter>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e02f      	b.n	8003eea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0205 	bic.w	r2, r2, #5
 8003e98:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f964 	bl	8004168 <RTC_ReadAlarmCounter>
 8003ea0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d018      	beq.n	8003edc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d214      	bcs.n	8003edc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003eb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ebc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ebe:	6939      	ldr	r1, [r7, #16]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f96a 	bl	800419a <RTC_WriteAlarmCounter>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e006      	b.n	8003eea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
	...

08003ef4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_RTC_SetDate+0x24>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e097      	b.n	800404c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	7c1b      	ldrb	r3, [r3, #16]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_RTC_SetDate+0x34>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e091      	b.n	800404c <HAL_RTC_SetDate+0x158>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2202      	movs	r2, #2
 8003f32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	78da      	ldrb	r2, [r3, #3]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785a      	ldrb	r2, [r3, #1]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	789a      	ldrb	r2, [r3, #2]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	739a      	strb	r2, [r3, #14]
 8003f52:	e01a      	b.n	8003f8a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	78db      	ldrb	r3, [r3, #3]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f995 	bl	8004288 <RTC_Bcd2ToByte>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f98c 	bl	8004288 <RTC_Bcd2ToByte>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f983 	bl	8004288 <RTC_Bcd2ToByte>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	7bdb      	ldrb	r3, [r3, #15]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	7b59      	ldrb	r1, [r3, #13]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	7b9b      	ldrb	r3, [r3, #14]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f000 f993 	bl	80042c4 <RTC_WeekDayNum>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	7b1a      	ldrb	r2, [r3, #12]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f883 	bl	80040ba <RTC_ReadTimeCounter>
 8003fb4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <HAL_RTC_SetDate+0x160>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0adb      	lsrs	r3, r3, #11
 8003fc0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b18      	cmp	r3, #24
 8003fc6:	d93a      	bls.n	800403e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4a23      	ldr	r2, [pc, #140]	; (8004058 <HAL_RTC_SetDate+0x164>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <HAL_RTC_SetDate+0x168>)
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f89a 	bl	800411a <RTC_WriteTimeCounter>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e027      	b.n	800404c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8b3 	bl	8004168 <RTC_ReadAlarmCounter>
 8004002:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d018      	beq.n	800403e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d214      	bcs.n	800403e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800401a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800401e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8b9 	bl	800419a <RTC_WriteAlarmCounter>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2204      	movs	r2, #4
 8004032:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e006      	b.n	800404c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	91a2b3c5 	.word	0x91a2b3c5
 8004058:	aaaaaaab 	.word	0xaaaaaaab
 800405c:	00015180 	.word	0x00015180

08004060 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e01d      	b.n	80040b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0208 	bic.w	r2, r2, #8
 8004084:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004086:	f7fe fd1d 	bl	8002ac4 <HAL_GetTick>
 800408a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800408c:	e009      	b.n	80040a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800408e:	f7fe fd19 	bl	8002ac4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800409c:	d901      	bls.n	80040a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e007      	b.n	80040b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ee      	beq.n	800408e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	827b      	strh	r3, [r7, #18]
 80040c6:	2300      	movs	r3, #0
 80040c8:	823b      	strh	r3, [r7, #16]
 80040ca:	2300      	movs	r3, #0
 80040cc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80040ea:	8a7a      	ldrh	r2, [r7, #18]
 80040ec:	8a3b      	ldrh	r3, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d008      	beq.n	8004104 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80040f2:	8a3b      	ldrh	r3, [r7, #16]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e004      	b.n	800410e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004104:	8a7b      	ldrh	r3, [r7, #18]
 8004106:	041a      	lsls	r2, r3, #16
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800410e:	697b      	ldr	r3, [r7, #20]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f85d 	bl	80041e8 <RTC_EnterInitMode>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e011      	b.n	800415e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	0c12      	lsrs	r2, r2, #16
 8004142:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	b292      	uxth	r2, r2
 800414c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f872 	bl	8004238 <RTC_ExitInitMode>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	81fb      	strh	r3, [r7, #14]
 8004174:	2300      	movs	r3, #0
 8004176:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004188:	89fb      	ldrh	r3, [r7, #14]
 800418a:	041a      	lsls	r2, r3, #16
 800418c:	89bb      	ldrh	r3, [r7, #12]
 800418e:	4313      	orrs	r3, r2
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f81d 	bl	80041e8 <RTC_EnterInitMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e011      	b.n	80041de <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	0c12      	lsrs	r2, r2, #16
 80041c2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	b292      	uxth	r2, r2
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f832 	bl	8004238 <RTC_ExitInitMode>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80041f4:	f7fe fc66 	bl	8002ac4 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80041fa:	e009      	b.n	8004210 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80041fc:	f7fe fc62 	bl	8002ac4 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420a:	d901      	bls.n	8004210 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e00f      	b.n	8004230 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0210 	orr.w	r2, r2, #16
 800422c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0210 	bic.w	r2, r2, #16
 8004252:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004254:	f7fe fc36 	bl	8002ac4 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800425a:	e009      	b.n	8004270 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800425c:	f7fe fc32 	bl	8002ac4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800426a:	d901      	bls.n	8004270 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e007      	b.n	8004280 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ee      	beq.n	800425c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	b2db      	uxtb	r3, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
	...

080042c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
 80042d0:	4613      	mov	r3, r2
 80042d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80042e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d82d      	bhi.n	8004346 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <RTC_WeekDayNum+0xe4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	085a      	lsrs	r2, r3, #1
 80042fe:	78bb      	ldrb	r3, [r7, #2]
 8004300:	441a      	add	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	441a      	add	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	3b01      	subs	r3, #1
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3b01      	subs	r3, #1
 8004312:	4926      	ldr	r1, [pc, #152]	; (80043ac <RTC_WeekDayNum+0xe8>)
 8004314:	fba1 1303 	umull	r1, r3, r1, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	4922      	ldr	r1, [pc, #136]	; (80043ac <RTC_WeekDayNum+0xe8>)
 8004322:	fba1 1303 	umull	r1, r3, r1, r3
 8004326:	09db      	lsrs	r3, r3, #7
 8004328:	4413      	add	r3, r2
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <RTC_WeekDayNum+0xec>)
 800432e:	fba3 1302 	umull	r1, r3, r3, r2
 8004332:	1ad1      	subs	r1, r2, r3
 8004334:	0849      	lsrs	r1, r1, #1
 8004336:	440b      	add	r3, r1
 8004338:	0899      	lsrs	r1, r3, #2
 800433a:	460b      	mov	r3, r1
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e029      	b.n	800439a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <RTC_WeekDayNum+0xe4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	085a      	lsrs	r2, r3, #1
 800435a:	78bb      	ldrb	r3, [r7, #2]
 800435c:	441a      	add	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	441a      	add	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4910      	ldr	r1, [pc, #64]	; (80043ac <RTC_WeekDayNum+0xe8>)
 800436c:	fba1 1303 	umull	r1, r3, r1, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	490d      	ldr	r1, [pc, #52]	; (80043ac <RTC_WeekDayNum+0xe8>)
 8004378:	fba1 1303 	umull	r1, r3, r1, r3
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	4413      	add	r3, r2
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <RTC_WeekDayNum+0xec>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	1ad1      	subs	r1, r2, r3
 800438a:	0849      	lsrs	r1, r1, #1
 800438c:	440b      	add	r3, r1
 800438e:	0899      	lsrs	r1, r3, #2
 8004390:	460b      	mov	r3, r1
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	1a5b      	subs	r3, r3, r1
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	b2db      	uxtb	r3, r3
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	38e38e39 	.word	0x38e38e39
 80043ac:	51eb851f 	.word	0x51eb851f
 80043b0:	24924925 	.word	0x24924925

080043b4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_RTCEx_BKUPWrite+0x30>)
 80043c6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	b292      	uxth	r2, r2
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	40006c00 	.word	0x40006c00

080043e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_RTCEx_BKUPRead+0x34>)
 80043fc:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004410:	68bb      	ldr	r3, [r7, #8]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	40006c00 	.word	0x40006c00

08004420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e076      	b.n	8004520 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004442:	d009      	beq.n	8004458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
 800444a:	e005      	b.n	8004458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fe72 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	ea42 0103 	orr.w	r1, r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	0c1a      	lsrs	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f002 0204 	and.w	r2, r2, #4
 80044fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_SPI_Transmit+0x22>
 8004546:	2302      	movs	r3, #2
 8004548:	e126      	b.n	8004798 <HAL_SPI_Transmit+0x270>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004552:	f7fe fab7 	bl	8002ac4 <HAL_GetTick>
 8004556:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d002      	beq.n	800456e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004568:	2302      	movs	r3, #2
 800456a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800456c:	e10b      	b.n	8004786 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_SPI_Transmit+0x52>
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800457e:	e102      	b.n	8004786 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2203      	movs	r2, #3
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c6:	d10f      	bne.n	80045e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d007      	beq.n	8004606 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004604:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460e:	d14b      	bne.n	80046a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_SPI_Transmit+0xf6>
 8004618:	8afb      	ldrh	r3, [r7, #22]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d13e      	bne.n	800469c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	881a      	ldrh	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004642:	e02b      	b.n	800469c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d112      	bne.n	8004678 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	881a      	ldrh	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	86da      	strh	r2, [r3, #54]	; 0x36
 8004676:	e011      	b.n	800469c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004678:	f7fe fa24 	bl	8002ac4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d803      	bhi.n	8004690 <HAL_SPI_Transmit+0x168>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d102      	bne.n	8004696 <HAL_SPI_Transmit+0x16e>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	77fb      	strb	r3, [r7, #31]
          goto error;
 800469a:	e074      	b.n	8004786 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ce      	bne.n	8004644 <HAL_SPI_Transmit+0x11c>
 80046a6:	e04c      	b.n	8004742 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_SPI_Transmit+0x18e>
 80046b0:	8afb      	ldrh	r3, [r7, #22]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d140      	bne.n	8004738 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046dc:	e02c      	b.n	8004738 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d113      	bne.n	8004714 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	7812      	ldrb	r2, [r2, #0]
 80046f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	86da      	strh	r2, [r3, #54]	; 0x36
 8004712:	e011      	b.n	8004738 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004714:	f7fe f9d6 	bl	8002ac4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d803      	bhi.n	800472c <HAL_SPI_Transmit+0x204>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d102      	bne.n	8004732 <HAL_SPI_Transmit+0x20a>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004736:	e026      	b.n	8004786 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1cd      	bne.n	80046de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8b2 	bl	80048b0 <SPI_EndRxTxTransaction>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e000      	b.n	8004786 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004784:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004796:	7ffb      	ldrb	r3, [r7, #31]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047b0:	f7fe f988 	bl	8002ac4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047c0:	f7fe f980 	bl	8002ac4 <HAL_GetTick>
 80047c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	015b      	lsls	r3, r3, #5
 80047cc:	0d1b      	lsrs	r3, r3, #20
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	e054      	b.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d050      	beq.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e0:	f7fe f970 	bl	8002ac4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d902      	bls.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d13d      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480e:	d111      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	d004      	beq.n	8004824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d107      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d10f      	bne.n	800485e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e017      	b.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3b01      	subs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d19b      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000030 	.word	0x20000030

080048b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff ff6a 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e000      	b.n	80048e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e041      	b.n	8004982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd fed0 	bl	80026b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 fcc0 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e03a      	b.n	8004a1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_TIM_Base_Start_IT+0x98>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x58>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d009      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x58>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_TIM_Base_Start_IT+0x9c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x58>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <HAL_TIM_Base_Start_IT+0xa0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d111      	bne.n	8004a08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d010      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	e007      	b.n	8004a18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800

08004a30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10f      	bne.n	8004a78 <HAL_TIM_Base_Stop_IT+0x48>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_Base_Stop_IT+0x48>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e041      	b.n	8004b22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f839 	bl	8004b2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fbf0 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_IC_Start_IT+0x1a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e013      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x42>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_IC_Start_IT+0x2a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x42>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_IC_Start_IT+0x3a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e003      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x42>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_TIM_IC_Start_IT+0x54>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e013      	b.n	8004bb8 <HAL_TIM_IC_Start_IT+0x7c>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d104      	bne.n	8004ba0 <HAL_TIM_IC_Start_IT+0x64>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e00b      	b.n	8004bb8 <HAL_TIM_IC_Start_IT+0x7c>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d104      	bne.n	8004bb0 <HAL_TIM_IC_Start_IT+0x74>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e003      	b.n	8004bb8 <HAL_TIM_IC_Start_IT+0x7c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d102      	bne.n	8004bc6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0b3      	b.n	8004d32 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_IC_Start_IT+0x9e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	e013      	b.n	8004c02 <HAL_TIM_IC_Start_IT+0xc6>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_IC_Start_IT+0xae>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be8:	e00b      	b.n	8004c02 <HAL_TIM_IC_Start_IT+0xc6>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_IC_Start_IT+0xbe>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf8:	e003      	b.n	8004c02 <HAL_TIM_IC_Start_IT+0xc6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_IC_Start_IT+0xd6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	e013      	b.n	8004c3a <HAL_TIM_IC_Start_IT+0xfe>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_IC_Start_IT+0xe6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c20:	e00b      	b.n	8004c3a <HAL_TIM_IC_Start_IT+0xfe>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_IC_Start_IT+0xf6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c30:	e003      	b.n	8004c3a <HAL_TIM_IC_Start_IT+0xfe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d841      	bhi.n	8004cc4 <HAL_TIM_IC_Start_IT+0x188>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <HAL_TIM_IC_Start_IT+0x10c>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c7d 	.word	0x08004c7d
 8004c4c:	08004cc5 	.word	0x08004cc5
 8004c50:	08004cc5 	.word	0x08004cc5
 8004c54:	08004cc5 	.word	0x08004cc5
 8004c58:	08004c8f 	.word	0x08004c8f
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004cc5 	.word	0x08004cc5
 8004c68:	08004ca1 	.word	0x08004ca1
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004cb3 	.word	0x08004cb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0202 	orr.w	r2, r2, #2
 8004c8a:	60da      	str	r2, [r3, #12]
      break;
 8004c8c:	e01b      	b.n	8004cc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0204 	orr.w	r2, r2, #4
 8004c9c:	60da      	str	r2, [r3, #12]
      break;
 8004c9e:	e012      	b.n	8004cc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0208 	orr.w	r2, r2, #8
 8004cae:	60da      	str	r2, [r3, #12]
      break;
 8004cb0:	e009      	b.n	8004cc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0210 	orr.w	r2, r2, #16
 8004cc0:	60da      	str	r2, [r3, #12]
      break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004cc4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fcf3 	bl	80056ba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <HAL_TIM_IC_Start_IT+0x200>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x1c0>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x1c0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_TIM_IC_Start_IT+0x204>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x1c0>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <HAL_TIM_IC_Start_IT+0x208>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d111      	bne.n	8004d20 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d010      	beq.n	8004d30 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	e007      	b.n	8004d30 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800

08004d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0202 	mvn.w	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fe2c 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fa70 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa76 	bl	800528a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0204 	mvn.w	r2, #4
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc fe02 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa46 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fa4c 	bl	800528a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fdd8 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa1c 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa22 	bl	800528a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d122      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2208      	movs	r2, #8
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fdae 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9f2 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f9f8 	bl	800528a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fdfa 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fc6d 	bl	80057d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9bc 	bl	800529c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0220 	mvn.w	r2, #32
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fc38 	bl	80057c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e082      	b.n	8005078 <HAL_TIM_IC_ConfigChannel+0x120>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f000 f9f0 	bl	8005374 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 020c 	bic.w	r2, r2, #12
 8004fa2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6999      	ldr	r1, [r3, #24]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	619a      	str	r2, [r3, #24]
 8004fb6:	e05a      	b.n	800506e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 fa59 	bl	8005484 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fe0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6999      	ldr	r1, [r3, #24]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	619a      	str	r2, [r3, #24]
 8004ff6:	e03a      	b.n	800506e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d11b      	bne.n	8005036 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6819      	ldr	r1, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f000 faa4 	bl	800555a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 020c 	bic.w	r2, r2, #12
 8005020:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
 8005034:	e01b      	b.n	800506e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f000 fac3 	bl	80055d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005058:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69d9      	ldr	r1, [r3, #28]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	021a      	lsls	r2, r3, #8
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIM_ConfigClockSource+0x18>
 8005094:	2302      	movs	r3, #2
 8005096:	e0a6      	b.n	80051e6 <HAL_TIM_ConfigClockSource+0x166>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d067      	beq.n	80051a0 <HAL_TIM_ConfigClockSource+0x120>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d80b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x6c>
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d073      	beq.n	80051c0 <HAL_TIM_ConfigClockSource+0x140>
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d802      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x62>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d06f      	beq.n	80051c0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050e0:	e078      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d06c      	beq.n	80051c0 <HAL_TIM_ConfigClockSource+0x140>
 80050e6:	2b30      	cmp	r3, #48	; 0x30
 80050e8:	d06a      	beq.n	80051c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050ea:	e073      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d00d      	beq.n	800510c <HAL_TIM_ConfigClockSource+0x8c>
 80050f0:	2b70      	cmp	r3, #112	; 0x70
 80050f2:	d804      	bhi.n	80050fe <HAL_TIM_ConfigClockSource+0x7e>
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d033      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0xe0>
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d041      	beq.n	8005180 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050fc:	e06a      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005102:	d066      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x152>
 8005104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005108:	d017      	beq.n	800513a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800510a:	e063      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f000 faae 	bl	800567c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800512e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
      break;
 8005138:	e04c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6899      	ldr	r1, [r3, #8]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f000 fa97 	bl	800567c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800515c:	609a      	str	r2, [r3, #8]
      break;
 800515e:	e039      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	461a      	mov	r2, r3
 800516e:	f000 f95b 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2150      	movs	r1, #80	; 0x50
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fa65 	bl	8005648 <TIM_ITRx_SetConfig>
      break;
 800517e:	e029      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	461a      	mov	r2, r3
 800518e:	f000 f9b5 	bl	80054fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2160      	movs	r1, #96	; 0x60
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fa55 	bl	8005648 <TIM_ITRx_SetConfig>
      break;
 800519e:	e019      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6859      	ldr	r1, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	461a      	mov	r2, r3
 80051ae:	f000 f93b 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2140      	movs	r1, #64	; 0x40
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fa45 	bl	8005648 <TIM_ITRx_SetConfig>
      break;
 80051be:	e009      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f000 fa3c 	bl	8005648 <TIM_ITRx_SetConfig>
        break;
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b0c      	cmp	r3, #12
 8005202:	d831      	bhi.n	8005268 <HAL_TIM_ReadCapturedValue+0x78>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005241 	.word	0x08005241
 8005210:	08005269 	.word	0x08005269
 8005214:	08005269 	.word	0x08005269
 8005218:	08005269 	.word	0x08005269
 800521c:	0800524b 	.word	0x0800524b
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	08005255 	.word	0x08005255
 8005230:	08005269 	.word	0x08005269
 8005234:	08005269 	.word	0x08005269
 8005238:	08005269 	.word	0x08005269
 800523c:	0800525f 	.word	0x0800525f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	60fb      	str	r3, [r7, #12]

      break;
 8005248:	e00f      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	60fb      	str	r3, [r7, #12]

      break;
 8005252:	e00a      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	60fb      	str	r3, [r7, #12]

      break;
 800525c:	e005      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	60fb      	str	r3, [r7, #12]

      break;
 8005266:	e000      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005268:	bf00      	nop
  }

  return tmpreg;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr
	...

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a29      	ldr	r2, [pc, #164]	; (8005368 <TIM_Base_SetConfig+0xb8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0x30>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0x30>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a26      	ldr	r2, [pc, #152]	; (800536c <TIM_Base_SetConfig+0xbc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0x30>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a25      	ldr	r2, [pc, #148]	; (8005370 <TIM_Base_SetConfig+0xc0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <TIM_Base_SetConfig+0xb8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x62>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x62>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <TIM_Base_SetConfig+0xbc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x62>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a18      	ldr	r2, [pc, #96]	; (8005370 <TIM_Base_SetConfig+0xc0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <TIM_Base_SetConfig+0xb8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d103      	bne.n	8005358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	615a      	str	r2, [r3, #20]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800

08005374 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <TIM_TI1_SetConfig+0xa8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_TI1_SetConfig+0x46>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d007      	beq.n	80053ba <TIM_TI1_SetConfig+0x46>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <TIM_TI1_SetConfig+0xac>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_TI1_SetConfig+0x46>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <TIM_TI1_SetConfig+0xb0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <TIM_TI1_SetConfig+0x4a>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <TIM_TI1_SetConfig+0x4c>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e003      	b.n	80053de <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f023 030a 	bic.w	r3, r3, #10
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 030a 	and.w	r3, r3, #10
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800

08005428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 030a 	bic.w	r3, r3, #10
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr

08005484 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f023 0210 	bic.w	r2, r3, #16
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	031b      	lsls	r3, r3, #12
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f023 0210 	bic.w	r2, r3, #16
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005526:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	031b      	lsls	r3, r3, #12
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800555a:	b480      	push	{r7}
 800555c:	b087      	sub	sp, #28
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005596:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	b2db      	uxtb	r3, r3
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	031b      	lsls	r3, r3, #12
 8005614:	b29b      	uxth	r3, r3
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005622:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	031b      	lsls	r3, r3, #12
 8005628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	f043 0307 	orr.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	609a      	str	r2, [r3, #8]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	021a      	lsls	r2, r3, #8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	431a      	orrs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	2201      	movs	r2, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	43db      	mvns	r3, r3
 80056dc:	401a      	ands	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1a      	ldr	r2, [r3, #32]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	431a      	orrs	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e046      	b.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d009      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a10      	ldr	r2, [pc, #64]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10c      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800

080057c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e03f      	b.n	8005876 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd f854 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f905 	bl	8005a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800583c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800584c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b08a      	sub	sp, #40	; 0x28
 8005882:	af02      	add	r7, sp, #8
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b20      	cmp	r3, #32
 800589c:	d17c      	bne.n	8005998 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_UART_Transmit+0x2c>
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e075      	b.n	800599a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_UART_Transmit+0x3e>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e06e      	b.n	800599a <HAL_UART_Transmit+0x11c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2221      	movs	r2, #33	; 0x21
 80058ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80058d2:	f7fd f8f7 	bl	8002ac4 <HAL_GetTick>
 80058d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d108      	bne.n	8005900 <HAL_UART_Transmit+0x82>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e003      	b.n	8005908 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005910:	e02a      	b.n	8005968 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2180      	movs	r1, #128	; 0x80
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f840 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e036      	b.n	800599a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	3302      	adds	r3, #2
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	e007      	b.n	800595a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1cf      	bne.n	8005912 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	2140      	movs	r1, #64	; 0x40
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f810 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e006      	b.n	800599a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	e02c      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d028      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059c2:	f7fd f87f 	bl	8002ac4 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d21d      	bcs.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e00f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d0c3      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a72:	f023 030c 	bic.w	r3, r3, #12
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <UART_SetConfig+0x114>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d103      	bne.n	8005aa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fd ff56 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	e002      	b.n	8005aae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fd ff3e 	bl	8003928 <HAL_RCC_GetPCLK1Freq>
 8005aac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009a      	lsls	r2, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <UART_SetConfig+0x118>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	0119      	lsls	r1, r3, #4
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009a      	lsls	r2, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <UART_SetConfig+0x118>)
 8005ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2064      	movs	r0, #100	; 0x64
 8005aee:	fb00 f303 	mul.w	r3, r0, r3
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	3332      	adds	r3, #50	; 0x32
 8005af8:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <UART_SetConfig+0x118>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b04:	4419      	add	r1, r3
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009a      	lsls	r2, r3, #2
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <UART_SetConfig+0x118>)
 8005b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2064      	movs	r0, #100	; 0x64
 8005b26:	fb00 f303 	mul.w	r3, r0, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	3332      	adds	r3, #50	; 0x32
 8005b30:	4a07      	ldr	r2, [pc, #28]	; (8005b50 <UART_SetConfig+0x118>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	440a      	add	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40013800 	.word	0x40013800
 8005b50:	51eb851f 	.word	0x51eb851f

08005b54 <__errno>:
 8005b54:	4b01      	ldr	r3, [pc, #4]	; (8005b5c <__errno+0x8>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	2000003c 	.word	0x2000003c

08005b60 <__libc_init_array>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	2500      	movs	r5, #0
 8005b64:	4e0c      	ldr	r6, [pc, #48]	; (8005b98 <__libc_init_array+0x38>)
 8005b66:	4c0d      	ldr	r4, [pc, #52]	; (8005b9c <__libc_init_array+0x3c>)
 8005b68:	1ba4      	subs	r4, r4, r6
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	42a5      	cmp	r5, r4
 8005b6e:	d109      	bne.n	8005b84 <__libc_init_array+0x24>
 8005b70:	f000 fc34 	bl	80063dc <_init>
 8005b74:	2500      	movs	r5, #0
 8005b76:	4e0a      	ldr	r6, [pc, #40]	; (8005ba0 <__libc_init_array+0x40>)
 8005b78:	4c0a      	ldr	r4, [pc, #40]	; (8005ba4 <__libc_init_array+0x44>)
 8005b7a:	1ba4      	subs	r4, r4, r6
 8005b7c:	10a4      	asrs	r4, r4, #2
 8005b7e:	42a5      	cmp	r5, r4
 8005b80:	d105      	bne.n	8005b8e <__libc_init_array+0x2e>
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
 8005b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b88:	4798      	blx	r3
 8005b8a:	3501      	adds	r5, #1
 8005b8c:	e7ee      	b.n	8005b6c <__libc_init_array+0xc>
 8005b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b92:	4798      	blx	r3
 8005b94:	3501      	adds	r5, #1
 8005b96:	e7f2      	b.n	8005b7e <__libc_init_array+0x1e>
 8005b98:	080067d8 	.word	0x080067d8
 8005b9c:	080067d8 	.word	0x080067d8
 8005ba0:	080067d8 	.word	0x080067d8
 8005ba4:	080067dc 	.word	0x080067dc

08005ba8 <memset>:
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4402      	add	r2, r0
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d100      	bne.n	8005bb2 <memset+0xa>
 8005bb0:	4770      	bx	lr
 8005bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb6:	e7f9      	b.n	8005bac <memset+0x4>

08005bb8 <siprintf>:
 8005bb8:	b40e      	push	{r1, r2, r3}
 8005bba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bbe:	b500      	push	{lr}
 8005bc0:	b09c      	sub	sp, #112	; 0x70
 8005bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005bc4:	9002      	str	r0, [sp, #8]
 8005bc6:	9006      	str	r0, [sp, #24]
 8005bc8:	9107      	str	r1, [sp, #28]
 8005bca:	9104      	str	r1, [sp, #16]
 8005bcc:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <siprintf+0x38>)
 8005bce:	4909      	ldr	r1, [pc, #36]	; (8005bf4 <siprintf+0x3c>)
 8005bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd4:	9105      	str	r1, [sp, #20]
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	a902      	add	r1, sp, #8
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	f000 f866 	bl	8005cac <_svfiprintf_r>
 8005be0:	2200      	movs	r2, #0
 8005be2:	9b02      	ldr	r3, [sp, #8]
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	b01c      	add	sp, #112	; 0x70
 8005be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bec:	b003      	add	sp, #12
 8005bee:	4770      	bx	lr
 8005bf0:	2000003c 	.word	0x2000003c
 8005bf4:	ffff0208 	.word	0xffff0208

08005bf8 <__ssputs_r>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	688e      	ldr	r6, [r1, #8]
 8005bfe:	4682      	mov	sl, r0
 8005c00:	429e      	cmp	r6, r3
 8005c02:	460c      	mov	r4, r1
 8005c04:	4690      	mov	r8, r2
 8005c06:	4699      	mov	r9, r3
 8005c08:	d837      	bhi.n	8005c7a <__ssputs_r+0x82>
 8005c0a:	898a      	ldrh	r2, [r1, #12]
 8005c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c10:	d031      	beq.n	8005c76 <__ssputs_r+0x7e>
 8005c12:	2302      	movs	r3, #2
 8005c14:	6825      	ldr	r5, [r4, #0]
 8005c16:	6909      	ldr	r1, [r1, #16]
 8005c18:	1a6f      	subs	r7, r5, r1
 8005c1a:	6965      	ldr	r5, [r4, #20]
 8005c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c24:	f109 0301 	add.w	r3, r9, #1
 8005c28:	443b      	add	r3, r7
 8005c2a:	429d      	cmp	r5, r3
 8005c2c:	bf38      	it	cc
 8005c2e:	461d      	movcc	r5, r3
 8005c30:	0553      	lsls	r3, r2, #21
 8005c32:	d530      	bpl.n	8005c96 <__ssputs_r+0x9e>
 8005c34:	4629      	mov	r1, r5
 8005c36:	f000 fb37 	bl	80062a8 <_malloc_r>
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	b950      	cbnz	r0, 8005c54 <__ssputs_r+0x5c>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	f8ca 3000 	str.w	r3, [sl]
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	463a      	mov	r2, r7
 8005c56:	6921      	ldr	r1, [r4, #16]
 8005c58:	f000 fab6 	bl	80061c8 <memcpy>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	6126      	str	r6, [r4, #16]
 8005c6a:	443e      	add	r6, r7
 8005c6c:	6026      	str	r6, [r4, #0]
 8005c6e:	464e      	mov	r6, r9
 8005c70:	6165      	str	r5, [r4, #20]
 8005c72:	1bed      	subs	r5, r5, r7
 8005c74:	60a5      	str	r5, [r4, #8]
 8005c76:	454e      	cmp	r6, r9
 8005c78:	d900      	bls.n	8005c7c <__ssputs_r+0x84>
 8005c7a:	464e      	mov	r6, r9
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4641      	mov	r1, r8
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	f000 faac 	bl	80061de <memmove>
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	2000      	movs	r0, #0
 8005c8a:	1b9b      	subs	r3, r3, r6
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	441e      	add	r6, r3
 8005c92:	6026      	str	r6, [r4, #0]
 8005c94:	e7dc      	b.n	8005c50 <__ssputs_r+0x58>
 8005c96:	462a      	mov	r2, r5
 8005c98:	f000 fb60 	bl	800635c <_realloc_r>
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1e2      	bne.n	8005c68 <__ssputs_r+0x70>
 8005ca2:	6921      	ldr	r1, [r4, #16]
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	f000 fab3 	bl	8006210 <_free_r>
 8005caa:	e7c8      	b.n	8005c3e <__ssputs_r+0x46>

08005cac <_svfiprintf_r>:
 8005cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	461d      	mov	r5, r3
 8005cb2:	898b      	ldrh	r3, [r1, #12]
 8005cb4:	b09d      	sub	sp, #116	; 0x74
 8005cb6:	061f      	lsls	r7, r3, #24
 8005cb8:	4680      	mov	r8, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	d50f      	bpl.n	8005ce0 <_svfiprintf_r+0x34>
 8005cc0:	690b      	ldr	r3, [r1, #16]
 8005cc2:	b96b      	cbnz	r3, 8005ce0 <_svfiprintf_r+0x34>
 8005cc4:	2140      	movs	r1, #64	; 0x40
 8005cc6:	f000 faef 	bl	80062a8 <_malloc_r>
 8005cca:	6020      	str	r0, [r4, #0]
 8005ccc:	6120      	str	r0, [r4, #16]
 8005cce:	b928      	cbnz	r0, 8005cdc <_svfiprintf_r+0x30>
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	f8c8 3000 	str.w	r3, [r8]
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	e0c8      	b.n	8005e6e <_svfiprintf_r+0x1c2>
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	6163      	str	r3, [r4, #20]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cea:	2330      	movs	r3, #48	; 0x30
 8005cec:	f04f 0b01 	mov.w	fp, #1
 8005cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cf4:	9503      	str	r5, [sp, #12]
 8005cf6:	4637      	mov	r7, r6
 8005cf8:	463d      	mov	r5, r7
 8005cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cfe:	b10b      	cbz	r3, 8005d04 <_svfiprintf_r+0x58>
 8005d00:	2b25      	cmp	r3, #37	; 0x25
 8005d02:	d13e      	bne.n	8005d82 <_svfiprintf_r+0xd6>
 8005d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d08:	d00b      	beq.n	8005d22 <_svfiprintf_r+0x76>
 8005d0a:	4653      	mov	r3, sl
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4640      	mov	r0, r8
 8005d12:	f7ff ff71 	bl	8005bf8 <__ssputs_r>
 8005d16:	3001      	adds	r0, #1
 8005d18:	f000 80a4 	beq.w	8005e64 <_svfiprintf_r+0x1b8>
 8005d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1e:	4453      	add	r3, sl
 8005d20:	9309      	str	r3, [sp, #36]	; 0x24
 8005d22:	783b      	ldrb	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 809d 	beq.w	8005e64 <_svfiprintf_r+0x1b8>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	9307      	str	r3, [sp, #28]
 8005d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d3e:	462f      	mov	r7, r5
 8005d40:	2205      	movs	r2, #5
 8005d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d46:	4850      	ldr	r0, [pc, #320]	; (8005e88 <_svfiprintf_r+0x1dc>)
 8005d48:	f000 fa30 	bl	80061ac <memchr>
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	b9d0      	cbnz	r0, 8005d86 <_svfiprintf_r+0xda>
 8005d50:	06d9      	lsls	r1, r3, #27
 8005d52:	bf44      	itt	mi
 8005d54:	2220      	movmi	r2, #32
 8005d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d5a:	071a      	lsls	r2, r3, #28
 8005d5c:	bf44      	itt	mi
 8005d5e:	222b      	movmi	r2, #43	; 0x2b
 8005d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d64:	782a      	ldrb	r2, [r5, #0]
 8005d66:	2a2a      	cmp	r2, #42	; 0x2a
 8005d68:	d015      	beq.n	8005d96 <_svfiprintf_r+0xea>
 8005d6a:	462f      	mov	r7, r5
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	250a      	movs	r5, #10
 8005d70:	9a07      	ldr	r2, [sp, #28]
 8005d72:	4639      	mov	r1, r7
 8005d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d78:	3b30      	subs	r3, #48	; 0x30
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	d94d      	bls.n	8005e1a <_svfiprintf_r+0x16e>
 8005d7e:	b1b8      	cbz	r0, 8005db0 <_svfiprintf_r+0x104>
 8005d80:	e00f      	b.n	8005da2 <_svfiprintf_r+0xf6>
 8005d82:	462f      	mov	r7, r5
 8005d84:	e7b8      	b.n	8005cf8 <_svfiprintf_r+0x4c>
 8005d86:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <_svfiprintf_r+0x1dc>)
 8005d88:	463d      	mov	r5, r7
 8005d8a:	1a80      	subs	r0, r0, r2
 8005d8c:	fa0b f000 	lsl.w	r0, fp, r0
 8005d90:	4318      	orrs	r0, r3
 8005d92:	9004      	str	r0, [sp, #16]
 8005d94:	e7d3      	b.n	8005d3e <_svfiprintf_r+0x92>
 8005d96:	9a03      	ldr	r2, [sp, #12]
 8005d98:	1d11      	adds	r1, r2, #4
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	9103      	str	r1, [sp, #12]
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	db01      	blt.n	8005da6 <_svfiprintf_r+0xfa>
 8005da2:	9207      	str	r2, [sp, #28]
 8005da4:	e004      	b.n	8005db0 <_svfiprintf_r+0x104>
 8005da6:	4252      	negs	r2, r2
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	9207      	str	r2, [sp, #28]
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	783b      	ldrb	r3, [r7, #0]
 8005db2:	2b2e      	cmp	r3, #46	; 0x2e
 8005db4:	d10c      	bne.n	8005dd0 <_svfiprintf_r+0x124>
 8005db6:	787b      	ldrb	r3, [r7, #1]
 8005db8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dba:	d133      	bne.n	8005e24 <_svfiprintf_r+0x178>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	3702      	adds	r7, #2
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	9203      	str	r2, [sp, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfb8      	it	lt
 8005dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	4d2e      	ldr	r5, [pc, #184]	; (8005e8c <_svfiprintf_r+0x1e0>)
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	7839      	ldrb	r1, [r7, #0]
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f9e8 	bl	80061ac <memchr>
 8005ddc:	b138      	cbz	r0, 8005dee <_svfiprintf_r+0x142>
 8005dde:	2340      	movs	r3, #64	; 0x40
 8005de0:	1b40      	subs	r0, r0, r5
 8005de2:	fa03 f000 	lsl.w	r0, r3, r0
 8005de6:	9b04      	ldr	r3, [sp, #16]
 8005de8:	3701      	adds	r7, #1
 8005dea:	4303      	orrs	r3, r0
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	7839      	ldrb	r1, [r7, #0]
 8005df0:	2206      	movs	r2, #6
 8005df2:	4827      	ldr	r0, [pc, #156]	; (8005e90 <_svfiprintf_r+0x1e4>)
 8005df4:	1c7e      	adds	r6, r7, #1
 8005df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dfa:	f000 f9d7 	bl	80061ac <memchr>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d038      	beq.n	8005e74 <_svfiprintf_r+0x1c8>
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <_svfiprintf_r+0x1e8>)
 8005e04:	bb13      	cbnz	r3, 8005e4c <_svfiprintf_r+0x1a0>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	3307      	adds	r3, #7
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	3308      	adds	r3, #8
 8005e10:	9303      	str	r3, [sp, #12]
 8005e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e14:	444b      	add	r3, r9
 8005e16:	9309      	str	r3, [sp, #36]	; 0x24
 8005e18:	e76d      	b.n	8005cf6 <_svfiprintf_r+0x4a>
 8005e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e1e:	2001      	movs	r0, #1
 8005e20:	460f      	mov	r7, r1
 8005e22:	e7a6      	b.n	8005d72 <_svfiprintf_r+0xc6>
 8005e24:	2300      	movs	r3, #0
 8005e26:	250a      	movs	r5, #10
 8005e28:	4619      	mov	r1, r3
 8005e2a:	3701      	adds	r7, #1
 8005e2c:	9305      	str	r3, [sp, #20]
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e34:	3a30      	subs	r2, #48	; 0x30
 8005e36:	2a09      	cmp	r2, #9
 8005e38:	d903      	bls.n	8005e42 <_svfiprintf_r+0x196>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0c8      	beq.n	8005dd0 <_svfiprintf_r+0x124>
 8005e3e:	9105      	str	r1, [sp, #20]
 8005e40:	e7c6      	b.n	8005dd0 <_svfiprintf_r+0x124>
 8005e42:	fb05 2101 	mla	r1, r5, r1, r2
 8005e46:	2301      	movs	r3, #1
 8005e48:	4607      	mov	r7, r0
 8005e4a:	e7f0      	b.n	8005e2e <_svfiprintf_r+0x182>
 8005e4c:	ab03      	add	r3, sp, #12
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4622      	mov	r2, r4
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <_svfiprintf_r+0x1ec>)
 8005e54:	a904      	add	r1, sp, #16
 8005e56:	4640      	mov	r0, r8
 8005e58:	f3af 8000 	nop.w
 8005e5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e60:	4681      	mov	r9, r0
 8005e62:	d1d6      	bne.n	8005e12 <_svfiprintf_r+0x166>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	065b      	lsls	r3, r3, #25
 8005e68:	f53f af35 	bmi.w	8005cd6 <_svfiprintf_r+0x2a>
 8005e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e6e:	b01d      	add	sp, #116	; 0x74
 8005e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e74:	ab03      	add	r3, sp, #12
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <_svfiprintf_r+0x1ec>)
 8005e7c:	a904      	add	r1, sp, #16
 8005e7e:	4640      	mov	r0, r8
 8005e80:	f000 f882 	bl	8005f88 <_printf_i>
 8005e84:	e7ea      	b.n	8005e5c <_svfiprintf_r+0x1b0>
 8005e86:	bf00      	nop
 8005e88:	080067a4 	.word	0x080067a4
 8005e8c:	080067aa 	.word	0x080067aa
 8005e90:	080067ae 	.word	0x080067ae
 8005e94:	00000000 	.word	0x00000000
 8005e98:	08005bf9 	.word	0x08005bf9

08005e9c <_printf_common>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	4691      	mov	r9, r2
 8005ea2:	461f      	mov	r7, r3
 8005ea4:	688a      	ldr	r2, [r1, #8]
 8005ea6:	690b      	ldr	r3, [r1, #16]
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bfb8      	it	lt
 8005eae:	4613      	movlt	r3, r2
 8005eb0:	f8c9 3000 	str.w	r3, [r9]
 8005eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb8:	460c      	mov	r4, r1
 8005eba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ebe:	b112      	cbz	r2, 8005ec6 <_printf_common+0x2a>
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	f8c9 3000 	str.w	r3, [r9]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	0699      	lsls	r1, r3, #26
 8005eca:	bf42      	ittt	mi
 8005ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ed0:	3302      	addmi	r3, #2
 8005ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8005ed6:	6825      	ldr	r5, [r4, #0]
 8005ed8:	f015 0506 	ands.w	r5, r5, #6
 8005edc:	d107      	bne.n	8005eee <_printf_common+0x52>
 8005ede:	f104 0a19 	add.w	sl, r4, #25
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	42ab      	cmp	r3, r5
 8005eec:	dc29      	bgt.n	8005f42 <_printf_common+0xa6>
 8005eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	3300      	adds	r3, #0
 8005ef6:	bf18      	it	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	0692      	lsls	r2, r2, #26
 8005efc:	d42e      	bmi.n	8005f5c <_printf_common+0xc0>
 8005efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f02:	4639      	mov	r1, r7
 8005f04:	4630      	mov	r0, r6
 8005f06:	47c0      	blx	r8
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d021      	beq.n	8005f50 <_printf_common+0xb4>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	68e5      	ldr	r5, [r4, #12]
 8005f10:	f003 0306 	and.w	r3, r3, #6
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	bf18      	it	ne
 8005f18:	2500      	movne	r5, #0
 8005f1a:	f8d9 2000 	ldr.w	r2, [r9]
 8005f1e:	f04f 0900 	mov.w	r9, #0
 8005f22:	bf08      	it	eq
 8005f24:	1aad      	subeq	r5, r5, r2
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	6922      	ldr	r2, [r4, #16]
 8005f2a:	bf08      	it	eq
 8005f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f30:	4293      	cmp	r3, r2
 8005f32:	bfc4      	itt	gt
 8005f34:	1a9b      	subgt	r3, r3, r2
 8005f36:	18ed      	addgt	r5, r5, r3
 8005f38:	341a      	adds	r4, #26
 8005f3a:	454d      	cmp	r5, r9
 8005f3c:	d11a      	bne.n	8005f74 <_printf_common+0xd8>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e008      	b.n	8005f54 <_printf_common+0xb8>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4652      	mov	r2, sl
 8005f46:	4639      	mov	r1, r7
 8005f48:	4630      	mov	r0, r6
 8005f4a:	47c0      	blx	r8
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d103      	bne.n	8005f58 <_printf_common+0xbc>
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	3501      	adds	r5, #1
 8005f5a:	e7c2      	b.n	8005ee2 <_printf_common+0x46>
 8005f5c:	2030      	movs	r0, #48	; 0x30
 8005f5e:	18e1      	adds	r1, r4, r3
 8005f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f6a:	4422      	add	r2, r4
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f72:	e7c4      	b.n	8005efe <_printf_common+0x62>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4622      	mov	r2, r4
 8005f78:	4639      	mov	r1, r7
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	47c0      	blx	r8
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d0e6      	beq.n	8005f50 <_printf_common+0xb4>
 8005f82:	f109 0901 	add.w	r9, r9, #1
 8005f86:	e7d8      	b.n	8005f3a <_printf_common+0x9e>

08005f88 <_printf_i>:
 8005f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f90:	460c      	mov	r4, r1
 8005f92:	7e09      	ldrb	r1, [r1, #24]
 8005f94:	b085      	sub	sp, #20
 8005f96:	296e      	cmp	r1, #110	; 0x6e
 8005f98:	4617      	mov	r7, r2
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	4698      	mov	r8, r3
 8005f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fa0:	f000 80b3 	beq.w	800610a <_printf_i+0x182>
 8005fa4:	d822      	bhi.n	8005fec <_printf_i+0x64>
 8005fa6:	2963      	cmp	r1, #99	; 0x63
 8005fa8:	d036      	beq.n	8006018 <_printf_i+0x90>
 8005faa:	d80a      	bhi.n	8005fc2 <_printf_i+0x3a>
 8005fac:	2900      	cmp	r1, #0
 8005fae:	f000 80b9 	beq.w	8006124 <_printf_i+0x19c>
 8005fb2:	2958      	cmp	r1, #88	; 0x58
 8005fb4:	f000 8083 	beq.w	80060be <_printf_i+0x136>
 8005fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fc0:	e032      	b.n	8006028 <_printf_i+0xa0>
 8005fc2:	2964      	cmp	r1, #100	; 0x64
 8005fc4:	d001      	beq.n	8005fca <_printf_i+0x42>
 8005fc6:	2969      	cmp	r1, #105	; 0x69
 8005fc8:	d1f6      	bne.n	8005fb8 <_printf_i+0x30>
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	6813      	ldr	r3, [r2, #0]
 8005fce:	0605      	lsls	r5, r0, #24
 8005fd0:	f103 0104 	add.w	r1, r3, #4
 8005fd4:	d52a      	bpl.n	800602c <_printf_i+0xa4>
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6011      	str	r1, [r2, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	da03      	bge.n	8005fe6 <_printf_i+0x5e>
 8005fde:	222d      	movs	r2, #45	; 0x2d
 8005fe0:	425b      	negs	r3, r3
 8005fe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005fe6:	486f      	ldr	r0, [pc, #444]	; (80061a4 <_printf_i+0x21c>)
 8005fe8:	220a      	movs	r2, #10
 8005fea:	e039      	b.n	8006060 <_printf_i+0xd8>
 8005fec:	2973      	cmp	r1, #115	; 0x73
 8005fee:	f000 809d 	beq.w	800612c <_printf_i+0x1a4>
 8005ff2:	d808      	bhi.n	8006006 <_printf_i+0x7e>
 8005ff4:	296f      	cmp	r1, #111	; 0x6f
 8005ff6:	d020      	beq.n	800603a <_printf_i+0xb2>
 8005ff8:	2970      	cmp	r1, #112	; 0x70
 8005ffa:	d1dd      	bne.n	8005fb8 <_printf_i+0x30>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	e003      	b.n	800600e <_printf_i+0x86>
 8006006:	2975      	cmp	r1, #117	; 0x75
 8006008:	d017      	beq.n	800603a <_printf_i+0xb2>
 800600a:	2978      	cmp	r1, #120	; 0x78
 800600c:	d1d4      	bne.n	8005fb8 <_printf_i+0x30>
 800600e:	2378      	movs	r3, #120	; 0x78
 8006010:	4865      	ldr	r0, [pc, #404]	; (80061a8 <_printf_i+0x220>)
 8006012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006016:	e055      	b.n	80060c4 <_printf_i+0x13c>
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601e:	1d19      	adds	r1, r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6011      	str	r1, [r2, #0]
 8006024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006028:	2301      	movs	r3, #1
 800602a:	e08c      	b.n	8006146 <_printf_i+0x1be>
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006032:	6011      	str	r1, [r2, #0]
 8006034:	bf18      	it	ne
 8006036:	b21b      	sxthne	r3, r3
 8006038:	e7cf      	b.n	8005fda <_printf_i+0x52>
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	1d18      	adds	r0, r3, #4
 8006040:	6010      	str	r0, [r2, #0]
 8006042:	0628      	lsls	r0, r5, #24
 8006044:	d501      	bpl.n	800604a <_printf_i+0xc2>
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	e002      	b.n	8006050 <_printf_i+0xc8>
 800604a:	0668      	lsls	r0, r5, #25
 800604c:	d5fb      	bpl.n	8006046 <_printf_i+0xbe>
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	296f      	cmp	r1, #111	; 0x6f
 8006052:	bf14      	ite	ne
 8006054:	220a      	movne	r2, #10
 8006056:	2208      	moveq	r2, #8
 8006058:	4852      	ldr	r0, [pc, #328]	; (80061a4 <_printf_i+0x21c>)
 800605a:	2100      	movs	r1, #0
 800605c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006060:	6865      	ldr	r5, [r4, #4]
 8006062:	2d00      	cmp	r5, #0
 8006064:	60a5      	str	r5, [r4, #8]
 8006066:	f2c0 8095 	blt.w	8006194 <_printf_i+0x20c>
 800606a:	6821      	ldr	r1, [r4, #0]
 800606c:	f021 0104 	bic.w	r1, r1, #4
 8006070:	6021      	str	r1, [r4, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d13d      	bne.n	80060f2 <_printf_i+0x16a>
 8006076:	2d00      	cmp	r5, #0
 8006078:	f040 808e 	bne.w	8006198 <_printf_i+0x210>
 800607c:	4665      	mov	r5, ip
 800607e:	2a08      	cmp	r2, #8
 8006080:	d10b      	bne.n	800609a <_printf_i+0x112>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	07db      	lsls	r3, r3, #31
 8006086:	d508      	bpl.n	800609a <_printf_i+0x112>
 8006088:	6923      	ldr	r3, [r4, #16]
 800608a:	6862      	ldr	r2, [r4, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	bfde      	ittt	le
 8006090:	2330      	movle	r3, #48	; 0x30
 8006092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800609a:	ebac 0305 	sub.w	r3, ip, r5
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	f8cd 8000 	str.w	r8, [sp]
 80060a4:	463b      	mov	r3, r7
 80060a6:	aa03      	add	r2, sp, #12
 80060a8:	4621      	mov	r1, r4
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff fef6 	bl	8005e9c <_printf_common>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d14d      	bne.n	8006150 <_printf_i+0x1c8>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b005      	add	sp, #20
 80060ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060be:	4839      	ldr	r0, [pc, #228]	; (80061a4 <_printf_i+0x21c>)
 80060c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060c4:	6813      	ldr	r3, [r2, #0]
 80060c6:	6821      	ldr	r1, [r4, #0]
 80060c8:	1d1d      	adds	r5, r3, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6015      	str	r5, [r2, #0]
 80060ce:	060a      	lsls	r2, r1, #24
 80060d0:	d50b      	bpl.n	80060ea <_printf_i+0x162>
 80060d2:	07ca      	lsls	r2, r1, #31
 80060d4:	bf44      	itt	mi
 80060d6:	f041 0120 	orrmi.w	r1, r1, #32
 80060da:	6021      	strmi	r1, [r4, #0]
 80060dc:	b91b      	cbnz	r3, 80060e6 <_printf_i+0x15e>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	f022 0220 	bic.w	r2, r2, #32
 80060e4:	6022      	str	r2, [r4, #0]
 80060e6:	2210      	movs	r2, #16
 80060e8:	e7b7      	b.n	800605a <_printf_i+0xd2>
 80060ea:	064d      	lsls	r5, r1, #25
 80060ec:	bf48      	it	mi
 80060ee:	b29b      	uxthmi	r3, r3
 80060f0:	e7ef      	b.n	80060d2 <_printf_i+0x14a>
 80060f2:	4665      	mov	r5, ip
 80060f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80060f8:	fb02 3311 	mls	r3, r2, r1, r3
 80060fc:	5cc3      	ldrb	r3, [r0, r3]
 80060fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006102:	460b      	mov	r3, r1
 8006104:	2900      	cmp	r1, #0
 8006106:	d1f5      	bne.n	80060f4 <_printf_i+0x16c>
 8006108:	e7b9      	b.n	800607e <_printf_i+0xf6>
 800610a:	6813      	ldr	r3, [r2, #0]
 800610c:	6825      	ldr	r5, [r4, #0]
 800610e:	1d18      	adds	r0, r3, #4
 8006110:	6961      	ldr	r1, [r4, #20]
 8006112:	6010      	str	r0, [r2, #0]
 8006114:	0628      	lsls	r0, r5, #24
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	d501      	bpl.n	800611e <_printf_i+0x196>
 800611a:	6019      	str	r1, [r3, #0]
 800611c:	e002      	b.n	8006124 <_printf_i+0x19c>
 800611e:	066a      	lsls	r2, r5, #25
 8006120:	d5fb      	bpl.n	800611a <_printf_i+0x192>
 8006122:	8019      	strh	r1, [r3, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	4665      	mov	r5, ip
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	e7b9      	b.n	80060a0 <_printf_i+0x118>
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	1d19      	adds	r1, r3, #4
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	681d      	ldr	r5, [r3, #0]
 8006134:	6862      	ldr	r2, [r4, #4]
 8006136:	2100      	movs	r1, #0
 8006138:	4628      	mov	r0, r5
 800613a:	f000 f837 	bl	80061ac <memchr>
 800613e:	b108      	cbz	r0, 8006144 <_printf_i+0x1bc>
 8006140:	1b40      	subs	r0, r0, r5
 8006142:	6060      	str	r0, [r4, #4]
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	6123      	str	r3, [r4, #16]
 8006148:	2300      	movs	r3, #0
 800614a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800614e:	e7a7      	b.n	80060a0 <_printf_i+0x118>
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	462a      	mov	r2, r5
 8006154:	4639      	mov	r1, r7
 8006156:	4630      	mov	r0, r6
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d0aa      	beq.n	80060b4 <_printf_i+0x12c>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	079b      	lsls	r3, r3, #30
 8006162:	d413      	bmi.n	800618c <_printf_i+0x204>
 8006164:	68e0      	ldr	r0, [r4, #12]
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	4298      	cmp	r0, r3
 800616a:	bfb8      	it	lt
 800616c:	4618      	movlt	r0, r3
 800616e:	e7a3      	b.n	80060b8 <_printf_i+0x130>
 8006170:	2301      	movs	r3, #1
 8006172:	464a      	mov	r2, r9
 8006174:	4639      	mov	r1, r7
 8006176:	4630      	mov	r0, r6
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d09a      	beq.n	80060b4 <_printf_i+0x12c>
 800617e:	3501      	adds	r5, #1
 8006180:	68e3      	ldr	r3, [r4, #12]
 8006182:	9a03      	ldr	r2, [sp, #12]
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	42ab      	cmp	r3, r5
 8006188:	dcf2      	bgt.n	8006170 <_printf_i+0x1e8>
 800618a:	e7eb      	b.n	8006164 <_printf_i+0x1dc>
 800618c:	2500      	movs	r5, #0
 800618e:	f104 0919 	add.w	r9, r4, #25
 8006192:	e7f5      	b.n	8006180 <_printf_i+0x1f8>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1ac      	bne.n	80060f2 <_printf_i+0x16a>
 8006198:	7803      	ldrb	r3, [r0, #0]
 800619a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a2:	e76c      	b.n	800607e <_printf_i+0xf6>
 80061a4:	080067b5 	.word	0x080067b5
 80061a8:	080067c6 	.word	0x080067c6

080061ac <memchr>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	b2c9      	uxtb	r1, r1
 80061b0:	4402      	add	r2, r0
 80061b2:	4290      	cmp	r0, r2
 80061b4:	4603      	mov	r3, r0
 80061b6:	d101      	bne.n	80061bc <memchr+0x10>
 80061b8:	2300      	movs	r3, #0
 80061ba:	e003      	b.n	80061c4 <memchr+0x18>
 80061bc:	781c      	ldrb	r4, [r3, #0]
 80061be:	3001      	adds	r0, #1
 80061c0:	428c      	cmp	r4, r1
 80061c2:	d1f6      	bne.n	80061b2 <memchr+0x6>
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd10      	pop	{r4, pc}

080061c8 <memcpy>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	1e43      	subs	r3, r0, #1
 80061cc:	440a      	add	r2, r1
 80061ce:	4291      	cmp	r1, r2
 80061d0:	d100      	bne.n	80061d4 <memcpy+0xc>
 80061d2:	bd10      	pop	{r4, pc}
 80061d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061dc:	e7f7      	b.n	80061ce <memcpy+0x6>

080061de <memmove>:
 80061de:	4288      	cmp	r0, r1
 80061e0:	b510      	push	{r4, lr}
 80061e2:	eb01 0302 	add.w	r3, r1, r2
 80061e6:	d807      	bhi.n	80061f8 <memmove+0x1a>
 80061e8:	1e42      	subs	r2, r0, #1
 80061ea:	4299      	cmp	r1, r3
 80061ec:	d00a      	beq.n	8006204 <memmove+0x26>
 80061ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061f6:	e7f8      	b.n	80061ea <memmove+0xc>
 80061f8:	4283      	cmp	r3, r0
 80061fa:	d9f5      	bls.n	80061e8 <memmove+0xa>
 80061fc:	1881      	adds	r1, r0, r2
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	42d3      	cmn	r3, r2
 8006202:	d100      	bne.n	8006206 <memmove+0x28>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800620a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800620e:	e7f7      	b.n	8006200 <memmove+0x22>

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d043      	beq.n	80062a0 <_free_r+0x90>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f000 f8d0 	bl	80063c8 <__malloc_lock>
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <_free_r+0x94>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	4610      	mov	r0, r2
 800622e:	b933      	cbnz	r3, 800623e <_free_r+0x2e>
 8006230:	6063      	str	r3, [r4, #4]
 8006232:	6014      	str	r4, [r2, #0]
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800623a:	f000 b8c6 	b.w	80063ca <__malloc_unlock>
 800623e:	42a3      	cmp	r3, r4
 8006240:	d90b      	bls.n	800625a <_free_r+0x4a>
 8006242:	6821      	ldr	r1, [r4, #0]
 8006244:	1862      	adds	r2, r4, r1
 8006246:	4293      	cmp	r3, r2
 8006248:	bf01      	itttt	eq
 800624a:	681a      	ldreq	r2, [r3, #0]
 800624c:	685b      	ldreq	r3, [r3, #4]
 800624e:	1852      	addeq	r2, r2, r1
 8006250:	6022      	streq	r2, [r4, #0]
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	6004      	str	r4, [r0, #0]
 8006256:	e7ed      	b.n	8006234 <_free_r+0x24>
 8006258:	4613      	mov	r3, r2
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	b10a      	cbz	r2, 8006262 <_free_r+0x52>
 800625e:	42a2      	cmp	r2, r4
 8006260:	d9fa      	bls.n	8006258 <_free_r+0x48>
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	1858      	adds	r0, r3, r1
 8006266:	42a0      	cmp	r0, r4
 8006268:	d10b      	bne.n	8006282 <_free_r+0x72>
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	4401      	add	r1, r0
 800626e:	1858      	adds	r0, r3, r1
 8006270:	4282      	cmp	r2, r0
 8006272:	6019      	str	r1, [r3, #0]
 8006274:	d1de      	bne.n	8006234 <_free_r+0x24>
 8006276:	6810      	ldr	r0, [r2, #0]
 8006278:	6852      	ldr	r2, [r2, #4]
 800627a:	4401      	add	r1, r0
 800627c:	6019      	str	r1, [r3, #0]
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	e7d8      	b.n	8006234 <_free_r+0x24>
 8006282:	d902      	bls.n	800628a <_free_r+0x7a>
 8006284:	230c      	movs	r3, #12
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	e7d4      	b.n	8006234 <_free_r+0x24>
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	1821      	adds	r1, r4, r0
 800628e:	428a      	cmp	r2, r1
 8006290:	bf01      	itttt	eq
 8006292:	6811      	ldreq	r1, [r2, #0]
 8006294:	6852      	ldreq	r2, [r2, #4]
 8006296:	1809      	addeq	r1, r1, r0
 8006298:	6021      	streq	r1, [r4, #0]
 800629a:	6062      	str	r2, [r4, #4]
 800629c:	605c      	str	r4, [r3, #4]
 800629e:	e7c9      	b.n	8006234 <_free_r+0x24>
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	20000108 	.word	0x20000108

080062a8 <_malloc_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	1ccd      	adds	r5, r1, #3
 80062ac:	f025 0503 	bic.w	r5, r5, #3
 80062b0:	3508      	adds	r5, #8
 80062b2:	2d0c      	cmp	r5, #12
 80062b4:	bf38      	it	cc
 80062b6:	250c      	movcc	r5, #12
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	4606      	mov	r6, r0
 80062bc:	db01      	blt.n	80062c2 <_malloc_r+0x1a>
 80062be:	42a9      	cmp	r1, r5
 80062c0:	d903      	bls.n	80062ca <_malloc_r+0x22>
 80062c2:	230c      	movs	r3, #12
 80062c4:	6033      	str	r3, [r6, #0]
 80062c6:	2000      	movs	r0, #0
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	f000 f87d 	bl	80063c8 <__malloc_lock>
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <_malloc_r+0xac>)
 80062d0:	6814      	ldr	r4, [r2, #0]
 80062d2:	4621      	mov	r1, r4
 80062d4:	b991      	cbnz	r1, 80062fc <_malloc_r+0x54>
 80062d6:	4c20      	ldr	r4, [pc, #128]	; (8006358 <_malloc_r+0xb0>)
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	b91b      	cbnz	r3, 80062e4 <_malloc_r+0x3c>
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 f863 	bl	80063a8 <_sbrk_r>
 80062e2:	6020      	str	r0, [r4, #0]
 80062e4:	4629      	mov	r1, r5
 80062e6:	4630      	mov	r0, r6
 80062e8:	f000 f85e 	bl	80063a8 <_sbrk_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d124      	bne.n	800633a <_malloc_r+0x92>
 80062f0:	230c      	movs	r3, #12
 80062f2:	4630      	mov	r0, r6
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	f000 f868 	bl	80063ca <__malloc_unlock>
 80062fa:	e7e4      	b.n	80062c6 <_malloc_r+0x1e>
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	1b5b      	subs	r3, r3, r5
 8006300:	d418      	bmi.n	8006334 <_malloc_r+0x8c>
 8006302:	2b0b      	cmp	r3, #11
 8006304:	d90f      	bls.n	8006326 <_malloc_r+0x7e>
 8006306:	600b      	str	r3, [r1, #0]
 8006308:	18cc      	adds	r4, r1, r3
 800630a:	50cd      	str	r5, [r1, r3]
 800630c:	4630      	mov	r0, r6
 800630e:	f000 f85c 	bl	80063ca <__malloc_unlock>
 8006312:	f104 000b 	add.w	r0, r4, #11
 8006316:	1d23      	adds	r3, r4, #4
 8006318:	f020 0007 	bic.w	r0, r0, #7
 800631c:	1ac3      	subs	r3, r0, r3
 800631e:	d0d3      	beq.n	80062c8 <_malloc_r+0x20>
 8006320:	425a      	negs	r2, r3
 8006322:	50e2      	str	r2, [r4, r3]
 8006324:	e7d0      	b.n	80062c8 <_malloc_r+0x20>
 8006326:	684b      	ldr	r3, [r1, #4]
 8006328:	428c      	cmp	r4, r1
 800632a:	bf16      	itet	ne
 800632c:	6063      	strne	r3, [r4, #4]
 800632e:	6013      	streq	r3, [r2, #0]
 8006330:	460c      	movne	r4, r1
 8006332:	e7eb      	b.n	800630c <_malloc_r+0x64>
 8006334:	460c      	mov	r4, r1
 8006336:	6849      	ldr	r1, [r1, #4]
 8006338:	e7cc      	b.n	80062d4 <_malloc_r+0x2c>
 800633a:	1cc4      	adds	r4, r0, #3
 800633c:	f024 0403 	bic.w	r4, r4, #3
 8006340:	42a0      	cmp	r0, r4
 8006342:	d005      	beq.n	8006350 <_malloc_r+0xa8>
 8006344:	1a21      	subs	r1, r4, r0
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f82e 	bl	80063a8 <_sbrk_r>
 800634c:	3001      	adds	r0, #1
 800634e:	d0cf      	beq.n	80062f0 <_malloc_r+0x48>
 8006350:	6025      	str	r5, [r4, #0]
 8006352:	e7db      	b.n	800630c <_malloc_r+0x64>
 8006354:	20000108 	.word	0x20000108
 8006358:	2000010c 	.word	0x2000010c

0800635c <_realloc_r>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	4607      	mov	r7, r0
 8006360:	4614      	mov	r4, r2
 8006362:	460e      	mov	r6, r1
 8006364:	b921      	cbnz	r1, 8006370 <_realloc_r+0x14>
 8006366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800636a:	4611      	mov	r1, r2
 800636c:	f7ff bf9c 	b.w	80062a8 <_malloc_r>
 8006370:	b922      	cbnz	r2, 800637c <_realloc_r+0x20>
 8006372:	f7ff ff4d 	bl	8006210 <_free_r>
 8006376:	4625      	mov	r5, r4
 8006378:	4628      	mov	r0, r5
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637c:	f000 f826 	bl	80063cc <_malloc_usable_size_r>
 8006380:	42a0      	cmp	r0, r4
 8006382:	d20f      	bcs.n	80063a4 <_realloc_r+0x48>
 8006384:	4621      	mov	r1, r4
 8006386:	4638      	mov	r0, r7
 8006388:	f7ff ff8e 	bl	80062a8 <_malloc_r>
 800638c:	4605      	mov	r5, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	d0f2      	beq.n	8006378 <_realloc_r+0x1c>
 8006392:	4631      	mov	r1, r6
 8006394:	4622      	mov	r2, r4
 8006396:	f7ff ff17 	bl	80061c8 <memcpy>
 800639a:	4631      	mov	r1, r6
 800639c:	4638      	mov	r0, r7
 800639e:	f7ff ff37 	bl	8006210 <_free_r>
 80063a2:	e7e9      	b.n	8006378 <_realloc_r+0x1c>
 80063a4:	4635      	mov	r5, r6
 80063a6:	e7e7      	b.n	8006378 <_realloc_r+0x1c>

080063a8 <_sbrk_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	2300      	movs	r3, #0
 80063ac:	4c05      	ldr	r4, [pc, #20]	; (80063c4 <_sbrk_r+0x1c>)
 80063ae:	4605      	mov	r5, r0
 80063b0:	4608      	mov	r0, r1
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	f7fb ffdc 	bl	8002370 <_sbrk>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_sbrk_r+0x1a>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_sbrk_r+0x1a>
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	20000360 	.word	0x20000360

080063c8 <__malloc_lock>:
 80063c8:	4770      	bx	lr

080063ca <__malloc_unlock>:
 80063ca:	4770      	bx	lr

080063cc <_malloc_usable_size_r>:
 80063cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d0:	1f18      	subs	r0, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bfbc      	itt	lt
 80063d6:	580b      	ldrlt	r3, [r1, r0]
 80063d8:	18c0      	addlt	r0, r0, r3
 80063da:	4770      	bx	lr

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
